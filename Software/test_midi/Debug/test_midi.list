
test_midi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006294  08006294  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006294  08006294  00016294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800629c  0800629c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080062a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000070  08006314  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08006314  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019dff  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b2  00000000  00000000  00039e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0003d258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0003e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022236  00000000  00000000  0003fcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a049  00000000  00000000  00061ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcd9a  00000000  00000000  0007bf3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158cd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006504  00000000  00000000  00158d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006178 	.word	0x08006178

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006178 	.word	0x08006178

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Analogue_init>:
uint16_t adc_tab[4];
uint8_t values[32] = {0};
int sel = 0; // Sélection des 4 potentiomètres pour les MUX_Analogiques

void Analogue_init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	edit_sel_pots();
 80005c8:	f000 f898 	bl	80006fc <edit_sel_pots>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_tab, 4); // Active l'ADC
 80005cc:	2204      	movs	r2, #4
 80005ce:	4904      	ldr	r1, [pc, #16]	; (80005e0 <Analogue_init+0x1c>)
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <Analogue_init+0x20>)
 80005d2:	f001 f91f 	bl	8001814 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim6); // Appel la fonction Analogue_irq_callback() quand la conversion Analog->Digital est finie
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <Analogue_init+0x24>)
 80005d8:	f003 fcee 	bl	8003fb8 <HAL_TIM_Base_Start>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000090 	.word	0x20000090
 80005e4:	200000bc 	.word	0x200000bc
 80005e8:	2000018c 	.word	0x2000018c

080005ec <Analogue_irq_callback>:

void Analogue_irq_callback(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	adc_available = 1; // Indique que la conversion Analog->Digital est finie
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <Analogue_irq_callback+0x14>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	2000008c 	.word	0x2000008c

08000604 <Analogue_process>:

void Analogue_process(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	if (adc_available == 1) // Si l'ADC a convertit la tension en numérique
 800060a:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <Analogue_process+0xe0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d163      	bne.n	80006da <Analogue_process+0xd6>
	{
		if (sel == 7 || sel == 0) {
 8000612:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <Analogue_process+0xe4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b07      	cmp	r3, #7
 8000618:	d003      	beq.n	8000622 <Analogue_process+0x1e>
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <Analogue_process+0xe4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <Analogue_process+0x2a>
			printf("%u\t", sel);
 8000622:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <Analogue_process+0xe4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4619      	mov	r1, r3
 8000628:	4830      	ldr	r0, [pc, #192]	; (80006ec <Analogue_process+0xe8>)
 800062a:	f004 fd43 	bl	80050b4 <iprintf>
		}
		for(int itr = 0 ; itr < 4 ; itr++) // Affiche les valeurs numérique des 4 potentiomètres
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	e02f      	b.n	8000694 <Analogue_process+0x90>
		{
			uint8_t numero_potard = itr + (sel * 4);
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <Analogue_process+0xe4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	b2da      	uxtb	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4413      	add	r3, r2
 8000644:	70fb      	strb	r3, [r7, #3]
			uint8_t new_value = adc_tab[itr]/32;
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <Analogue_process+0xec>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064e:	095b      	lsrs	r3, r3, #5
 8000650:	b29b      	uxth	r3, r3
 8000652:	70bb      	strb	r3, [r7, #2]
			if (values[numero_potard] != new_value) { // Regarde si la position du potentiomètre a changée
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <Analogue_process+0xf0>)
 8000658:	5cd3      	ldrb	r3, [r2, r3]
 800065a:	78ba      	ldrb	r2, [r7, #2]
 800065c:	429a      	cmp	r2, r3
 800065e:	d009      	beq.n	8000674 <Analogue_process+0x70>
				values[numero_potard] = new_value; // Enregistre la nouvelle valeur
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	4924      	ldr	r1, [pc, #144]	; (80006f4 <Analogue_process+0xf0>)
 8000664:	78ba      	ldrb	r2, [r7, #2]
 8000666:	54ca      	strb	r2, [r1, r3]
				send_new_value(numero_potard, new_value); // envoyer la nouvelle valeur via l'UART et l'USB
 8000668:	78ba      	ldrb	r2, [r7, #2]
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	4611      	mov	r1, r2
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fa7b 	bl	8000b6a <send_new_value>
				//printf("#");
			}
			if (sel == 7 || sel == 0) {
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <Analogue_process+0xe4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b07      	cmp	r3, #7
 800067a:	d003      	beq.n	8000684 <Analogue_process+0x80>
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <Analogue_process+0xe4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d104      	bne.n	800068e <Analogue_process+0x8a>
				printf("%u\t", new_value);
 8000684:	78bb      	ldrb	r3, [r7, #2]
 8000686:	4619      	mov	r1, r3
 8000688:	4818      	ldr	r0, [pc, #96]	; (80006ec <Analogue_process+0xe8>)
 800068a:	f004 fd13 	bl	80050b4 <iprintf>
		for(int itr = 0 ; itr < 4 ; itr++) // Affiche les valeurs numérique des 4 potentiomètres
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3301      	adds	r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b03      	cmp	r3, #3
 8000698:	ddcc      	ble.n	8000634 <Analogue_process+0x30>
			}
		}
		if (sel == 7 || sel == 0) {
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <Analogue_process+0xe4>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b07      	cmp	r3, #7
 80006a0:	d003      	beq.n	80006aa <Analogue_process+0xa6>
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <Analogue_process+0xe4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d102      	bne.n	80006b0 <Analogue_process+0xac>
			printf("\t");//\r\n"
 80006aa:	2009      	movs	r0, #9
 80006ac:	f004 fd1a 	bl	80050e4 <putchar>
		}

		// Modifie les 4 potentiomètres sélectionnés
		if (sel == 7) {
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <Analogue_process+0xe4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b07      	cmp	r3, #7
 80006b6:	d106      	bne.n	80006c6 <Analogue_process+0xc2>
			printf("\r\n");
 80006b8:	480f      	ldr	r0, [pc, #60]	; (80006f8 <Analogue_process+0xf4>)
 80006ba:	f004 fd97 	bl	80051ec <puts>
			sel = 0;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <Analogue_process+0xe4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	e004      	b.n	80006d0 <Analogue_process+0xcc>
		} else {
			sel += 1;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <Analogue_process+0xe4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <Analogue_process+0xe4>)
 80006ce:	6013      	str	r3, [r2, #0]
		}
		edit_sel_pots();
 80006d0:	f000 f814 	bl	80006fc <edit_sel_pots>

		adc_available = 0;
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <Analogue_process+0xe0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
	}
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	200000b8 	.word	0x200000b8
 80006ec:	08006190 	.word	0x08006190
 80006f0:	20000090 	.word	0x20000090
 80006f4:	20000098 	.word	0x20000098
 80006f8:	08006194 	.word	0x08006194

080006fc <edit_sel_pots>:

void edit_sel_pots() { // Modifie les 4 potentiomètres sélectionnés par les MUX_Analogiques
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, sel & 0b1); // sel0
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <edit_sel_pots+0x50>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	2110      	movs	r1, #16
 8000710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000714:	f002 fc1e 	bl	8002f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, sel & 0b10); // sel1
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <edit_sel_pots+0x50>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	b2db      	uxtb	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	2120      	movs	r1, #32
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f002 fc12 	bl	8002f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, sel & 0b100); // sel2
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <edit_sel_pots+0x50>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	2140      	movs	r1, #64	; 0x40
 8000740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000744:	f002 fc06 	bl	8002f54 <HAL_GPIO_WritePin>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000b8 	.word	0x200000b8

08000750 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2220      	movs	r2, #32
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f004 fc9b 	bl	80050a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800076e:	4b48      	ldr	r3, [pc, #288]	; (8000890 <MX_ADC1_Init+0x140>)
 8000770:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000774:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000776:	4b46      	ldr	r3, [pc, #280]	; (8000890 <MX_ADC1_Init+0x140>)
 8000778:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800077c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077e:	4b44      	ldr	r3, [pc, #272]	; (8000890 <MX_ADC1_Init+0x140>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000784:	4b42      	ldr	r3, [pc, #264]	; (8000890 <MX_ADC1_Init+0x140>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <MX_ADC1_Init+0x140>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000790:	4b3f      	ldr	r3, [pc, #252]	; (8000890 <MX_ADC1_Init+0x140>)
 8000792:	2201      	movs	r2, #1
 8000794:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000796:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <MX_ADC1_Init+0x140>)
 8000798:	2204      	movs	r2, #4
 800079a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800079c:	4b3c      	ldr	r3, [pc, #240]	; (8000890 <MX_ADC1_Init+0x140>)
 800079e:	2200      	movs	r2, #0
 80007a0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a2:	4b3b      	ldr	r3, [pc, #236]	; (8000890 <MX_ADC1_Init+0x140>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80007a8:	4b39      	ldr	r3, [pc, #228]	; (8000890 <MX_ADC1_Init+0x140>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ae:	4b38      	ldr	r3, [pc, #224]	; (8000890 <MX_ADC1_Init+0x140>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80007b6:	4b36      	ldr	r3, [pc, #216]	; (8000890 <MX_ADC1_Init+0x140>)
 80007b8:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007be:	4b34      	ldr	r3, [pc, #208]	; (8000890 <MX_ADC1_Init+0x140>)
 80007c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_ADC1_Init+0x140>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_ADC1_Init+0x140>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007d4:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_ADC1_Init+0x140>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007dc:	482c      	ldr	r0, [pc, #176]	; (8000890 <MX_ADC1_Init+0x140>)
 80007de:	f000 fe95 	bl	800150c <HAL_ADC_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80007e8:	f000 f9ba 	bl	8000b60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f4:	4619      	mov	r1, r3
 80007f6:	4826      	ldr	r0, [pc, #152]	; (8000890 <MX_ADC1_Init+0x140>)
 80007f8:	f001 fe04 	bl	8002404 <HAL_ADCEx_MultiModeConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000802:	f000 f9ad 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_ADC1_Init+0x144>)
 8000808:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080a:	2306      	movs	r3, #6
 800080c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800080e:	2305      	movs	r3, #5
 8000810:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000812:	237f      	movs	r3, #127	; 0x7f
 8000814:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000816:	2304      	movs	r3, #4
 8000818:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	481b      	ldr	r0, [pc, #108]	; (8000890 <MX_ADC1_Init+0x140>)
 8000824:	f001 f8be 	bl	80019a4 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800082e:	f000 f997 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_ADC1_Init+0x148>)
 8000834:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000836:	230c      	movs	r3, #12
 8000838:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4814      	ldr	r0, [pc, #80]	; (8000890 <MX_ADC1_Init+0x140>)
 8000840:	f001 f8b0 	bl	80019a4 <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800084a:	f000 f989 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_ADC1_Init+0x14c>)
 8000850:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000852:	2312      	movs	r3, #18
 8000854:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_ADC1_Init+0x140>)
 800085c:	f001 f8a2 	bl	80019a4 <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000866:	f000 f97b 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <MX_ADC1_Init+0x150>)
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800086e:	2318      	movs	r3, #24
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_ADC1_Init+0x140>)
 8000878:	f001 f894 	bl	80019a4 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000882:	f000 f96d 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3730      	adds	r7, #48	; 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000bc 	.word	0x200000bc
 8000894:	04300002 	.word	0x04300002
 8000898:	08600004 	.word	0x08600004
 800089c:	0c900008 	.word	0x0c900008
 80008a0:	10c00010 	.word	0x10c00010

080008a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09a      	sub	sp, #104	; 0x68
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2244      	movs	r2, #68	; 0x44
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f004 fbed 	bl	80050a4 <memset>
  if(adcHandle->Instance==ADC1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008d2:	d15f      	bne.n	8000994 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008de:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 f91f 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80008f0:	f000 f936 	bl	8000b60 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <HAL_ADC_MspInit+0xf8>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	4a28      	ldr	r2, [pc, #160]	; (800099c <HAL_ADC_MspInit+0xf8>)
 80008fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <HAL_ADC_MspInit+0xf8>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	4b23      	ldr	r3, [pc, #140]	; (800099c <HAL_ADC_MspInit+0xf8>)
 800090e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000910:	4a22      	ldr	r2, [pc, #136]	; (800099c <HAL_ADC_MspInit+0xf8>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000918:	4b20      	ldr	r3, [pc, #128]	; (800099c <HAL_ADC_MspInit+0xf8>)
 800091a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000924:	230f      	movs	r3, #15
 8000926:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000928:	2303      	movs	r3, #3
 800092a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000934:	4619      	mov	r1, r3
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f002 f989 	bl	8002c50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 8000940:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <HAL_ADC_MspInit+0x100>)
 8000942:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 8000946:	2205      	movs	r2, #5
 8000948:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 800095e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000962:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 8000966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 800096e:	2220      	movs	r2, #32
 8000970:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 800097a:	f001 fef7 	bl	800276c <HAL_DMA_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000984:	f000 f8ec 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 800098c:	655a      	str	r2, [r3, #84]	; 0x54
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_ADC_MspInit+0xfc>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000994:	bf00      	nop
 8000996:	3768      	adds	r7, #104	; 0x68
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000
 80009a0:	20000128 	.word	0x20000128
 80009a4:	40020008 	.word	0x40020008

080009a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_DMA_Init+0x50>)
 80009b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <MX_DMA_Init+0x50>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6493      	str	r3, [r2, #72]	; 0x48
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_DMA_Init+0x50>)
 80009bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_DMA_Init+0x50>)
 80009c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ca:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <MX_DMA_Init+0x50>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6493      	str	r3, [r2, #72]	; 0x48
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_DMA_Init+0x50>)
 80009d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	200b      	movs	r0, #11
 80009e4:	f001 fe8d 	bl	8002702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009e8:	200b      	movs	r0, #11
 80009ea:	f001 fea4 	bl	8002736 <HAL_NVIC_EnableIRQ>

}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_GPIO_Init+0x5c>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <MX_GPIO_Init+0x5c>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_GPIO_Init+0x5c>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2170      	movs	r1, #112	; 0x70
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f002 fa90 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a34:	2370      	movs	r3, #112	; 0x70
 8000a36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f002 f900 	bl	8002c50 <HAL_GPIO_Init>

}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000

08000a5c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000a64:	1d39      	adds	r1, r7, #4
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <__io_putchar+0x20>)
 8000a6e:	f003 fc73 	bl	8004358 <HAL_UART_Transmit>

	return chr;
 8000a72:	687b      	ldr	r3, [r7, #4]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200001d8 	.word	0x200001d8

08000a80 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	Analogue_irq_callback();
 8000a88:	f7ff fdb0 	bl	80005ec <Analogue_irq_callback>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a98:	f000 faa9 	bl	8000fee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9c:	f000 f814 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa0:	f7ff ffac 	bl	80009fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000aa4:	f7ff ff80 	bl	80009a8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000aa8:	f000 f9d4 	bl	8000e54 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000aac:	f7ff fe50 	bl	8000750 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000ab0:	f000 f978 	bl	8000da4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n========== USB MIDI ==========\r\n");
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <main+0x30>)
 8000ab6:	f004 fb99 	bl	80051ec <puts>
	Analogue_init();
 8000aba:	f7ff fd83 	bl	80005c4 <Analogue_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//printf("Test2\r\n");
		Analogue_process();
 8000abe:	f7ff fda1 	bl	8000604 <Analogue_process>
 8000ac2:	e7fc      	b.n	8000abe <main+0x2a>
 8000ac4:	08006198 	.word	0x08006198

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b094      	sub	sp, #80	; 0x50
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	2238      	movs	r2, #56	; 0x38
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f004 fae4 	bl	80050a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aee:	f002 fa49 	bl	8002f84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2340      	movs	r3, #64	; 0x40
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b00:	2302      	movs	r3, #2
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b04:	2302      	movs	r3, #2
 8000b06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1c:	f107 0318 	add.w	r3, r7, #24
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 fad3 	bl	80030cc <HAL_RCC_OscConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000b2c:	f000 f818 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b30:	230f      	movs	r3, #15
 8000b32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b34:	2303      	movs	r3, #3
 8000b36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2102      	movs	r1, #2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fdd1 	bl	80036f0 <HAL_RCC_ClockConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b54:	f000 f804 	bl	8000b60 <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3750      	adds	r7, #80	; 0x50
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>

08000b6a <send_new_value>:

#include <stm32g4xx_hal.h>
#include <midi.h>
extern UART_HandleTypeDef huart1;

void send_new_value(uint8_t num_pot, uint8_t new_value) {
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	460a      	mov	r2, r1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	4613      	mov	r3, r2
 8000b78:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, &new_value, 1, HAL_MAX_DELAY);
*/

	// Envoyer en MIDI via l'USB
	// ...
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 fa3a 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <DMA1_Channel1_IRQHandler+0x10>)
 8000c2a:	f001 fec2 	bl	80029b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000128 	.word	0x20000128

08000c38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e00a      	b.n	8000c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c4a:	f3af 8000 	nop.w
 8000c4e:	4601      	mov	r1, r0
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf0      	blt.n	8000c4a <_read+0x12>
  }

  return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60f8      	str	r0, [r7, #12]
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e009      	b.n	8000c98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fee5 	bl	8000a5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dbf1      	blt.n	8000c84 <_write+0x12>
  }
  return len;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_close>:

int _close(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_isatty>:

int _isatty(int file)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d1c:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <_sbrk+0x5c>)
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <_sbrk+0x60>)
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <_sbrk+0x64>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <_sbrk+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d207      	bcs.n	8000d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d44:	f004 f984 	bl	8005050 <__errno>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20008000 	.word	0x20008000
 8000d74:	00000400 	.word	0x00000400
 8000d78:	20000188 	.word	0x20000188
 8000d7c:	20000280 	.word	0x20000280

08000d80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <SystemInit+0x20>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <SystemInit+0x20>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_TIM6_Init+0x68>)
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <MX_TIM6_Init+0x6c>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_TIM6_Init+0x68>)
 8000dbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dc0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_TIM6_Init+0x68>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 17000;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <MX_TIM6_Init+0x68>)
 8000dca:	f244 2268 	movw	r2, #17000	; 0x4268
 8000dce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_TIM6_Init+0x68>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dd6:	480d      	ldr	r0, [pc, #52]	; (8000e0c <MX_TIM6_Init+0x68>)
 8000dd8:	f003 f896 	bl	8003f08 <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000de2:	f7ff febd 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000de6:	2320      	movs	r3, #32
 8000de8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <MX_TIM6_Init+0x68>)
 8000df4:	f003 f9de 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000dfe:	f7ff feaf 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000018c 	.word	0x2000018c
 8000e10:	40001000 	.word	0x40001000

08000e14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_TIM_Base_MspInit+0x38>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d10b      	bne.n	8000e3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_TIM_Base_MspInit+0x3c>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_TIM_Base_MspInit+0x3c>)
 8000e2c:	f043 0310 	orr.w	r3, r3, #16
 8000e30:	6593      	str	r3, [r2, #88]	; 0x58
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_TIM_Base_MspInit+0x3c>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40001000 	.word	0x40001000
 8000e50:	40021000 	.word	0x40021000

08000e54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e5a:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <MX_USART1_UART_Init+0x94>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e9c:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000e9e:	f003 fa0b 	bl	80042b8 <HAL_UART_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ea8:	f7ff fe5a 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000eb0:	f004 f804 	bl	8004ebc <HAL_UARTEx_SetTxFifoThreshold>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eba:	f7ff fe51 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000ec2:	f004 f839 	bl	8004f38 <HAL_UARTEx_SetRxFifoThreshold>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ecc:	f7ff fe48 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_USART1_UART_Init+0x90>)
 8000ed2:	f003 ffba 	bl	8004e4a <HAL_UARTEx_DisableFifoMode>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000edc:	f7ff fe40 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200001d8 	.word	0x200001d8
 8000ee8:	40013800 	.word	0x40013800

08000eec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b09a      	sub	sp, #104	; 0x68
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2244      	movs	r2, #68	; 0x44
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f004 f8c9 	bl	80050a4 <memset>
  if(uartHandle->Instance==USART1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <HAL_UART_MspInit+0xa8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d137      	bne.n	8000f8c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fdfd 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f34:	f7ff fe14 	bl	8000b60 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_UART_MspInit+0xac>)
 8000f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3c:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <HAL_UART_MspInit+0xac>)
 8000f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f42:	6613      	str	r3, [r2, #96]	; 0x60
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_UART_MspInit+0xac>)
 8000f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_UART_MspInit+0xac>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_UART_MspInit+0xac>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_UART_MspInit+0xac>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f68:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f6c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f001 fe62 	bl	8002c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3768      	adds	r7, #104	; 0x68
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40013800 	.word	0x40013800
 8000f98:	40021000 	.word	0x40021000

08000f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fa0:	f7ff feee 	bl	8000d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa6:	490d      	ldr	r1, [pc, #52]	; (8000fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <LoopForever+0xe>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	; (8000fe8 <LoopForever+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f004 f847 	bl	800505c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fce:	f7ff fd61 	bl	8000a94 <main>

08000fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd2:	e7fe      	b.n	8000fd2 <LoopForever>
  ldr   r0, =_estack
 8000fd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fe0:	080062a4 	.word	0x080062a4
  ldr r2, =_sbss
 8000fe4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fe8:	20000280 	.word	0x20000280

08000fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_2_IRQHandler>

08000fee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f001 fb77 	bl	80026ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffe:	200f      	movs	r0, #15
 8001000:	f000 f80e 	bl	8001020 <HAL_InitTick>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e001      	b.n	8001014 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001010:	f7ff fdba 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001014:	79fb      	ldrb	r3, [r7, #7]

}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_InitTick+0x68>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d022      	beq.n	800107a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_InitTick+0x6c>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_InitTick+0x68>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001040:	fbb1 f3f3 	udiv	r3, r1, r3
 8001044:	fbb2 f3f3 	udiv	r3, r2, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fb82 	bl	8002752 <HAL_SYSTICK_Config>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10f      	bne.n	8001074 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	d809      	bhi.n	800106e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105a:	2200      	movs	r2, #0
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001062:	f001 fb4e 	bl	8002702 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_InitTick+0x70>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	e007      	b.n	800107e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e004      	b.n	800107e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e001      	b.n	800107e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000008 	.word	0x20000008
 800108c:	20000000 	.word	0x20000000
 8001090:	20000004 	.word	0x20000004

08001094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_IncTick+0x1c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_IncTick+0x20>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <HAL_IncTick+0x1c>)
 80010a4:	6013      	str	r3, [r2, #0]
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	2000026c 	.word	0x2000026c
 80010b4:	20000008 	.word	0x20000008

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2000026c 	.word	0x2000026c

080010d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	609a      	str	r2, [r3, #8]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3360      	adds	r3, #96	; 0x60
 800114a:	461a      	mov	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <LL_ADC_SetOffset+0x44>)
 800115a:	4013      	ands	r3, r2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	4313      	orrs	r3, r2
 8001168:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001170:	bf00      	nop
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	03fff000 	.word	0x03fff000

08001180 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3360      	adds	r3, #96	; 0x60
 800118e:	461a      	mov	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3360      	adds	r3, #96	; 0x60
 80011bc:	461a      	mov	r2, r3
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011d6:	bf00      	nop
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b087      	sub	sp, #28
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3360      	adds	r3, #96	; 0x60
 80011f2:	461a      	mov	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	431a      	orrs	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3360      	adds	r3, #96	; 0x60
 8001228:	461a      	mov	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	431a      	orrs	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001242:	bf00      	nop
 8001244:	371c      	adds	r7, #28
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	615a      	str	r2, [r3, #20]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800129a:	b480      	push	{r7}
 800129c:	b087      	sub	sp, #28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3330      	adds	r3, #48	; 0x30
 80012aa:	461a      	mov	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	4413      	add	r3, r2
 80012b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	211f      	movs	r1, #31
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	401a      	ands	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	0e9b      	lsrs	r3, r3, #26
 80012d2:	f003 011f 	and.w	r1, r3, #31
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b087      	sub	sp, #28
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3314      	adds	r3, #20
 8001302:	461a      	mov	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	0e5b      	lsrs	r3, r3, #25
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	4413      	add	r3, r2
 8001310:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	0d1b      	lsrs	r3, r3, #20
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	2107      	movs	r1, #7
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	401a      	ands	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	0d1b      	lsrs	r3, r3, #20
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	431a      	orrs	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800133c:	bf00      	nop
 800133e:	371c      	adds	r7, #28
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001360:	43db      	mvns	r3, r3
 8001362:	401a      	ands	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0318 	and.w	r3, r3, #24
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <LL_ADC_SetChannelSingleDiff+0x44>)
 800136c:	40d9      	lsrs	r1, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	400b      	ands	r3, r1
 8001372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001376:	431a      	orrs	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	0007ffff 	.word	0x0007ffff

08001390 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 031f 	and.w	r3, r3, #31
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6093      	str	r3, [r2, #8]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013e4:	d101      	bne.n	80013ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800140c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001434:	d101      	bne.n	800143a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800145c:	f043 0201 	orr.w	r2, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <LL_ADC_IsEnabled+0x18>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <LL_ADC_IsEnabled+0x1a>
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014aa:	f043 0204 	orr.w	r2, r3, #4
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d101      	bne.n	80014d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d101      	bne.n	80014fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e167      	b.n	80017f6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	2b00      	cmp	r3, #0
 8001532:	d109      	bne.n	8001548 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff f9b5 	bl	80008a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff3f 	bl	80013d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff25 	bl	80013ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff5a 	bl	8001420 <LL_ADC_IsInternalRegulatorEnabled>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d115      	bne.n	800159e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff3e 	bl	80013f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800157c:	4ba0      	ldr	r3, [pc, #640]	; (8001800 <HAL_ADC_Init+0x2f4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	4aa0      	ldr	r2, [pc, #640]	; (8001804 <HAL_ADC_Init+0x2f8>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	3301      	adds	r3, #1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001590:	e002      	b.n	8001598 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3b01      	subs	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f9      	bne.n	8001592 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff3c 	bl	8001420 <LL_ADC_IsInternalRegulatorEnabled>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10d      	bne.n	80015ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	f043 0210 	orr.w	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff75 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 80015d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f040 8100 	bne.w	80017e4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 80fc 	bne.w	80017e4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015f4:	f043 0202 	orr.w	r2, r3, #2
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff35 	bl	8001470 <LL_ADC_IsEnabled>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d111      	bne.n	8001630 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800160c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001610:	f7ff ff2e 	bl	8001470 <LL_ADC_IsEnabled>
 8001614:	4604      	mov	r4, r0
 8001616:	487c      	ldr	r0, [pc, #496]	; (8001808 <HAL_ADC_Init+0x2fc>)
 8001618:	f7ff ff2a 	bl	8001470 <LL_ADC_IsEnabled>
 800161c:	4603      	mov	r3, r0
 800161e:	4323      	orrs	r3, r4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4619      	mov	r1, r3
 800162a:	4878      	ldr	r0, [pc, #480]	; (800180c <HAL_ADC_Init+0x300>)
 800162c:	f7ff fd50 	bl	80010d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7f5b      	ldrb	r3, [r3, #29]
 8001634:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800163a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001640:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001646:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800164e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165a:	2b01      	cmp	r3, #1
 800165c:	d106      	bne.n	800166c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	3b01      	subs	r3, #1
 8001664:	045b      	lsls	r3, r3, #17
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	4b60      	ldr	r3, [pc, #384]	; (8001810 <HAL_ADC_Init+0x304>)
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	430b      	orrs	r3, r1
 800169a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff14 	bl	80014e4 <LL_ADC_INJ_IsConversionOngoing>
 80016bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d16d      	bne.n	80017a0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d16a      	bne.n	80017a0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016e6:	f023 0302 	bic.w	r3, r3, #2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	69b9      	ldr	r1, [r7, #24]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d017      	beq.n	800172c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800170a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001714:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001718:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6911      	ldr	r1, [r2, #16]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	430b      	orrs	r3, r1
 8001726:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800172a:	e013      	b.n	8001754 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800173a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800174c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001750:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800175a:	2b01      	cmp	r3, #1
 800175c:	d118      	bne.n	8001790 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001774:	4311      	orrs	r1, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800177a:	4311      	orrs	r1, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001780:	430a      	orrs	r2, r1
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	e007      	b.n	80017a0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d10c      	bne.n	80017c2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f023 010f 	bic.w	r1, r3, #15
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	1e5a      	subs	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
 80017c0:	e007      	b.n	80017d2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 020f 	bic.w	r2, r2, #15
 80017d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	f023 0303 	bic.w	r3, r3, #3
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80017e2:	e007      	b.n	80017f4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e8:	f043 0210 	orr.w	r2, r3, #16
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000
 8001804:	053e2d63 	.word	0x053e2d63
 8001808:	50000100 	.word	0x50000100
 800180c:	50000300 	.word	0x50000300
 8001810:	fff04007 	.word	0xfff04007

08001814 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001820:	4851      	ldr	r0, [pc, #324]	; (8001968 <HAL_ADC_Start_DMA+0x154>)
 8001822:	f7ff fdb5 	bl	8001390 <LL_ADC_GetMultimode>
 8001826:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fe46 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	f040 808f 	bne.w	8001958 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_ADC_Start_DMA+0x34>
 8001844:	2302      	movs	r3, #2
 8001846:	e08a      	b.n	800195e <HAL_ADC_Start_DMA+0x14a>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b05      	cmp	r3, #5
 800185a:	d002      	beq.n	8001862 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2b09      	cmp	r3, #9
 8001860:	d173      	bne.n	800194a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 fc8e 	bl	8002184 <ADC_Enable>
 8001868:	4603      	mov	r3, r0
 800186a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d166      	bne.n	8001940 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001876:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a38      	ldr	r2, [pc, #224]	; (800196c <HAL_ADC_Start_DMA+0x158>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d002      	beq.n	8001896 <HAL_ADC_Start_DMA+0x82>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	e001      	b.n	800189a <HAL_ADC_Start_DMA+0x86>
 8001896:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4293      	cmp	r3, r2
 80018a0:	d002      	beq.n	80018a8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c4:	f023 0206 	bic.w	r2, r3, #6
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	661a      	str	r2, [r3, #96]	; 0x60
 80018cc:	e002      	b.n	80018d4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d8:	4a25      	ldr	r2, [pc, #148]	; (8001970 <HAL_ADC_Start_DMA+0x15c>)
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	4a24      	ldr	r2, [pc, #144]	; (8001974 <HAL_ADC_Start_DMA+0x160>)
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	4a23      	ldr	r2, [pc, #140]	; (8001978 <HAL_ADC_Start_DMA+0x164>)
 80018ea:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	221c      	movs	r2, #28
 80018f2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0210 	orr.w	r2, r2, #16
 800190a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3340      	adds	r3, #64	; 0x40
 8001926:	4619      	mov	r1, r3
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f000 ffc6 	bl	80028bc <HAL_DMA_Start_IT>
 8001930:	4603      	mov	r3, r0
 8001932:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fdac 	bl	8001496 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800193e:	e00d      	b.n	800195c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001948:	e008      	b.n	800195c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001956:	e001      	b.n	800195c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001958:	2302      	movs	r3, #2
 800195a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800195c:	7dfb      	ldrb	r3, [r7, #23]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	50000300 	.word	0x50000300
 800196c:	50000100 	.word	0x50000100
 8001970:	08002291 	.word	0x08002291
 8001974:	08002369 	.word	0x08002369
 8001978:	08002385 	.word	0x08002385

0800197c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0b6      	sub	sp, #216	; 0xd8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x22>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e3c8      	b.n	8002158 <HAL_ADC_ConfigChannel+0x7b4>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fd73 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 83ad 	bne.w	800213a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	f7ff fc54 	bl	800129a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fd61 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 80019fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fd6d 	bl	80014e4 <LL_ADC_INJ_IsConversionOngoing>
 8001a0a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 81d9 	bne.w	8001dca <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f040 81d4 	bne.w	8001dca <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a2a:	d10f      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2200      	movs	r2, #0
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7ff fc5b 	bl	80012f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fc02 	bl	800124e <LL_ADC_SetSamplingTimeCommonConfig>
 8001a4a:	e00e      	b.n	8001a6a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	6819      	ldr	r1, [r3, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f7ff fc4a 	bl	80012f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fbf2 	bl	800124e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	08db      	lsrs	r3, r3, #3
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d022      	beq.n	8001ad2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6919      	ldr	r1, [r3, #16]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a9c:	f7ff fb4c 	bl	8001138 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6919      	ldr	r1, [r3, #16]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	461a      	mov	r2, r3
 8001aae:	f7ff fb98 	bl	80011e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d102      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x124>
 8001ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac6:	e000      	b.n	8001aca <HAL_ADC_ConfigChannel+0x126>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	461a      	mov	r2, r3
 8001acc:	f7ff fba4 	bl	8001218 <LL_ADC_SetOffsetSaturation>
 8001ad0:	e17b      	b.n	8001dca <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fb51 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10a      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x15a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fb46 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	0e9b      	lsrs	r3, r3, #26
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	e01e      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x198>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fb3b 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	e004      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001b30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x1b0>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	e018      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1e2>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	e004      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001b7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d106      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fb0a 	bl	80011ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff faee 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x220>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fae3 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	0e9b      	lsrs	r3, r3, #26
 8001bbe:	f003 021f 	and.w	r2, r3, #31
 8001bc2:	e01e      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x25e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fad8 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001be6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001bea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	e004      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x276>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0e9b      	lsrs	r3, r3, #26
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	e018      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x2a8>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e004      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001c42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d106      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	2101      	movs	r1, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff faa7 	bl	80011ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2102      	movs	r1, #2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fa8b 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10a      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x2e6>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fa80 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	e01e      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x324>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2102      	movs	r1, #2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fa75 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e004      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001cbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x33c>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	e016      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x36a>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001cf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001d00:	2320      	movs	r3, #32
 8001d02:	e004      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d106      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fa46 	bl	80011ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2103      	movs	r1, #3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fa2a 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10a      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x3a8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2103      	movs	r1, #3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fa1f 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	0e9b      	lsrs	r3, r3, #26
 8001d46:	f003 021f 	and.w	r2, r3, #31
 8001d4a:	e017      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x3d8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2103      	movs	r1, #3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fa14 	bl	8001180 <LL_ADC_GetOffsetChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d66:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e003      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x3f0>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	e011      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x414>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001da2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001da4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e003      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d106      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f9f1 	bl	80011ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fb4e 	bl	8001470 <LL_ADC_IsEnabled>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 8140 	bne.w	800205c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	461a      	mov	r2, r3
 8001dea:	f7ff faad 	bl	8001348 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4a8f      	ldr	r2, [pc, #572]	; (8002030 <HAL_ADC_ConfigChannel+0x68c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	f040 8131 	bne.w	800205c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10b      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x47e>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	3301      	adds	r3, #1
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	2b09      	cmp	r3, #9
 8001e18:	bf94      	ite	ls
 8001e1a:	2301      	movls	r3, #1
 8001e1c:	2300      	movhi	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	e019      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x4b2>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e32:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	e003      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	2b09      	cmp	r3, #9
 8001e4e:	bf94      	ite	ls
 8001e50:	2301      	movls	r3, #1
 8001e52:	2300      	movhi	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d079      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d107      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x4d2>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	069b      	lsls	r3, r3, #26
 8001e70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e74:	e015      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x4fe>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e86:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	e003      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	069b      	lsls	r3, r3, #26
 8001e9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x51e>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	0e9b      	lsrs	r3, r3, #26
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	e017      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x54e>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001eda:	2320      	movs	r3, #32
 8001edc:	e003      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	ea42 0103 	orr.w	r1, r2, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10a      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x574>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 021f 	and.w	r2, r3, #31
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	051b      	lsls	r3, r3, #20
 8001f16:	e018      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x5a6>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e003      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f003 021f 	and.w	r2, r3, #31
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	e081      	b.n	8002052 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d107      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x5c6>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	3301      	adds	r3, #1
 8001f62:	069b      	lsls	r3, r3, #26
 8001f64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f68:	e015      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x5f2>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001f82:	2320      	movs	r3, #32
 8001f84:	e003      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	069b      	lsls	r3, r3, #26
 8001f92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x612>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	2101      	movs	r1, #1
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	e017      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x642>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	61fb      	str	r3, [r7, #28]
  return result;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	e003      	b.n	8001fda <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	ea42 0103 	orr.w	r1, r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x66e>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0e9b      	lsrs	r3, r3, #26
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f003 021f 	and.w	r2, r3, #31
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	3b1e      	subs	r3, #30
 800200a:	051b      	lsls	r3, r3, #20
 800200c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002010:	e01e      	b.n	8002050 <HAL_ADC_ConfigChannel+0x6ac>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	613b      	str	r3, [r7, #16]
  return result;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d104      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e006      	b.n	800203c <HAL_ADC_ConfigChannel+0x698>
 800202e:	bf00      	nop
 8002030:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f003 021f 	and.w	r2, r3, #31
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	3b1e      	subs	r3, #30
 800204a:	051b      	lsls	r3, r3, #20
 800204c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002050:	430b      	orrs	r3, r1
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	6892      	ldr	r2, [r2, #8]
 8002056:	4619      	mov	r1, r3
 8002058:	f7ff f94b 	bl	80012f2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <HAL_ADC_ConfigChannel+0x7bc>)
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d071      	beq.n	800214c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002068:	483e      	ldr	r0, [pc, #248]	; (8002164 <HAL_ADC_ConfigChannel+0x7c0>)
 800206a:	f7ff f857 	bl	800111c <LL_ADC_GetCommonPathInternalCh>
 800206e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a3c      	ldr	r2, [pc, #240]	; (8002168 <HAL_ADC_ConfigChannel+0x7c4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d004      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x6e2>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a3a      	ldr	r2, [pc, #232]	; (800216c <HAL_ADC_ConfigChannel+0x7c8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d127      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002086:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800208a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d121      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800209a:	d157      	bne.n	800214c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800209c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020a4:	4619      	mov	r1, r3
 80020a6:	482f      	ldr	r0, [pc, #188]	; (8002164 <HAL_ADC_ConfigChannel+0x7c0>)
 80020a8:	f7ff f825 	bl	80010f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020ac:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_ADC_ConfigChannel+0x7cc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	099b      	lsrs	r3, r3, #6
 80020b2:	4a30      	ldr	r2, [pc, #192]	; (8002174 <HAL_ADC_ConfigChannel+0x7d0>)
 80020b4:	fba2 2303 	umull	r2, r3, r2, r3
 80020b8:	099b      	lsrs	r3, r3, #6
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020c6:	e002      	b.n	80020ce <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f9      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020d4:	e03a      	b.n	800214c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a27      	ldr	r2, [pc, #156]	; (8002178 <HAL_ADC_ConfigChannel+0x7d4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d113      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10d      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a22      	ldr	r2, [pc, #136]	; (800217c <HAL_ADC_ConfigChannel+0x7d8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02a      	beq.n	800214c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fe:	4619      	mov	r1, r3
 8002100:	4818      	ldr	r0, [pc, #96]	; (8002164 <HAL_ADC_ConfigChannel+0x7c0>)
 8002102:	f7fe fff8 	bl	80010f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002106:	e021      	b.n	800214c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_ADC_ConfigChannel+0x7dc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d11c      	bne.n	800214c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d116      	bne.n	800214c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a16      	ldr	r2, [pc, #88]	; (800217c <HAL_ADC_ConfigChannel+0x7d8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d011      	beq.n	800214c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800212c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002130:	4619      	mov	r1, r3
 8002132:	480c      	ldr	r0, [pc, #48]	; (8002164 <HAL_ADC_ConfigChannel+0x7c0>)
 8002134:	f7fe ffdf 	bl	80010f6 <LL_ADC_SetCommonPathInternalCh>
 8002138:	e008      	b.n	800214c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	f043 0220 	orr.w	r2, r3, #32
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002154:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002158:	4618      	mov	r0, r3
 800215a:	37d8      	adds	r7, #216	; 0xd8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	80080000 	.word	0x80080000
 8002164:	50000300 	.word	0x50000300
 8002168:	c3210000 	.word	0xc3210000
 800216c:	90c00010 	.word	0x90c00010
 8002170:	20000000 	.word	0x20000000
 8002174:	053e2d63 	.word	0x053e2d63
 8002178:	c7520000 	.word	0xc7520000
 800217c:	50000100 	.word	0x50000100
 8002180:	cb840000 	.word	0xcb840000

08002184 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff f96b 	bl	8001470 <LL_ADC_IsEnabled>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d169      	bne.n	8002274 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	4b36      	ldr	r3, [pc, #216]	; (8002280 <ADC_Enable+0xfc>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	f043 0210 	orr.w	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021be:	f043 0201 	orr.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e055      	b.n	8002276 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f93a 	bl	8001448 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021d4:	482b      	ldr	r0, [pc, #172]	; (8002284 <ADC_Enable+0x100>)
 80021d6:	f7fe ffa1 	bl	800111c <LL_ADC_GetCommonPathInternalCh>
 80021da:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021e4:	4b28      	ldr	r3, [pc, #160]	; (8002288 <ADC_Enable+0x104>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	4a28      	ldr	r2, [pc, #160]	; (800228c <ADC_Enable+0x108>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021fe:	e002      	b.n	8002206 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	3b01      	subs	r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800220c:	f7fe ff54 	bl	80010b8 <HAL_GetTick>
 8002210:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002212:	e028      	b.n	8002266 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f929 	bl	8001470 <LL_ADC_IsEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d104      	bne.n	800222e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f90d 	bl	8001448 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800222e:	f7fe ff43 	bl	80010b8 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d914      	bls.n	8002266 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d00d      	beq.n	8002266 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	f043 0210 	orr.w	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e007      	b.n	8002276 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d1cf      	bne.n	8002214 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	8000003f 	.word	0x8000003f
 8002284:	50000300 	.word	0x50000300
 8002288:	20000000 	.word	0x20000000
 800228c:	053e2d63 	.word	0x053e2d63

08002290 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d14b      	bne.n	8002342 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d021      	beq.n	8002308 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe ffd3 	bl	8001274 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d032      	beq.n	800233a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d12b      	bne.n	800233a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d11f      	bne.n	800233a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	65da      	str	r2, [r3, #92]	; 0x5c
 8002306:	e018      	b.n	800233a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d111      	bne.n	800233a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f7fe fba0 	bl	8000a80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002340:	e00e      	b.n	8002360 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff fb1e 	bl	8001990 <HAL_ADC_ErrorCallback>
}
 8002354:	e004      	b.n	8002360 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7ff fb00 	bl	800197c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a2:	f043 0204 	orr.w	r2, r3, #4
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f7ff faf0 	bl	8001990 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <LL_ADC_IsEnabled>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <LL_ADC_IsEnabled+0x18>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <LL_ADC_IsEnabled+0x1a>
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_ADC_REG_IsConversionOngoing>:
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d101      	bne.n	80023f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b0a1      	sub	sp, #132	; 0x84
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800241e:	2302      	movs	r3, #2
 8002420:	e08b      	b.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800242a:	2300      	movs	r3, #0
 800242c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800242e:	2300      	movs	r3, #0
 8002430:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800243a:	d102      	bne.n	8002442 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800243c:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	e001      	b.n	8002446 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e06a      	b.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ffb9 	bl	80023de <LL_ADC_REG_IsConversionOngoing>
 800246c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ffb3 	bl	80023de <LL_ADC_REG_IsConversionOngoing>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d14c      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800247e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002480:	2b00      	cmp	r3, #0
 8002482:	d149      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002486:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d028      	beq.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024a2:	035b      	lsls	r3, r3, #13
 80024a4:	430b      	orrs	r3, r1
 80024a6:	431a      	orrs	r2, r3
 80024a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024b0:	f7ff ff82 	bl	80023b8 <LL_ADC_IsEnabled>
 80024b4:	4604      	mov	r4, r0
 80024b6:	4823      	ldr	r0, [pc, #140]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024b8:	f7ff ff7e 	bl	80023b8 <LL_ADC_IsEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	4323      	orrs	r3, r4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d133      	bne.n	800252c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024cc:	f023 030f 	bic.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	6811      	ldr	r1, [r2, #0]
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	6892      	ldr	r2, [r2, #8]
 80024d8:	430a      	orrs	r2, r1
 80024da:	431a      	orrs	r2, r3
 80024dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024de:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024e0:	e024      	b.n	800252c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024f2:	f7ff ff61 	bl	80023b8 <LL_ADC_IsEnabled>
 80024f6:	4604      	mov	r4, r0
 80024f8:	4812      	ldr	r0, [pc, #72]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024fa:	f7ff ff5d 	bl	80023b8 <LL_ADC_IsEnabled>
 80024fe:	4603      	mov	r3, r0
 8002500:	4323      	orrs	r3, r4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d112      	bne.n	800252c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800250e:	f023 030f 	bic.w	r3, r3, #15
 8002512:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002514:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002516:	e009      	b.n	800252c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800252a:	e000      	b.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800252c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002536:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800253a:	4618      	mov	r0, r3
 800253c:	3784      	adds	r7, #132	; 0x84
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}
 8002542:	bf00      	nop
 8002544:	50000100 	.word	0x50000100
 8002548:	50000300 	.word	0x50000300

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <__NVIC_SetPriority+0x50>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d301      	bcc.n	80026be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00f      	b.n	80026de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <SysTick_Config+0x40>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c6:	210f      	movs	r1, #15
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026cc:	f7ff ff8e 	bl	80025ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <SysTick_Config+0x40>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <SysTick_Config+0x40>)
 80026d8:	2207      	movs	r2, #7
 80026da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ff29 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff ff40 	bl	8002594 <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff90 	bl	8002640 <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff5f 	bl	80025ec <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff33 	bl	80025b0 <__NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffa4 	bl	80026a8 <SysTick_Config>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e08d      	b.n	800289a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <HAL_DMA_Init+0x138>)
 8002786:	429a      	cmp	r2, r3
 8002788:	d80f      	bhi.n	80027aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	4b45      	ldr	r3, [pc, #276]	; (80028a8 <HAL_DMA_Init+0x13c>)
 8002792:	4413      	add	r3, r2
 8002794:	4a45      	ldr	r2, [pc, #276]	; (80028ac <HAL_DMA_Init+0x140>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	009a      	lsls	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a42      	ldr	r2, [pc, #264]	; (80028b0 <HAL_DMA_Init+0x144>)
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40
 80027a8:	e00e      	b.n	80027c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <HAL_DMA_Init+0x148>)
 80027b2:	4413      	add	r3, r2
 80027b4:	4a3d      	ldr	r2, [pc, #244]	; (80028ac <HAL_DMA_Init+0x140>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	009a      	lsls	r2, r3, #2
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a3c      	ldr	r2, [pc, #240]	; (80028b8 <HAL_DMA_Init+0x14c>)
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f9b6 	bl	8002b8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002828:	d102      	bne.n	8002830 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002844:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <HAL_DMA_Init+0x104>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d80c      	bhi.n	8002870 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f9d6 	bl	8002c08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	e008      	b.n	8002882 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40020407 	.word	0x40020407
 80028a8:	bffdfff8 	.word	0xbffdfff8
 80028ac:	cccccccd 	.word	0xcccccccd
 80028b0:	40020000 	.word	0x40020000
 80028b4:	bffdfbf8 	.word	0xbffdfbf8
 80028b8:	40020400 	.word	0x40020400

080028bc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_DMA_Start_IT+0x20>
 80028d8:	2302      	movs	r3, #2
 80028da:	e066      	b.n	80029aa <HAL_DMA_Start_IT+0xee>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d155      	bne.n	800299c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f8fb 	bl	8002b10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 020e 	orr.w	r2, r2, #14
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e00f      	b.n	8002954 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0204 	bic.w	r2, r2, #4
 8002942:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 020a 	orr.w	r2, r2, #10
 8002952:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002970:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002988:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0201 	orr.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e005      	b.n	80029a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
 80029a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	2204      	movs	r2, #4
 80029d4:	409a      	lsls	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d026      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x7a>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d021      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0204 	bic.w	r2, r2, #4
 8002a04:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f003 021f 	and.w	r2, r3, #31
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2104      	movs	r1, #4
 8002a14:	fa01 f202 	lsl.w	r2, r1, r2
 8002a18:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d071      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a2a:	e06c      	b.n	8002b06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	2202      	movs	r2, #2
 8002a36:	409a      	lsls	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d02e      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d029      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 020a 	bic.w	r2, r2, #10
 8002a66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d038      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a9c:	e033      	b.n	8002b06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d02a      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d025      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 020e 	bic.w	r2, r2, #14
 8002aca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f202 	lsl.w	r2, r1, r2
 8002ade:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
}
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f003 021f 	and.w	r2, r3, #31
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d108      	bne.n	8002b70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b6e:	e007      	b.n	8002b80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	60da      	str	r2, [r3, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d802      	bhi.n	8002ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e001      	b.n	8002baa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ba8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	3b08      	subs	r3, #8
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	009a      	lsls	r2, r3, #2
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002bd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	2201      	movs	r2, #1
 8002be0:	409a      	lsls	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40020407 	.word	0x40020407
 8002bf8:	40020800 	.word	0x40020800
 8002bfc:	40020820 	.word	0x40020820
 8002c00:	cccccccd 	.word	0xcccccccd
 8002c04:	40020880 	.word	0x40020880

08002c08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	461a      	mov	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2201      	movs	r2, #1
 8002c36:	409a      	lsls	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	1000823f 	.word	0x1000823f
 8002c4c:	40020940 	.word	0x40020940

08002c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c5e:	e15a      	b.n	8002f16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 814c 	beq.w	8002f10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d005      	beq.n	8002c90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d130      	bne.n	8002cf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	f003 0201 	and.w	r2, r3, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d017      	beq.n	8002d2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d123      	bne.n	8002d82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3208      	adds	r2, #8
 8002d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	08da      	lsrs	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	6939      	ldr	r1, [r7, #16]
 8002d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0203 	and.w	r2, r3, #3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80a6 	beq.w	8002f10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc4:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_GPIO_Init+0x2e4>)
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc8:	4a5a      	ldr	r2, [pc, #360]	; (8002f34 <HAL_GPIO_Init+0x2e4>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6613      	str	r3, [r2, #96]	; 0x60
 8002dd0:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_GPIO_Init+0x2e4>)
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ddc:	4a56      	ldr	r2, [pc, #344]	; (8002f38 <HAL_GPIO_Init+0x2e8>)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	3302      	adds	r3, #2
 8002de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	220f      	movs	r2, #15
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e06:	d01f      	beq.n	8002e48 <HAL_GPIO_Init+0x1f8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a4c      	ldr	r2, [pc, #304]	; (8002f3c <HAL_GPIO_Init+0x2ec>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d019      	beq.n	8002e44 <HAL_GPIO_Init+0x1f4>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a4b      	ldr	r2, [pc, #300]	; (8002f40 <HAL_GPIO_Init+0x2f0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <HAL_GPIO_Init+0x1f0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a4a      	ldr	r2, [pc, #296]	; (8002f44 <HAL_GPIO_Init+0x2f4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00d      	beq.n	8002e3c <HAL_GPIO_Init+0x1ec>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a49      	ldr	r2, [pc, #292]	; (8002f48 <HAL_GPIO_Init+0x2f8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <HAL_GPIO_Init+0x1e8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a48      	ldr	r2, [pc, #288]	; (8002f4c <HAL_GPIO_Init+0x2fc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_GPIO_Init+0x1e4>
 8002e30:	2305      	movs	r3, #5
 8002e32:	e00a      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e34:	2306      	movs	r3, #6
 8002e36:	e008      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e006      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e004      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e002      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	f002 0203 	and.w	r2, r2, #3
 8002e50:	0092      	lsls	r2, r2, #2
 8002e52:	4093      	lsls	r3, r2
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e5a:	4937      	ldr	r1, [pc, #220]	; (8002f38 <HAL_GPIO_Init+0x2e8>)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e68:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e8c:	4a30      	ldr	r2, [pc, #192]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e92:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eb6:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ebc:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ee0:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f0a:	4a11      	ldr	r2, [pc, #68]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3301      	adds	r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f47f ae9d 	bne.w	8002c60 <HAL_GPIO_Init+0x10>
  }
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	48000400 	.word	0x48000400
 8002f40:	48000800 	.word	0x48000800
 8002f44:	48000c00 	.word	0x48000c00
 8002f48:	48001000 	.word	0x48001000
 8002f4c:	48001400 	.word	0x48001400
 8002f50:	40010400 	.word	0x40010400

08002f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
 8002f60:	4613      	mov	r3, r2
 8002f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f64:	787b      	ldrb	r3, [r7, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f70:	e002      	b.n	8002f78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d141      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f92:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9e:	d131      	bne.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fa0:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa6:	4a46      	ldr	r2, [pc, #280]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb0:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fb8:	4a41      	ldr	r2, [pc, #260]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fc0:	4b40      	ldr	r3, [pc, #256]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2232      	movs	r2, #50	; 0x32
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	4a3f      	ldr	r2, [pc, #252]	; (80030c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	0c9b      	lsrs	r3, r3, #18
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd6:	e002      	b.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fde:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fea:	d102      	bne.n	8002ff2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f2      	bne.n	8002fd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ff2:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffe:	d158      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e057      	b.n	80030b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003004:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300a:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003010:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003014:	e04d      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301c:	d141      	bne.n	80030a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302a:	d131      	bne.n	8003090 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800302c:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003032:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800303c:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003044:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2232      	movs	r2, #50	; 0x32
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	0c9b      	lsrs	r3, r3, #18
 800305e:	3301      	adds	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003062:	e002      	b.n	800306a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3b01      	subs	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800306a:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	d102      	bne.n	800307e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f2      	bne.n	8003064 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308a:	d112      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e011      	b.n	80030b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003096:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030a0:	e007      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030aa:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40007000 	.word	0x40007000
 80030c4:	20000000 	.word	0x20000000
 80030c8:	431bde83 	.word	0x431bde83

080030cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e2fe      	b.n	80036dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d075      	beq.n	80031d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ea:	4b97      	ldr	r3, [pc, #604]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f4:	4b94      	ldr	r3, [pc, #592]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b0c      	cmp	r3, #12
 8003102:	d102      	bne.n	800310a <HAL_RCC_OscConfig+0x3e>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d002      	beq.n	8003110 <HAL_RCC_OscConfig+0x44>
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d10b      	bne.n	8003128 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	4b8d      	ldr	r3, [pc, #564]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d05b      	beq.n	80031d4 <HAL_RCC_OscConfig+0x108>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d157      	bne.n	80031d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e2d9      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003130:	d106      	bne.n	8003140 <HAL_RCC_OscConfig+0x74>
 8003132:	4b85      	ldr	r3, [pc, #532]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a84      	ldr	r2, [pc, #528]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e01d      	b.n	800317c <HAL_RCC_OscConfig+0xb0>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x98>
 800314a:	4b7f      	ldr	r3, [pc, #508]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a7e      	ldr	r2, [pc, #504]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b7c      	ldr	r3, [pc, #496]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7b      	ldr	r2, [pc, #492]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0xb0>
 8003164:	4b78      	ldr	r3, [pc, #480]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a77      	ldr	r2, [pc, #476]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b75      	ldr	r3, [pc, #468]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a74      	ldr	r2, [pc, #464]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fd ff98 	bl	80010b8 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fd ff94 	bl	80010b8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e29e      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800319e:	4b6a      	ldr	r3, [pc, #424]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0xc0>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fd ff84 	bl	80010b8 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fd ff80 	bl	80010b8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e28a      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031c6:	4b60      	ldr	r3, [pc, #384]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0xe8>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d075      	beq.n	80032ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e2:	4b59      	ldr	r3, [pc, #356]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ec:	4b56      	ldr	r3, [pc, #344]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d102      	bne.n	8003202 <HAL_RCC_OscConfig+0x136>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d002      	beq.n	8003208 <HAL_RCC_OscConfig+0x13c>
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d11f      	bne.n	8003248 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003208:	4b4f      	ldr	r3, [pc, #316]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_OscConfig+0x154>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e25d      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003220:	4b49      	ldr	r3, [pc, #292]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	061b      	lsls	r3, r3, #24
 800322e:	4946      	ldr	r1, [pc, #280]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003234:	4b45      	ldr	r3, [pc, #276]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd fef1 	bl	8001020 <HAL_InitTick>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d043      	beq.n	80032cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e249      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d023      	beq.n	8003298 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003250:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a3c      	ldr	r2, [pc, #240]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fd ff2c 	bl	80010b8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003264:	f7fd ff28 	bl	80010b8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e232      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003276:	4b34      	ldr	r3, [pc, #208]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	061b      	lsls	r3, r3, #24
 8003290:	492d      	ldr	r1, [pc, #180]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]
 8003296:	e01a      	b.n	80032ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003298:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2a      	ldr	r2, [pc, #168]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 800329e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fd ff08 	bl	80010b8 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ac:	f7fd ff04 	bl	80010b8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e20e      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x1e0>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d041      	beq.n	800335e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01c      	beq.n	800331c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e2:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e8:	4a17      	ldr	r2, [pc, #92]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7fd fee1 	bl	80010b8 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fa:	f7fd fedd 	bl	80010b8 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e1e7      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 800330e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0ef      	beq.n	80032fa <HAL_RCC_OscConfig+0x22e>
 800331a:	e020      	b.n	800335e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 800331e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003322:	4a09      	ldr	r2, [pc, #36]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fd fec4 	bl	80010b8 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003332:	e00d      	b.n	8003350 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7fd fec0 	bl	80010b8 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d906      	bls.n	8003350 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e1ca      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003350:	4b8c      	ldr	r3, [pc, #560]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1ea      	bne.n	8003334 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80a6 	beq.w	80034b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336c:	2300      	movs	r3, #0
 800336e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003370:	4b84      	ldr	r3, [pc, #528]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_OscConfig+0x2b4>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x2b6>
 8003380:	2300      	movs	r3, #0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	4b7f      	ldr	r3, [pc, #508]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	4a7e      	ldr	r2, [pc, #504]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 800338c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003390:	6593      	str	r3, [r2, #88]	; 0x58
 8003392:	4b7c      	ldr	r3, [pc, #496]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800339e:	2301      	movs	r3, #1
 80033a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a2:	4b79      	ldr	r3, [pc, #484]	; (8003588 <HAL_RCC_OscConfig+0x4bc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d118      	bne.n	80033e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x4bc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x4bc>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ba:	f7fd fe7d 	bl	80010b8 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c2:	f7fd fe79 	bl	80010b8 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e183      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d4:	4b6c      	ldr	r3, [pc, #432]	; (8003588 <HAL_RCC_OscConfig+0x4bc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d108      	bne.n	80033fa <HAL_RCC_OscConfig+0x32e>
 80033e8:	4b66      	ldr	r3, [pc, #408]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	4a65      	ldr	r2, [pc, #404]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f8:	e024      	b.n	8003444 <HAL_RCC_OscConfig+0x378>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d110      	bne.n	8003424 <HAL_RCC_OscConfig+0x358>
 8003402:	4b60      	ldr	r3, [pc, #384]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	4a5e      	ldr	r2, [pc, #376]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 800340a:	f043 0304 	orr.w	r3, r3, #4
 800340e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003412:	4b5c      	ldr	r3, [pc, #368]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	4a5a      	ldr	r2, [pc, #360]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003422:	e00f      	b.n	8003444 <HAL_RCC_OscConfig+0x378>
 8003424:	4b57      	ldr	r3, [pc, #348]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	4a56      	ldr	r2, [pc, #344]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003434:	4b53      	ldr	r3, [pc, #332]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	4a52      	ldr	r2, [pc, #328]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d016      	beq.n	800347a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fd fe34 	bl	80010b8 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fd fe30 	bl	80010b8 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e138      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346a:	4b46      	ldr	r3, [pc, #280]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ed      	beq.n	8003454 <HAL_RCC_OscConfig+0x388>
 8003478:	e015      	b.n	80034a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fd fe1d 	bl	80010b8 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fd fe19 	bl	80010b8 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e121      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003498:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1ed      	bne.n	8003482 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034a6:	7ffb      	ldrb	r3, [r7, #31]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ac:	4b35      	ldr	r3, [pc, #212]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	4a34      	ldr	r2, [pc, #208]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 80034b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d03c      	beq.n	800353e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01c      	beq.n	8003506 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 80034ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d2:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fd fdec 	bl	80010b8 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034e4:	f7fd fde8 	bl	80010b8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e0f2      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034f6:	4b23      	ldr	r3, [pc, #140]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 80034f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ef      	beq.n	80034e4 <HAL_RCC_OscConfig+0x418>
 8003504:	e01b      	b.n	800353e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003506:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003516:	f7fd fdcf 	bl	80010b8 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800351e:	f7fd fdcb 	bl	80010b8 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0d5      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ef      	bne.n	800351e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80c9 	beq.w	80036da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b0c      	cmp	r3, #12
 8003552:	f000 8083 	beq.w	800365c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d15e      	bne.n	800361c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a08      	ldr	r2, [pc, #32]	; (8003584 <HAL_RCC_OscConfig+0x4b8>)
 8003564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fd fda5 	bl	80010b8 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003570:	e00c      	b.n	800358c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fd fda1 	bl	80010b8 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d905      	bls.n	800358c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e0ab      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
 8003584:	40021000 	.word	0x40021000
 8003588:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358c:	4b55      	ldr	r3, [pc, #340]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ec      	bne.n	8003572 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003598:	4b52      	ldr	r3, [pc, #328]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	4b52      	ldr	r3, [pc, #328]	; (80036e8 <HAL_RCC_OscConfig+0x61c>)
 800359e:	4013      	ands	r3, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6a11      	ldr	r1, [r2, #32]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035a8:	3a01      	subs	r2, #1
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	4311      	orrs	r1, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80035b2:	0212      	lsls	r2, r2, #8
 80035b4:	4311      	orrs	r1, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035ba:	0852      	lsrs	r2, r2, #1
 80035bc:	3a01      	subs	r2, #1
 80035be:	0552      	lsls	r2, r2, #21
 80035c0:	4311      	orrs	r1, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035c6:	0852      	lsrs	r2, r2, #1
 80035c8:	3a01      	subs	r2, #1
 80035ca:	0652      	lsls	r2, r2, #25
 80035cc:	4311      	orrs	r1, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035d2:	06d2      	lsls	r2, r2, #27
 80035d4:	430a      	orrs	r2, r1
 80035d6:	4943      	ldr	r1, [pc, #268]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035dc:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a40      	ldr	r2, [pc, #256]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 80035e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035e8:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a3d      	ldr	r2, [pc, #244]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 80035ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fd fd60 	bl	80010b8 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fd fd5c 	bl	80010b8 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e066      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360e:	4b35      	ldr	r3, [pc, #212]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x530>
 800361a:	e05e      	b.n	80036da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361c:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a30      	ldr	r2, [pc, #192]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 8003622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fd fd46 	bl	80010b8 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fd fd42 	bl	80010b8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e04c      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003642:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800364e:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	4924      	ldr	r1, [pc, #144]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <HAL_RCC_OscConfig+0x620>)
 8003656:	4013      	ands	r3, r2
 8003658:	60cb      	str	r3, [r1, #12]
 800365a:	e03e      	b.n	80036da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e039      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003668:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <HAL_RCC_OscConfig+0x618>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0203 	and.w	r2, r3, #3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	429a      	cmp	r2, r3
 800367a:	d12c      	bne.n	80036d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	3b01      	subs	r3, #1
 8003688:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d123      	bne.n	80036d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d11b      	bne.n	80036d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d113      	bne.n	80036d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	3b01      	subs	r3, #1
 80036bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d109      	bne.n	80036d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	3b01      	subs	r3, #1
 80036d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d001      	beq.n	80036da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000
 80036e8:	019f800c 	.word	0x019f800c
 80036ec:	feeefffc 	.word	0xfeeefffc

080036f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e11e      	b.n	8003946 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003708:	4b91      	ldr	r3, [pc, #580]	; (8003950 <HAL_RCC_ClockConfig+0x260>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d910      	bls.n	8003738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b8e      	ldr	r3, [pc, #568]	; (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 020f 	bic.w	r2, r3, #15
 800371e:	498c      	ldr	r1, [pc, #560]	; (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b8a      	ldr	r3, [pc, #552]	; (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e106      	b.n	8003946 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d073      	beq.n	800382c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d129      	bne.n	80037a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374c:	4b81      	ldr	r3, [pc, #516]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0f4      	b.n	8003946 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800375c:	f000 f99e 	bl	8003a9c <RCC_GetSysClockFreqFromPLLSource>
 8003760:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4a7c      	ldr	r2, [pc, #496]	; (8003958 <HAL_RCC_ClockConfig+0x268>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d93f      	bls.n	80037ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800376a:	4b7a      	ldr	r3, [pc, #488]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800377e:	2b00      	cmp	r3, #0
 8003780:	d033      	beq.n	80037ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003786:	2b00      	cmp	r3, #0
 8003788:	d12f      	bne.n	80037ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800378a:	4b72      	ldr	r3, [pc, #456]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003792:	4a70      	ldr	r2, [pc, #448]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 8003794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003798:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800379a:	2380      	movs	r3, #128	; 0x80
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e024      	b.n	80037ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a8:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0c6      	b.n	8003946 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b8:	4b66      	ldr	r3, [pc, #408]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0be      	b.n	8003946 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037c8:	f000 f8ce 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4a61      	ldr	r2, [pc, #388]	; (8003958 <HAL_RCC_ClockConfig+0x268>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d909      	bls.n	80037ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037d6:	4b5f      	ldr	r3, [pc, #380]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037de:	4a5d      	ldr	r2, [pc, #372]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 80037e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ea:	4b5a      	ldr	r3, [pc, #360]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f023 0203 	bic.w	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4957      	ldr	r1, [pc, #348]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fc:	f7fd fc5c 	bl	80010b8 <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	e00a      	b.n	800381a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003804:	f7fd fc58 	bl	80010b8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e095      	b.n	8003946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	4b4e      	ldr	r3, [pc, #312]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 020c 	and.w	r2, r3, #12
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	429a      	cmp	r2, r3
 800382a:	d1eb      	bne.n	8003804 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d023      	beq.n	8003880 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a42      	ldr	r2, [pc, #264]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 800384a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800384e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800385c:	4b3d      	ldr	r3, [pc, #244]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003864:	4a3b      	ldr	r2, [pc, #236]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 8003866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800386a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800386c:	4b39      	ldr	r3, [pc, #228]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4936      	ldr	r1, [pc, #216]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
 800387e:	e008      	b.n	8003892 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b80      	cmp	r3, #128	; 0x80
 8003884:	d105      	bne.n	8003892 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003886:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4a32      	ldr	r2, [pc, #200]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 800388c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003890:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003892:	4b2f      	ldr	r3, [pc, #188]	; (8003950 <HAL_RCC_ClockConfig+0x260>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d21d      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a0:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 020f 	bic.w	r2, r3, #15
 80038a8:	4929      	ldr	r1, [pc, #164]	; (8003950 <HAL_RCC_ClockConfig+0x260>)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038b0:	f7fd fc02 	bl	80010b8 <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b8:	f7fd fbfe 	bl	80010b8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e03b      	b.n	8003946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <HAL_RCC_ClockConfig+0x260>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1ed      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4917      	ldr	r1, [pc, #92]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	490f      	ldr	r1, [pc, #60]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800391a:	f000 f825 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 800391e:	4602      	mov	r2, r0
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <HAL_RCC_ClockConfig+0x264>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	490c      	ldr	r1, [pc, #48]	; (800395c <HAL_RCC_ClockConfig+0x26c>)
 800392c:	5ccb      	ldrb	r3, [r1, r3]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <HAL_RCC_ClockConfig+0x270>)
 8003938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <HAL_RCC_ClockConfig+0x274>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fb6e 	bl	8001020 <HAL_InitTick>
 8003944:	4603      	mov	r3, r0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40022000 	.word	0x40022000
 8003954:	40021000 	.word	0x40021000
 8003958:	04c4b400 	.word	0x04c4b400
 800395c:	080061bc 	.word	0x080061bc
 8003960:	20000000 	.word	0x20000000
 8003964:	20000004 	.word	0x20000004

08003968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800396e:	4b2c      	ldr	r3, [pc, #176]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b04      	cmp	r3, #4
 8003978:	d102      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e047      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b08      	cmp	r3, #8
 800398a:	d102      	bne.n	8003992 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800398c:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	e03e      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003992:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d136      	bne.n	8003a0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039a8:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	3301      	adds	r3, #1
 80039b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d10c      	bne.n	80039d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039bc:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c6:	68d2      	ldr	r2, [r2, #12]
 80039c8:	0a12      	lsrs	r2, r2, #8
 80039ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	617b      	str	r3, [r7, #20]
      break;
 80039d4:	e00c      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039d6:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e0:	68d2      	ldr	r2, [r2, #12]
 80039e2:	0a12      	lsrs	r2, r2, #8
 80039e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]
      break;
 80039ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	0e5b      	lsrs	r3, r3, #25
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	3301      	adds	r3, #1
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	e001      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a10:	693b      	ldr	r3, [r7, #16]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	00f42400 	.word	0x00f42400
 8003a28:	007a1200 	.word	0x007a1200

08003a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000000 	.word	0x20000000

08003a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a48:	f7ff fff0 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4904      	ldr	r1, [pc, #16]	; (8003a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	080061cc 	.word	0x080061cc

08003a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a74:	f7ff ffda 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	0adb      	lsrs	r3, r3, #11
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	4904      	ldr	r1, [pc, #16]	; (8003a98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000
 8003a98:	080061cc 	.word	0x080061cc

08003a9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d10c      	bne.n	8003ada <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aca:	68d2      	ldr	r2, [r2, #12]
 8003acc:	0a12      	lsrs	r2, r2, #8
 8003ace:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	617b      	str	r3, [r7, #20]
    break;
 8003ad8:	e00c      	b.n	8003af4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ae4:	68d2      	ldr	r2, [r2, #12]
 8003ae6:	0a12      	lsrs	r2, r2, #8
 8003ae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]
    break;
 8003af2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	0e5b      	lsrs	r3, r3, #25
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	3301      	adds	r3, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b0e:	687b      	ldr	r3, [r7, #4]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	007a1200 	.word	0x007a1200
 8003b24:	00f42400 	.word	0x00f42400

08003b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b30:	2300      	movs	r3, #0
 8003b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b34:	2300      	movs	r3, #0
 8003b36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8098 	beq.w	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b46:	2300      	movs	r3, #0
 8003b48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4a:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10d      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	4b40      	ldr	r3, [pc, #256]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	4a3f      	ldr	r2, [pc, #252]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b60:	6593      	str	r3, [r2, #88]	; 0x58
 8003b62:	4b3d      	ldr	r3, [pc, #244]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b72:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a39      	ldr	r2, [pc, #228]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd fa9b 	bl	80010b8 <HAL_GetTick>
 8003b82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b84:	e009      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b86:	f7fd fa97 	bl	80010b8 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d902      	bls.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	74fb      	strb	r3, [r7, #19]
        break;
 8003b98:	e005      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b9a:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0ef      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d159      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bac:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01e      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d019      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bc8:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bd4:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003be4:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	4a1b      	ldr	r2, [pc, #108]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bf4:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d016      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fd fa57 	bl	80010b8 <HAL_GetTick>
 8003c0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0c:	e00b      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fd fa53 	bl	80010b8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d902      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	74fb      	strb	r3, [r7, #19]
            break;
 8003c24:	e006      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ec      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	4903      	ldr	r1, [pc, #12]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c50:	e008      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	74bb      	strb	r3, [r7, #18]
 8003c56:	e005      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c64:	7c7b      	ldrb	r3, [r7, #17]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d105      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6a:	4ba6      	ldr	r3, [pc, #664]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	4aa5      	ldr	r2, [pc, #660]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c82:	4ba0      	ldr	r3, [pc, #640]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f023 0203 	bic.w	r2, r3, #3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	499c      	ldr	r1, [pc, #624]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ca4:	4b97      	ldr	r3, [pc, #604]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f023 020c 	bic.w	r2, r3, #12
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4994      	ldr	r1, [pc, #592]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cc6:	4b8f      	ldr	r3, [pc, #572]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	498b      	ldr	r1, [pc, #556]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ce8:	4b86      	ldr	r3, [pc, #536]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	4983      	ldr	r1, [pc, #524]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d0a:	4b7e      	ldr	r3, [pc, #504]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	497a      	ldr	r1, [pc, #488]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d2c:	4b75      	ldr	r3, [pc, #468]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	4972      	ldr	r1, [pc, #456]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d4e:	4b6d      	ldr	r3, [pc, #436]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	4969      	ldr	r1, [pc, #420]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d70:	4b64      	ldr	r3, [pc, #400]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4961      	ldr	r1, [pc, #388]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d92:	4b5c      	ldr	r3, [pc, #368]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	4958      	ldr	r1, [pc, #352]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d015      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003db4:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	4950      	ldr	r1, [pc, #320]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd2:	d105      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd4:	4b4b      	ldr	r3, [pc, #300]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a4a      	ldr	r2, [pc, #296]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dde:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d015      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dec:	4b45      	ldr	r3, [pc, #276]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	4942      	ldr	r1, [pc, #264]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e0c:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a3c      	ldr	r2, [pc, #240]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d015      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e24:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4934      	ldr	r1, [pc, #208]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e42:	d105      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e44:	4b2f      	ldr	r3, [pc, #188]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4a2e      	ldr	r2, [pc, #184]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d015      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	4926      	ldr	r1, [pc, #152]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7a:	d105      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d015      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	4918      	ldr	r1, [pc, #96]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb4:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ebe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d015      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ecc:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	490a      	ldr	r1, [pc, #40]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ef8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000

08003f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e049      	b.n	8003fae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fc ff70 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f000 f898 	bl	800407c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d001      	beq.n	8003fd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e042      	b.n	8004056 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a21      	ldr	r2, [pc, #132]	; (8004064 <HAL_TIM_Base_Start+0xac>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <HAL_TIM_Base_Start+0x5c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fea:	d013      	beq.n	8004014 <HAL_TIM_Base_Start+0x5c>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <HAL_TIM_Base_Start+0xb0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_TIM_Base_Start+0x5c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	; (800406c <HAL_TIM_Base_Start+0xb4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_TIM_Base_Start+0x5c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <HAL_TIM_Base_Start+0xb8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_TIM_Base_Start+0x5c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_TIM_Base_Start+0xbc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d115      	bne.n	8004040 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <HAL_TIM_Base_Start+0xc0>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b06      	cmp	r3, #6
 8004024:	d015      	beq.n	8004052 <HAL_TIM_Base_Start+0x9a>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402c:	d011      	beq.n	8004052 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	e008      	b.n	8004052 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e000      	b.n	8004054 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40013400 	.word	0x40013400
 8004074:	40014000 	.word	0x40014000
 8004078:	00010007 	.word	0x00010007

0800407c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a42      	ldr	r2, [pc, #264]	; (8004198 <TIM_Base_SetConfig+0x11c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00f      	beq.n	80040b4 <TIM_Base_SetConfig+0x38>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409a:	d00b      	beq.n	80040b4 <TIM_Base_SetConfig+0x38>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a3f      	ldr	r2, [pc, #252]	; (800419c <TIM_Base_SetConfig+0x120>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d007      	beq.n	80040b4 <TIM_Base_SetConfig+0x38>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a3e      	ldr	r2, [pc, #248]	; (80041a0 <TIM_Base_SetConfig+0x124>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d003      	beq.n	80040b4 <TIM_Base_SetConfig+0x38>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a3d      	ldr	r2, [pc, #244]	; (80041a4 <TIM_Base_SetConfig+0x128>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d108      	bne.n	80040c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a33      	ldr	r2, [pc, #204]	; (8004198 <TIM_Base_SetConfig+0x11c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01b      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d4:	d017      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a30      	ldr	r2, [pc, #192]	; (800419c <TIM_Base_SetConfig+0x120>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a2f      	ldr	r2, [pc, #188]	; (80041a0 <TIM_Base_SetConfig+0x124>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00f      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a2e      	ldr	r2, [pc, #184]	; (80041a4 <TIM_Base_SetConfig+0x128>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a2d      	ldr	r2, [pc, #180]	; (80041a8 <TIM_Base_SetConfig+0x12c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a2c      	ldr	r2, [pc, #176]	; (80041ac <TIM_Base_SetConfig+0x130>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_Base_SetConfig+0x8a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a2b      	ldr	r2, [pc, #172]	; (80041b0 <TIM_Base_SetConfig+0x134>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a16      	ldr	r2, [pc, #88]	; (8004198 <TIM_Base_SetConfig+0x11c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00f      	beq.n	8004164 <TIM_Base_SetConfig+0xe8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <TIM_Base_SetConfig+0x128>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00b      	beq.n	8004164 <TIM_Base_SetConfig+0xe8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a16      	ldr	r2, [pc, #88]	; (80041a8 <TIM_Base_SetConfig+0x12c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d007      	beq.n	8004164 <TIM_Base_SetConfig+0xe8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a15      	ldr	r2, [pc, #84]	; (80041ac <TIM_Base_SetConfig+0x130>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_Base_SetConfig+0xe8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <TIM_Base_SetConfig+0x134>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d103      	bne.n	800416c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d105      	bne.n	800418a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f023 0201 	bic.w	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	611a      	str	r2, [r3, #16]
  }
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000800 	.word	0x40000800
 80041a4:	40013400 	.word	0x40013400
 80041a8:	40014000 	.word	0x40014000
 80041ac:	40014400 	.word	0x40014400
 80041b0:	40014800 	.word	0x40014800

080041b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e065      	b.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2c      	ldr	r2, [pc, #176]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2b      	ldr	r2, [pc, #172]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d108      	bne.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004206:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1b      	ldr	r2, [pc, #108]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d018      	beq.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004242:	d013      	beq.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00e      	beq.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a17      	ldr	r2, [pc, #92]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d009      	beq.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d10c      	bne.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004272:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	4313      	orrs	r3, r2
 800427c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	40013400 	.word	0x40013400
 80042ac:	40000400 	.word	0x40000400
 80042b0:	40000800 	.word	0x40000800
 80042b4:	40014000 	.word	0x40014000

080042b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e042      	b.n	8004350 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fc fe05 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2224      	movs	r2, #36	; 0x24
 80042e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fb82 	bl	8004a0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f8b3 	bl	8004474 <UART_SetConfig>
 800430e:	4603      	mov	r3, r0
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e01b      	b.n	8004350 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fc01 	bl	8004b50 <UART_CheckIdleState>
 800434e:	4603      	mov	r3, r0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	4613      	mov	r3, r2
 8004366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	2b20      	cmp	r3, #32
 8004370:	d17b      	bne.n	800446a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_UART_Transmit+0x26>
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e074      	b.n	800446c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2221      	movs	r2, #33	; 0x21
 800438e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004392:	f7fc fe91 	bl	80010b8 <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d108      	bne.n	80043c4 <HAL_UART_Transmit+0x6c>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d104      	bne.n	80043c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e003      	b.n	80043cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043cc:	e030      	b.n	8004430 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fc63 	bl	8004ca4 <UART_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e03d      	b.n	800446c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004404:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	3302      	adds	r3, #2
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	e007      	b.n	800441e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	3301      	adds	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1c8      	bne.n	80043ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2200      	movs	r2, #0
 8004444:	2140      	movs	r1, #64	; 0x40
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fc2c 	bl	8004ca4 <UART_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e006      	b.n	800446c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e000      	b.n	800446c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800446a:	2302      	movs	r3, #2
  }
}
 800446c:	4618      	mov	r0, r3
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004478:	b08c      	sub	sp, #48	; 0x30
 800447a:	af00      	add	r7, sp, #0
 800447c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	431a      	orrs	r2, r3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	431a      	orrs	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4313      	orrs	r3, r2
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4bab      	ldr	r3, [pc, #684]	; (8004750 <UART_SetConfig+0x2dc>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4aa0      	ldr	r2, [pc, #640]	; (8004754 <UART_SetConfig+0x2e0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044dc:	4313      	orrs	r3, r2
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80044ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f023 010f 	bic.w	r1, r3, #15
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a91      	ldr	r2, [pc, #580]	; (8004758 <UART_SetConfig+0x2e4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d125      	bne.n	8004564 <UART_SetConfig+0xf0>
 8004518:	4b90      	ldr	r3, [pc, #576]	; (800475c <UART_SetConfig+0x2e8>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b03      	cmp	r3, #3
 8004524:	d81a      	bhi.n	800455c <UART_SetConfig+0xe8>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0xb8>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	0800453d 	.word	0x0800453d
 8004530:	0800454d 	.word	0x0800454d
 8004534:	08004545 	.word	0x08004545
 8004538:	08004555 	.word	0x08004555
 800453c:	2301      	movs	r3, #1
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004542:	e0d6      	b.n	80046f2 <UART_SetConfig+0x27e>
 8004544:	2302      	movs	r3, #2
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800454a:	e0d2      	b.n	80046f2 <UART_SetConfig+0x27e>
 800454c:	2304      	movs	r3, #4
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004552:	e0ce      	b.n	80046f2 <UART_SetConfig+0x27e>
 8004554:	2308      	movs	r3, #8
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800455a:	e0ca      	b.n	80046f2 <UART_SetConfig+0x27e>
 800455c:	2310      	movs	r3, #16
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004562:	e0c6      	b.n	80046f2 <UART_SetConfig+0x27e>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a7d      	ldr	r2, [pc, #500]	; (8004760 <UART_SetConfig+0x2ec>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d138      	bne.n	80045e0 <UART_SetConfig+0x16c>
 800456e:	4b7b      	ldr	r3, [pc, #492]	; (800475c <UART_SetConfig+0x2e8>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004574:	f003 030c 	and.w	r3, r3, #12
 8004578:	2b0c      	cmp	r3, #12
 800457a:	d82d      	bhi.n	80045d8 <UART_SetConfig+0x164>
 800457c:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <UART_SetConfig+0x110>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	080045b9 	.word	0x080045b9
 8004588:	080045d9 	.word	0x080045d9
 800458c:	080045d9 	.word	0x080045d9
 8004590:	080045d9 	.word	0x080045d9
 8004594:	080045c9 	.word	0x080045c9
 8004598:	080045d9 	.word	0x080045d9
 800459c:	080045d9 	.word	0x080045d9
 80045a0:	080045d9 	.word	0x080045d9
 80045a4:	080045c1 	.word	0x080045c1
 80045a8:	080045d9 	.word	0x080045d9
 80045ac:	080045d9 	.word	0x080045d9
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045d1 	.word	0x080045d1
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045be:	e098      	b.n	80046f2 <UART_SetConfig+0x27e>
 80045c0:	2302      	movs	r3, #2
 80045c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045c6:	e094      	b.n	80046f2 <UART_SetConfig+0x27e>
 80045c8:	2304      	movs	r3, #4
 80045ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ce:	e090      	b.n	80046f2 <UART_SetConfig+0x27e>
 80045d0:	2308      	movs	r3, #8
 80045d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d6:	e08c      	b.n	80046f2 <UART_SetConfig+0x27e>
 80045d8:	2310      	movs	r3, #16
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045de:	e088      	b.n	80046f2 <UART_SetConfig+0x27e>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a5f      	ldr	r2, [pc, #380]	; (8004764 <UART_SetConfig+0x2f0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d125      	bne.n	8004636 <UART_SetConfig+0x1c2>
 80045ea:	4b5c      	ldr	r3, [pc, #368]	; (800475c <UART_SetConfig+0x2e8>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045f4:	2b30      	cmp	r3, #48	; 0x30
 80045f6:	d016      	beq.n	8004626 <UART_SetConfig+0x1b2>
 80045f8:	2b30      	cmp	r3, #48	; 0x30
 80045fa:	d818      	bhi.n	800462e <UART_SetConfig+0x1ba>
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d00a      	beq.n	8004616 <UART_SetConfig+0x1a2>
 8004600:	2b20      	cmp	r3, #32
 8004602:	d814      	bhi.n	800462e <UART_SetConfig+0x1ba>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <UART_SetConfig+0x19a>
 8004608:	2b10      	cmp	r3, #16
 800460a:	d008      	beq.n	800461e <UART_SetConfig+0x1aa>
 800460c:	e00f      	b.n	800462e <UART_SetConfig+0x1ba>
 800460e:	2300      	movs	r3, #0
 8004610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004614:	e06d      	b.n	80046f2 <UART_SetConfig+0x27e>
 8004616:	2302      	movs	r3, #2
 8004618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800461c:	e069      	b.n	80046f2 <UART_SetConfig+0x27e>
 800461e:	2304      	movs	r3, #4
 8004620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004624:	e065      	b.n	80046f2 <UART_SetConfig+0x27e>
 8004626:	2308      	movs	r3, #8
 8004628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462c:	e061      	b.n	80046f2 <UART_SetConfig+0x27e>
 800462e:	2310      	movs	r3, #16
 8004630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004634:	e05d      	b.n	80046f2 <UART_SetConfig+0x27e>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a4b      	ldr	r2, [pc, #300]	; (8004768 <UART_SetConfig+0x2f4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d125      	bne.n	800468c <UART_SetConfig+0x218>
 8004640:	4b46      	ldr	r3, [pc, #280]	; (800475c <UART_SetConfig+0x2e8>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800464a:	2bc0      	cmp	r3, #192	; 0xc0
 800464c:	d016      	beq.n	800467c <UART_SetConfig+0x208>
 800464e:	2bc0      	cmp	r3, #192	; 0xc0
 8004650:	d818      	bhi.n	8004684 <UART_SetConfig+0x210>
 8004652:	2b80      	cmp	r3, #128	; 0x80
 8004654:	d00a      	beq.n	800466c <UART_SetConfig+0x1f8>
 8004656:	2b80      	cmp	r3, #128	; 0x80
 8004658:	d814      	bhi.n	8004684 <UART_SetConfig+0x210>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <UART_SetConfig+0x1f0>
 800465e:	2b40      	cmp	r3, #64	; 0x40
 8004660:	d008      	beq.n	8004674 <UART_SetConfig+0x200>
 8004662:	e00f      	b.n	8004684 <UART_SetConfig+0x210>
 8004664:	2300      	movs	r3, #0
 8004666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800466a:	e042      	b.n	80046f2 <UART_SetConfig+0x27e>
 800466c:	2302      	movs	r3, #2
 800466e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004672:	e03e      	b.n	80046f2 <UART_SetConfig+0x27e>
 8004674:	2304      	movs	r3, #4
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467a:	e03a      	b.n	80046f2 <UART_SetConfig+0x27e>
 800467c:	2308      	movs	r3, #8
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004682:	e036      	b.n	80046f2 <UART_SetConfig+0x27e>
 8004684:	2310      	movs	r3, #16
 8004686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468a:	e032      	b.n	80046f2 <UART_SetConfig+0x27e>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a30      	ldr	r2, [pc, #192]	; (8004754 <UART_SetConfig+0x2e0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d12a      	bne.n	80046ec <UART_SetConfig+0x278>
 8004696:	4b31      	ldr	r3, [pc, #196]	; (800475c <UART_SetConfig+0x2e8>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046a4:	d01a      	beq.n	80046dc <UART_SetConfig+0x268>
 80046a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046aa:	d81b      	bhi.n	80046e4 <UART_SetConfig+0x270>
 80046ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b0:	d00c      	beq.n	80046cc <UART_SetConfig+0x258>
 80046b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b6:	d815      	bhi.n	80046e4 <UART_SetConfig+0x270>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <UART_SetConfig+0x250>
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c0:	d008      	beq.n	80046d4 <UART_SetConfig+0x260>
 80046c2:	e00f      	b.n	80046e4 <UART_SetConfig+0x270>
 80046c4:	2300      	movs	r3, #0
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ca:	e012      	b.n	80046f2 <UART_SetConfig+0x27e>
 80046cc:	2302      	movs	r3, #2
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d2:	e00e      	b.n	80046f2 <UART_SetConfig+0x27e>
 80046d4:	2304      	movs	r3, #4
 80046d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046da:	e00a      	b.n	80046f2 <UART_SetConfig+0x27e>
 80046dc:	2308      	movs	r3, #8
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e2:	e006      	b.n	80046f2 <UART_SetConfig+0x27e>
 80046e4:	2310      	movs	r3, #16
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ea:	e002      	b.n	80046f2 <UART_SetConfig+0x27e>
 80046ec:	2310      	movs	r3, #16
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a17      	ldr	r2, [pc, #92]	; (8004754 <UART_SetConfig+0x2e0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	f040 80a8 	bne.w	800484e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004702:	2b08      	cmp	r3, #8
 8004704:	d834      	bhi.n	8004770 <UART_SetConfig+0x2fc>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x298>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004731 	.word	0x08004731
 8004710:	08004771 	.word	0x08004771
 8004714:	08004739 	.word	0x08004739
 8004718:	08004771 	.word	0x08004771
 800471c:	0800473f 	.word	0x0800473f
 8004720:	08004771 	.word	0x08004771
 8004724:	08004771 	.word	0x08004771
 8004728:	08004771 	.word	0x08004771
 800472c:	08004747 	.word	0x08004747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004730:	f7ff f988 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004734:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004736:	e021      	b.n	800477c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <UART_SetConfig+0x2f8>)
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800473c:	e01e      	b.n	800477c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473e:	f7ff f913 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004744:	e01a      	b.n	800477c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800474c:	e016      	b.n	800477c <UART_SetConfig+0x308>
 800474e:	bf00      	nop
 8004750:	cfff69f3 	.word	0xcfff69f3
 8004754:	40008000 	.word	0x40008000
 8004758:	40013800 	.word	0x40013800
 800475c:	40021000 	.word	0x40021000
 8004760:	40004400 	.word	0x40004400
 8004764:	40004800 	.word	0x40004800
 8004768:	40004c00 	.word	0x40004c00
 800476c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800477a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 812a 	beq.w	80049d8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	4a9e      	ldr	r2, [pc, #632]	; (8004a04 <UART_SetConfig+0x590>)
 800478a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800478e:	461a      	mov	r2, r3
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	fbb3 f3f2 	udiv	r3, r3, r2
 8004796:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	4413      	add	r3, r2
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d305      	bcc.n	80047b4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d903      	bls.n	80047bc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047ba:	e10d      	b.n	80049d8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	2200      	movs	r2, #0
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	60fa      	str	r2, [r7, #12]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	4a8e      	ldr	r2, [pc, #568]	; (8004a04 <UART_SetConfig+0x590>)
 80047ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2200      	movs	r2, #0
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047de:	f7fb fd6f 	bl	80002c0 <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	020b      	lsls	r3, r1, #8
 80047f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047f8:	0202      	lsls	r2, r0, #8
 80047fa:	6979      	ldr	r1, [r7, #20]
 80047fc:	6849      	ldr	r1, [r1, #4]
 80047fe:	0849      	lsrs	r1, r1, #1
 8004800:	2000      	movs	r0, #0
 8004802:	460c      	mov	r4, r1
 8004804:	4605      	mov	r5, r0
 8004806:	eb12 0804 	adds.w	r8, r2, r4
 800480a:	eb43 0905 	adc.w	r9, r3, r5
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	469a      	mov	sl, r3
 8004816:	4693      	mov	fp, r2
 8004818:	4652      	mov	r2, sl
 800481a:	465b      	mov	r3, fp
 800481c:	4640      	mov	r0, r8
 800481e:	4649      	mov	r1, r9
 8004820:	f7fb fd4e 	bl	80002c0 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4613      	mov	r3, r2
 800482a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004832:	d308      	bcc.n	8004846 <UART_SetConfig+0x3d2>
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483a:	d204      	bcs.n	8004846 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6a3a      	ldr	r2, [r7, #32]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e0c8      	b.n	80049d8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800484c:	e0c4      	b.n	80049d8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004856:	d167      	bne.n	8004928 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004858:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800485c:	2b08      	cmp	r3, #8
 800485e:	d828      	bhi.n	80048b2 <UART_SetConfig+0x43e>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x3f4>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800488d 	.word	0x0800488d
 800486c:	08004895 	.word	0x08004895
 8004870:	0800489d 	.word	0x0800489d
 8004874:	080048b3 	.word	0x080048b3
 8004878:	080048a3 	.word	0x080048a3
 800487c:	080048b3 	.word	0x080048b3
 8004880:	080048b3 	.word	0x080048b3
 8004884:	080048b3 	.word	0x080048b3
 8004888:	080048ab 	.word	0x080048ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7ff f8da 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004890:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004892:	e014      	b.n	80048be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004894:	f7ff f8ec 	bl	8003a70 <HAL_RCC_GetPCLK2Freq>
 8004898:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800489a:	e010      	b.n	80048be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800489c:	4b5a      	ldr	r3, [pc, #360]	; (8004a08 <UART_SetConfig+0x594>)
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048a0:	e00d      	b.n	80048be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a2:	f7ff f861 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 80048a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048a8:	e009      	b.n	80048be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048b0:	e005      	b.n	80048be <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8089 	beq.w	80049d8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	4a4e      	ldr	r2, [pc, #312]	; (8004a04 <UART_SetConfig+0x590>)
 80048cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048d0:	461a      	mov	r2, r3
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048d8:	005a      	lsls	r2, r3, #1
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	441a      	add	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	2b0f      	cmp	r3, #15
 80048f0:	d916      	bls.n	8004920 <UART_SetConfig+0x4ac>
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d212      	bcs.n	8004920 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f023 030f 	bic.w	r3, r3, #15
 8004902:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	b29b      	uxth	r3, r3
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	b29a      	uxth	r2, r3
 8004910:	8bfb      	ldrh	r3, [r7, #30]
 8004912:	4313      	orrs	r3, r2
 8004914:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	8bfa      	ldrh	r2, [r7, #30]
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	e05b      	b.n	80049d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004926:	e057      	b.n	80049d8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800492c:	2b08      	cmp	r3, #8
 800492e:	d828      	bhi.n	8004982 <UART_SetConfig+0x50e>
 8004930:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <UART_SetConfig+0x4c4>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004965 	.word	0x08004965
 8004940:	0800496d 	.word	0x0800496d
 8004944:	08004983 	.word	0x08004983
 8004948:	08004973 	.word	0x08004973
 800494c:	08004983 	.word	0x08004983
 8004950:	08004983 	.word	0x08004983
 8004954:	08004983 	.word	0x08004983
 8004958:	0800497b 	.word	0x0800497b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800495c:	f7ff f872 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004962:	e014      	b.n	800498e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004964:	f7ff f884 	bl	8003a70 <HAL_RCC_GetPCLK2Freq>
 8004968:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800496a:	e010      	b.n	800498e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800496c:	4b26      	ldr	r3, [pc, #152]	; (8004a08 <UART_SetConfig+0x594>)
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004970:	e00d      	b.n	800498e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004972:	f7fe fff9 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8004976:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004978:	e009      	b.n	800498e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004980:	e005      	b.n	800498e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800498c:	bf00      	nop
    }

    if (pclk != 0U)
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	2b00      	cmp	r3, #0
 8004992:	d021      	beq.n	80049d8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <UART_SetConfig+0x590>)
 800499a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800499e:	461a      	mov	r2, r3
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	085b      	lsrs	r3, r3, #1
 80049ac:	441a      	add	r2, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	d909      	bls.n	80049d2 <UART_SetConfig+0x55e>
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c4:	d205      	bcs.n	80049d2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60da      	str	r2, [r3, #12]
 80049d0:	e002      	b.n	80049d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2201      	movs	r2, #1
 80049dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2200      	movs	r2, #0
 80049ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80049f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3730      	adds	r7, #48	; 0x30
 80049fc:	46bd      	mov	sp, r7
 80049fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a02:	bf00      	nop
 8004a04:	080061d4 	.word	0x080061d4
 8004a08:	00f42400 	.word	0x00f42400

08004a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01a      	beq.n	8004b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b0a:	d10a      	bne.n	8004b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
  }
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b098      	sub	sp, #96	; 0x60
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b60:	f7fc faaa 	bl	80010b8 <HAL_GetTick>
 8004b64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d12f      	bne.n	8004bd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f88e 	bl	8004ca4 <UART_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d022      	beq.n	8004bd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bac:	647b      	str	r3, [r7, #68]	; 0x44
 8004bae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e6      	bne.n	8004b8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e063      	b.n	8004c9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d149      	bne.n	8004c76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bea:	2200      	movs	r2, #0
 8004bec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f857 	bl	8004ca4 <UART_WaitOnFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d03c      	beq.n	8004c76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	623b      	str	r3, [r7, #32]
   return(result);
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e6      	bne.n	8004bfc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3308      	adds	r3, #8
 8004c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c4e:	61fa      	str	r2, [r7, #28]
 8004c50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	69b9      	ldr	r1, [r7, #24]
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e5      	bne.n	8004c2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e012      	b.n	8004c9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3758      	adds	r7, #88	; 0x58
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb4:	e04f      	b.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbc:	d04b      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7fc f9fb 	bl	80010b8 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e04e      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d037      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b80      	cmp	r3, #128	; 0x80
 8004cea:	d034      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d031      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d110      	bne.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2208      	movs	r2, #8
 8004d06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f838 	bl	8004d7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2208      	movs	r2, #8
 8004d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e029      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d30:	d111      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f81e 	bl	8004d7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e00f      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	bf0c      	ite	eq
 8004d66:	2301      	moveq	r3, #1
 8004d68:	2300      	movne	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d0a0      	beq.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b095      	sub	sp, #84	; 0x54
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da4:	643b      	str	r3, [r7, #64]	; 0x40
 8004da6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004daa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e6      	bne.n	8004d86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3308      	adds	r3, #8
 8004dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ddc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e3      	bne.n	8004db8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d118      	bne.n	8004e2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f023 0310 	bic.w	r3, r3, #16
 8004e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	6979      	ldr	r1, [r7, #20]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	613b      	str	r3, [r7, #16]
   return(result);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e6      	bne.n	8004df8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004e3e:	bf00      	nop
 8004e40:	3754      	adds	r7, #84	; 0x54
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_UARTEx_DisableFifoMode+0x16>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e027      	b.n	8004eb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2224      	movs	r2, #36	; 0x24
 8004e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0201 	bic.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e02d      	b.n	8004f30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2224      	movs	r2, #36	; 0x24
 8004ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0201 	bic.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f84f 	bl	8004fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e02d      	b.n	8004fac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	; 0x24
 8004f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f811 	bl	8004fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d108      	bne.n	8004fd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fd4:	e031      	b.n	800503a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fda:	2308      	movs	r3, #8
 8004fdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	0e5b      	lsrs	r3, r3, #25
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	0f5b      	lsrs	r3, r3, #29
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
 8005000:	7b3a      	ldrb	r2, [r7, #12]
 8005002:	4911      	ldr	r1, [pc, #68]	; (8005048 <UARTEx_SetNbDataToProcess+0x94>)
 8005004:	5c8a      	ldrb	r2, [r1, r2]
 8005006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800500a:	7b3a      	ldrb	r2, [r7, #12]
 800500c:	490f      	ldr	r1, [pc, #60]	; (800504c <UARTEx_SetNbDataToProcess+0x98>)
 800500e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005010:	fb93 f3f2 	sdiv	r3, r3, r2
 8005014:	b29a      	uxth	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	7b7a      	ldrb	r2, [r7, #13]
 8005020:	4909      	ldr	r1, [pc, #36]	; (8005048 <UARTEx_SetNbDataToProcess+0x94>)
 8005022:	5c8a      	ldrb	r2, [r1, r2]
 8005024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005028:	7b7a      	ldrb	r2, [r7, #13]
 800502a:	4908      	ldr	r1, [pc, #32]	; (800504c <UARTEx_SetNbDataToProcess+0x98>)
 800502c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800502e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005032:	b29a      	uxth	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800503a:	bf00      	nop
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	080061ec 	.word	0x080061ec
 800504c:	080061f4 	.word	0x080061f4

08005050 <__errno>:
 8005050:	4b01      	ldr	r3, [pc, #4]	; (8005058 <__errno+0x8>)
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	2000000c 	.word	0x2000000c

0800505c <__libc_init_array>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	4d0d      	ldr	r5, [pc, #52]	; (8005094 <__libc_init_array+0x38>)
 8005060:	4c0d      	ldr	r4, [pc, #52]	; (8005098 <__libc_init_array+0x3c>)
 8005062:	1b64      	subs	r4, r4, r5
 8005064:	10a4      	asrs	r4, r4, #2
 8005066:	2600      	movs	r6, #0
 8005068:	42a6      	cmp	r6, r4
 800506a:	d109      	bne.n	8005080 <__libc_init_array+0x24>
 800506c:	4d0b      	ldr	r5, [pc, #44]	; (800509c <__libc_init_array+0x40>)
 800506e:	4c0c      	ldr	r4, [pc, #48]	; (80050a0 <__libc_init_array+0x44>)
 8005070:	f001 f882 	bl	8006178 <_init>
 8005074:	1b64      	subs	r4, r4, r5
 8005076:	10a4      	asrs	r4, r4, #2
 8005078:	2600      	movs	r6, #0
 800507a:	42a6      	cmp	r6, r4
 800507c:	d105      	bne.n	800508a <__libc_init_array+0x2e>
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	f855 3b04 	ldr.w	r3, [r5], #4
 8005084:	4798      	blx	r3
 8005086:	3601      	adds	r6, #1
 8005088:	e7ee      	b.n	8005068 <__libc_init_array+0xc>
 800508a:	f855 3b04 	ldr.w	r3, [r5], #4
 800508e:	4798      	blx	r3
 8005090:	3601      	adds	r6, #1
 8005092:	e7f2      	b.n	800507a <__libc_init_array+0x1e>
 8005094:	0800629c 	.word	0x0800629c
 8005098:	0800629c 	.word	0x0800629c
 800509c:	0800629c 	.word	0x0800629c
 80050a0:	080062a0 	.word	0x080062a0

080050a4 <memset>:
 80050a4:	4402      	add	r2, r0
 80050a6:	4603      	mov	r3, r0
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d100      	bne.n	80050ae <memset+0xa>
 80050ac:	4770      	bx	lr
 80050ae:	f803 1b01 	strb.w	r1, [r3], #1
 80050b2:	e7f9      	b.n	80050a8 <memset+0x4>

080050b4 <iprintf>:
 80050b4:	b40f      	push	{r0, r1, r2, r3}
 80050b6:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <iprintf+0x2c>)
 80050b8:	b513      	push	{r0, r1, r4, lr}
 80050ba:	681c      	ldr	r4, [r3, #0]
 80050bc:	b124      	cbz	r4, 80050c8 <iprintf+0x14>
 80050be:	69a3      	ldr	r3, [r4, #24]
 80050c0:	b913      	cbnz	r3, 80050c8 <iprintf+0x14>
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 fa74 	bl	80055b0 <__sinit>
 80050c8:	ab05      	add	r3, sp, #20
 80050ca:	9a04      	ldr	r2, [sp, #16]
 80050cc:	68a1      	ldr	r1, [r4, #8]
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	4620      	mov	r0, r4
 80050d2:	f000 fc7d 	bl	80059d0 <_vfiprintf_r>
 80050d6:	b002      	add	sp, #8
 80050d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050dc:	b004      	add	sp, #16
 80050de:	4770      	bx	lr
 80050e0:	2000000c 	.word	0x2000000c

080050e4 <putchar>:
 80050e4:	4b09      	ldr	r3, [pc, #36]	; (800510c <putchar+0x28>)
 80050e6:	b513      	push	{r0, r1, r4, lr}
 80050e8:	681c      	ldr	r4, [r3, #0]
 80050ea:	4601      	mov	r1, r0
 80050ec:	b134      	cbz	r4, 80050fc <putchar+0x18>
 80050ee:	69a3      	ldr	r3, [r4, #24]
 80050f0:	b923      	cbnz	r3, 80050fc <putchar+0x18>
 80050f2:	9001      	str	r0, [sp, #4]
 80050f4:	4620      	mov	r0, r4
 80050f6:	f000 fa5b 	bl	80055b0 <__sinit>
 80050fa:	9901      	ldr	r1, [sp, #4]
 80050fc:	68a2      	ldr	r2, [r4, #8]
 80050fe:	4620      	mov	r0, r4
 8005100:	b002      	add	sp, #8
 8005102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005106:	f000 bf27 	b.w	8005f58 <_putc_r>
 800510a:	bf00      	nop
 800510c:	2000000c 	.word	0x2000000c

08005110 <_puts_r>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	460e      	mov	r6, r1
 8005114:	4605      	mov	r5, r0
 8005116:	b118      	cbz	r0, 8005120 <_puts_r+0x10>
 8005118:	6983      	ldr	r3, [r0, #24]
 800511a:	b90b      	cbnz	r3, 8005120 <_puts_r+0x10>
 800511c:	f000 fa48 	bl	80055b0 <__sinit>
 8005120:	69ab      	ldr	r3, [r5, #24]
 8005122:	68ac      	ldr	r4, [r5, #8]
 8005124:	b913      	cbnz	r3, 800512c <_puts_r+0x1c>
 8005126:	4628      	mov	r0, r5
 8005128:	f000 fa42 	bl	80055b0 <__sinit>
 800512c:	4b2c      	ldr	r3, [pc, #176]	; (80051e0 <_puts_r+0xd0>)
 800512e:	429c      	cmp	r4, r3
 8005130:	d120      	bne.n	8005174 <_puts_r+0x64>
 8005132:	686c      	ldr	r4, [r5, #4]
 8005134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005136:	07db      	lsls	r3, r3, #31
 8005138:	d405      	bmi.n	8005146 <_puts_r+0x36>
 800513a:	89a3      	ldrh	r3, [r4, #12]
 800513c:	0598      	lsls	r0, r3, #22
 800513e:	d402      	bmi.n	8005146 <_puts_r+0x36>
 8005140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005142:	f000 fad3 	bl	80056ec <__retarget_lock_acquire_recursive>
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	0719      	lsls	r1, r3, #28
 800514a:	d51d      	bpl.n	8005188 <_puts_r+0x78>
 800514c:	6923      	ldr	r3, [r4, #16]
 800514e:	b1db      	cbz	r3, 8005188 <_puts_r+0x78>
 8005150:	3e01      	subs	r6, #1
 8005152:	68a3      	ldr	r3, [r4, #8]
 8005154:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005158:	3b01      	subs	r3, #1
 800515a:	60a3      	str	r3, [r4, #8]
 800515c:	bb39      	cbnz	r1, 80051ae <_puts_r+0x9e>
 800515e:	2b00      	cmp	r3, #0
 8005160:	da38      	bge.n	80051d4 <_puts_r+0xc4>
 8005162:	4622      	mov	r2, r4
 8005164:	210a      	movs	r1, #10
 8005166:	4628      	mov	r0, r5
 8005168:	f000 f848 	bl	80051fc <__swbuf_r>
 800516c:	3001      	adds	r0, #1
 800516e:	d011      	beq.n	8005194 <_puts_r+0x84>
 8005170:	250a      	movs	r5, #10
 8005172:	e011      	b.n	8005198 <_puts_r+0x88>
 8005174:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <_puts_r+0xd4>)
 8005176:	429c      	cmp	r4, r3
 8005178:	d101      	bne.n	800517e <_puts_r+0x6e>
 800517a:	68ac      	ldr	r4, [r5, #8]
 800517c:	e7da      	b.n	8005134 <_puts_r+0x24>
 800517e:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <_puts_r+0xd8>)
 8005180:	429c      	cmp	r4, r3
 8005182:	bf08      	it	eq
 8005184:	68ec      	ldreq	r4, [r5, #12]
 8005186:	e7d5      	b.n	8005134 <_puts_r+0x24>
 8005188:	4621      	mov	r1, r4
 800518a:	4628      	mov	r0, r5
 800518c:	f000 f888 	bl	80052a0 <__swsetup_r>
 8005190:	2800      	cmp	r0, #0
 8005192:	d0dd      	beq.n	8005150 <_puts_r+0x40>
 8005194:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800519a:	07da      	lsls	r2, r3, #31
 800519c:	d405      	bmi.n	80051aa <_puts_r+0x9a>
 800519e:	89a3      	ldrh	r3, [r4, #12]
 80051a0:	059b      	lsls	r3, r3, #22
 80051a2:	d402      	bmi.n	80051aa <_puts_r+0x9a>
 80051a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051a6:	f000 faa2 	bl	80056ee <__retarget_lock_release_recursive>
 80051aa:	4628      	mov	r0, r5
 80051ac:	bd70      	pop	{r4, r5, r6, pc}
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	da04      	bge.n	80051bc <_puts_r+0xac>
 80051b2:	69a2      	ldr	r2, [r4, #24]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	dc06      	bgt.n	80051c6 <_puts_r+0xb6>
 80051b8:	290a      	cmp	r1, #10
 80051ba:	d004      	beq.n	80051c6 <_puts_r+0xb6>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	6022      	str	r2, [r4, #0]
 80051c2:	7019      	strb	r1, [r3, #0]
 80051c4:	e7c5      	b.n	8005152 <_puts_r+0x42>
 80051c6:	4622      	mov	r2, r4
 80051c8:	4628      	mov	r0, r5
 80051ca:	f000 f817 	bl	80051fc <__swbuf_r>
 80051ce:	3001      	adds	r0, #1
 80051d0:	d1bf      	bne.n	8005152 <_puts_r+0x42>
 80051d2:	e7df      	b.n	8005194 <_puts_r+0x84>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	250a      	movs	r5, #10
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	6022      	str	r2, [r4, #0]
 80051dc:	701d      	strb	r5, [r3, #0]
 80051de:	e7db      	b.n	8005198 <_puts_r+0x88>
 80051e0:	08006220 	.word	0x08006220
 80051e4:	08006240 	.word	0x08006240
 80051e8:	08006200 	.word	0x08006200

080051ec <puts>:
 80051ec:	4b02      	ldr	r3, [pc, #8]	; (80051f8 <puts+0xc>)
 80051ee:	4601      	mov	r1, r0
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	f7ff bf8d 	b.w	8005110 <_puts_r>
 80051f6:	bf00      	nop
 80051f8:	2000000c 	.word	0x2000000c

080051fc <__swbuf_r>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	460e      	mov	r6, r1
 8005200:	4614      	mov	r4, r2
 8005202:	4605      	mov	r5, r0
 8005204:	b118      	cbz	r0, 800520e <__swbuf_r+0x12>
 8005206:	6983      	ldr	r3, [r0, #24]
 8005208:	b90b      	cbnz	r3, 800520e <__swbuf_r+0x12>
 800520a:	f000 f9d1 	bl	80055b0 <__sinit>
 800520e:	4b21      	ldr	r3, [pc, #132]	; (8005294 <__swbuf_r+0x98>)
 8005210:	429c      	cmp	r4, r3
 8005212:	d12b      	bne.n	800526c <__swbuf_r+0x70>
 8005214:	686c      	ldr	r4, [r5, #4]
 8005216:	69a3      	ldr	r3, [r4, #24]
 8005218:	60a3      	str	r3, [r4, #8]
 800521a:	89a3      	ldrh	r3, [r4, #12]
 800521c:	071a      	lsls	r2, r3, #28
 800521e:	d52f      	bpl.n	8005280 <__swbuf_r+0x84>
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	b36b      	cbz	r3, 8005280 <__swbuf_r+0x84>
 8005224:	6923      	ldr	r3, [r4, #16]
 8005226:	6820      	ldr	r0, [r4, #0]
 8005228:	1ac0      	subs	r0, r0, r3
 800522a:	6963      	ldr	r3, [r4, #20]
 800522c:	b2f6      	uxtb	r6, r6
 800522e:	4283      	cmp	r3, r0
 8005230:	4637      	mov	r7, r6
 8005232:	dc04      	bgt.n	800523e <__swbuf_r+0x42>
 8005234:	4621      	mov	r1, r4
 8005236:	4628      	mov	r0, r5
 8005238:	f000 f926 	bl	8005488 <_fflush_r>
 800523c:	bb30      	cbnz	r0, 800528c <__swbuf_r+0x90>
 800523e:	68a3      	ldr	r3, [r4, #8]
 8005240:	3b01      	subs	r3, #1
 8005242:	60a3      	str	r3, [r4, #8]
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	6022      	str	r2, [r4, #0]
 800524a:	701e      	strb	r6, [r3, #0]
 800524c:	6963      	ldr	r3, [r4, #20]
 800524e:	3001      	adds	r0, #1
 8005250:	4283      	cmp	r3, r0
 8005252:	d004      	beq.n	800525e <__swbuf_r+0x62>
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	07db      	lsls	r3, r3, #31
 8005258:	d506      	bpl.n	8005268 <__swbuf_r+0x6c>
 800525a:	2e0a      	cmp	r6, #10
 800525c:	d104      	bne.n	8005268 <__swbuf_r+0x6c>
 800525e:	4621      	mov	r1, r4
 8005260:	4628      	mov	r0, r5
 8005262:	f000 f911 	bl	8005488 <_fflush_r>
 8005266:	b988      	cbnz	r0, 800528c <__swbuf_r+0x90>
 8005268:	4638      	mov	r0, r7
 800526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <__swbuf_r+0x9c>)
 800526e:	429c      	cmp	r4, r3
 8005270:	d101      	bne.n	8005276 <__swbuf_r+0x7a>
 8005272:	68ac      	ldr	r4, [r5, #8]
 8005274:	e7cf      	b.n	8005216 <__swbuf_r+0x1a>
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <__swbuf_r+0xa0>)
 8005278:	429c      	cmp	r4, r3
 800527a:	bf08      	it	eq
 800527c:	68ec      	ldreq	r4, [r5, #12]
 800527e:	e7ca      	b.n	8005216 <__swbuf_r+0x1a>
 8005280:	4621      	mov	r1, r4
 8005282:	4628      	mov	r0, r5
 8005284:	f000 f80c 	bl	80052a0 <__swsetup_r>
 8005288:	2800      	cmp	r0, #0
 800528a:	d0cb      	beq.n	8005224 <__swbuf_r+0x28>
 800528c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005290:	e7ea      	b.n	8005268 <__swbuf_r+0x6c>
 8005292:	bf00      	nop
 8005294:	08006220 	.word	0x08006220
 8005298:	08006240 	.word	0x08006240
 800529c:	08006200 	.word	0x08006200

080052a0 <__swsetup_r>:
 80052a0:	4b32      	ldr	r3, [pc, #200]	; (800536c <__swsetup_r+0xcc>)
 80052a2:	b570      	push	{r4, r5, r6, lr}
 80052a4:	681d      	ldr	r5, [r3, #0]
 80052a6:	4606      	mov	r6, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	b125      	cbz	r5, 80052b6 <__swsetup_r+0x16>
 80052ac:	69ab      	ldr	r3, [r5, #24]
 80052ae:	b913      	cbnz	r3, 80052b6 <__swsetup_r+0x16>
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 f97d 	bl	80055b0 <__sinit>
 80052b6:	4b2e      	ldr	r3, [pc, #184]	; (8005370 <__swsetup_r+0xd0>)
 80052b8:	429c      	cmp	r4, r3
 80052ba:	d10f      	bne.n	80052dc <__swsetup_r+0x3c>
 80052bc:	686c      	ldr	r4, [r5, #4]
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052c4:	0719      	lsls	r1, r3, #28
 80052c6:	d42c      	bmi.n	8005322 <__swsetup_r+0x82>
 80052c8:	06dd      	lsls	r5, r3, #27
 80052ca:	d411      	bmi.n	80052f0 <__swsetup_r+0x50>
 80052cc:	2309      	movs	r3, #9
 80052ce:	6033      	str	r3, [r6, #0]
 80052d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052da:	e03e      	b.n	800535a <__swsetup_r+0xba>
 80052dc:	4b25      	ldr	r3, [pc, #148]	; (8005374 <__swsetup_r+0xd4>)
 80052de:	429c      	cmp	r4, r3
 80052e0:	d101      	bne.n	80052e6 <__swsetup_r+0x46>
 80052e2:	68ac      	ldr	r4, [r5, #8]
 80052e4:	e7eb      	b.n	80052be <__swsetup_r+0x1e>
 80052e6:	4b24      	ldr	r3, [pc, #144]	; (8005378 <__swsetup_r+0xd8>)
 80052e8:	429c      	cmp	r4, r3
 80052ea:	bf08      	it	eq
 80052ec:	68ec      	ldreq	r4, [r5, #12]
 80052ee:	e7e6      	b.n	80052be <__swsetup_r+0x1e>
 80052f0:	0758      	lsls	r0, r3, #29
 80052f2:	d512      	bpl.n	800531a <__swsetup_r+0x7a>
 80052f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052f6:	b141      	cbz	r1, 800530a <__swsetup_r+0x6a>
 80052f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052fc:	4299      	cmp	r1, r3
 80052fe:	d002      	beq.n	8005306 <__swsetup_r+0x66>
 8005300:	4630      	mov	r0, r6
 8005302:	f000 fa5b 	bl	80057bc <_free_r>
 8005306:	2300      	movs	r3, #0
 8005308:	6363      	str	r3, [r4, #52]	; 0x34
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005310:	81a3      	strh	r3, [r4, #12]
 8005312:	2300      	movs	r3, #0
 8005314:	6063      	str	r3, [r4, #4]
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	6023      	str	r3, [r4, #0]
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	f043 0308 	orr.w	r3, r3, #8
 8005320:	81a3      	strh	r3, [r4, #12]
 8005322:	6923      	ldr	r3, [r4, #16]
 8005324:	b94b      	cbnz	r3, 800533a <__swsetup_r+0x9a>
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800532c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005330:	d003      	beq.n	800533a <__swsetup_r+0x9a>
 8005332:	4621      	mov	r1, r4
 8005334:	4630      	mov	r0, r6
 8005336:	f000 fa01 	bl	800573c <__smakebuf_r>
 800533a:	89a0      	ldrh	r0, [r4, #12]
 800533c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005340:	f010 0301 	ands.w	r3, r0, #1
 8005344:	d00a      	beq.n	800535c <__swsetup_r+0xbc>
 8005346:	2300      	movs	r3, #0
 8005348:	60a3      	str	r3, [r4, #8]
 800534a:	6963      	ldr	r3, [r4, #20]
 800534c:	425b      	negs	r3, r3
 800534e:	61a3      	str	r3, [r4, #24]
 8005350:	6923      	ldr	r3, [r4, #16]
 8005352:	b943      	cbnz	r3, 8005366 <__swsetup_r+0xc6>
 8005354:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005358:	d1ba      	bne.n	80052d0 <__swsetup_r+0x30>
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	0781      	lsls	r1, r0, #30
 800535e:	bf58      	it	pl
 8005360:	6963      	ldrpl	r3, [r4, #20]
 8005362:	60a3      	str	r3, [r4, #8]
 8005364:	e7f4      	b.n	8005350 <__swsetup_r+0xb0>
 8005366:	2000      	movs	r0, #0
 8005368:	e7f7      	b.n	800535a <__swsetup_r+0xba>
 800536a:	bf00      	nop
 800536c:	2000000c 	.word	0x2000000c
 8005370:	08006220 	.word	0x08006220
 8005374:	08006240 	.word	0x08006240
 8005378:	08006200 	.word	0x08006200

0800537c <__sflush_r>:
 800537c:	898a      	ldrh	r2, [r1, #12]
 800537e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005382:	4605      	mov	r5, r0
 8005384:	0710      	lsls	r0, r2, #28
 8005386:	460c      	mov	r4, r1
 8005388:	d458      	bmi.n	800543c <__sflush_r+0xc0>
 800538a:	684b      	ldr	r3, [r1, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	dc05      	bgt.n	800539c <__sflush_r+0x20>
 8005390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	dc02      	bgt.n	800539c <__sflush_r+0x20>
 8005396:	2000      	movs	r0, #0
 8005398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800539c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800539e:	2e00      	cmp	r6, #0
 80053a0:	d0f9      	beq.n	8005396 <__sflush_r+0x1a>
 80053a2:	2300      	movs	r3, #0
 80053a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053a8:	682f      	ldr	r7, [r5, #0]
 80053aa:	602b      	str	r3, [r5, #0]
 80053ac:	d032      	beq.n	8005414 <__sflush_r+0x98>
 80053ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	075a      	lsls	r2, r3, #29
 80053b4:	d505      	bpl.n	80053c2 <__sflush_r+0x46>
 80053b6:	6863      	ldr	r3, [r4, #4]
 80053b8:	1ac0      	subs	r0, r0, r3
 80053ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053bc:	b10b      	cbz	r3, 80053c2 <__sflush_r+0x46>
 80053be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053c0:	1ac0      	subs	r0, r0, r3
 80053c2:	2300      	movs	r3, #0
 80053c4:	4602      	mov	r2, r0
 80053c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053c8:	6a21      	ldr	r1, [r4, #32]
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b0      	blx	r6
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	d106      	bne.n	80053e2 <__sflush_r+0x66>
 80053d4:	6829      	ldr	r1, [r5, #0]
 80053d6:	291d      	cmp	r1, #29
 80053d8:	d82c      	bhi.n	8005434 <__sflush_r+0xb8>
 80053da:	4a2a      	ldr	r2, [pc, #168]	; (8005484 <__sflush_r+0x108>)
 80053dc:	40ca      	lsrs	r2, r1
 80053de:	07d6      	lsls	r6, r2, #31
 80053e0:	d528      	bpl.n	8005434 <__sflush_r+0xb8>
 80053e2:	2200      	movs	r2, #0
 80053e4:	6062      	str	r2, [r4, #4]
 80053e6:	04d9      	lsls	r1, r3, #19
 80053e8:	6922      	ldr	r2, [r4, #16]
 80053ea:	6022      	str	r2, [r4, #0]
 80053ec:	d504      	bpl.n	80053f8 <__sflush_r+0x7c>
 80053ee:	1c42      	adds	r2, r0, #1
 80053f0:	d101      	bne.n	80053f6 <__sflush_r+0x7a>
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	b903      	cbnz	r3, 80053f8 <__sflush_r+0x7c>
 80053f6:	6560      	str	r0, [r4, #84]	; 0x54
 80053f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053fa:	602f      	str	r7, [r5, #0]
 80053fc:	2900      	cmp	r1, #0
 80053fe:	d0ca      	beq.n	8005396 <__sflush_r+0x1a>
 8005400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005404:	4299      	cmp	r1, r3
 8005406:	d002      	beq.n	800540e <__sflush_r+0x92>
 8005408:	4628      	mov	r0, r5
 800540a:	f000 f9d7 	bl	80057bc <_free_r>
 800540e:	2000      	movs	r0, #0
 8005410:	6360      	str	r0, [r4, #52]	; 0x34
 8005412:	e7c1      	b.n	8005398 <__sflush_r+0x1c>
 8005414:	6a21      	ldr	r1, [r4, #32]
 8005416:	2301      	movs	r3, #1
 8005418:	4628      	mov	r0, r5
 800541a:	47b0      	blx	r6
 800541c:	1c41      	adds	r1, r0, #1
 800541e:	d1c7      	bne.n	80053b0 <__sflush_r+0x34>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0c4      	beq.n	80053b0 <__sflush_r+0x34>
 8005426:	2b1d      	cmp	r3, #29
 8005428:	d001      	beq.n	800542e <__sflush_r+0xb2>
 800542a:	2b16      	cmp	r3, #22
 800542c:	d101      	bne.n	8005432 <__sflush_r+0xb6>
 800542e:	602f      	str	r7, [r5, #0]
 8005430:	e7b1      	b.n	8005396 <__sflush_r+0x1a>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005438:	81a3      	strh	r3, [r4, #12]
 800543a:	e7ad      	b.n	8005398 <__sflush_r+0x1c>
 800543c:	690f      	ldr	r7, [r1, #16]
 800543e:	2f00      	cmp	r7, #0
 8005440:	d0a9      	beq.n	8005396 <__sflush_r+0x1a>
 8005442:	0793      	lsls	r3, r2, #30
 8005444:	680e      	ldr	r6, [r1, #0]
 8005446:	bf08      	it	eq
 8005448:	694b      	ldreq	r3, [r1, #20]
 800544a:	600f      	str	r7, [r1, #0]
 800544c:	bf18      	it	ne
 800544e:	2300      	movne	r3, #0
 8005450:	eba6 0807 	sub.w	r8, r6, r7
 8005454:	608b      	str	r3, [r1, #8]
 8005456:	f1b8 0f00 	cmp.w	r8, #0
 800545a:	dd9c      	ble.n	8005396 <__sflush_r+0x1a>
 800545c:	6a21      	ldr	r1, [r4, #32]
 800545e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005460:	4643      	mov	r3, r8
 8005462:	463a      	mov	r2, r7
 8005464:	4628      	mov	r0, r5
 8005466:	47b0      	blx	r6
 8005468:	2800      	cmp	r0, #0
 800546a:	dc06      	bgt.n	800547a <__sflush_r+0xfe>
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005478:	e78e      	b.n	8005398 <__sflush_r+0x1c>
 800547a:	4407      	add	r7, r0
 800547c:	eba8 0800 	sub.w	r8, r8, r0
 8005480:	e7e9      	b.n	8005456 <__sflush_r+0xda>
 8005482:	bf00      	nop
 8005484:	20400001 	.word	0x20400001

08005488 <_fflush_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	690b      	ldr	r3, [r1, #16]
 800548c:	4605      	mov	r5, r0
 800548e:	460c      	mov	r4, r1
 8005490:	b913      	cbnz	r3, 8005498 <_fflush_r+0x10>
 8005492:	2500      	movs	r5, #0
 8005494:	4628      	mov	r0, r5
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	b118      	cbz	r0, 80054a2 <_fflush_r+0x1a>
 800549a:	6983      	ldr	r3, [r0, #24]
 800549c:	b90b      	cbnz	r3, 80054a2 <_fflush_r+0x1a>
 800549e:	f000 f887 	bl	80055b0 <__sinit>
 80054a2:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <_fflush_r+0x6c>)
 80054a4:	429c      	cmp	r4, r3
 80054a6:	d11b      	bne.n	80054e0 <_fflush_r+0x58>
 80054a8:	686c      	ldr	r4, [r5, #4]
 80054aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0ef      	beq.n	8005492 <_fflush_r+0xa>
 80054b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054b4:	07d0      	lsls	r0, r2, #31
 80054b6:	d404      	bmi.n	80054c2 <_fflush_r+0x3a>
 80054b8:	0599      	lsls	r1, r3, #22
 80054ba:	d402      	bmi.n	80054c2 <_fflush_r+0x3a>
 80054bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054be:	f000 f915 	bl	80056ec <__retarget_lock_acquire_recursive>
 80054c2:	4628      	mov	r0, r5
 80054c4:	4621      	mov	r1, r4
 80054c6:	f7ff ff59 	bl	800537c <__sflush_r>
 80054ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054cc:	07da      	lsls	r2, r3, #31
 80054ce:	4605      	mov	r5, r0
 80054d0:	d4e0      	bmi.n	8005494 <_fflush_r+0xc>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	059b      	lsls	r3, r3, #22
 80054d6:	d4dd      	bmi.n	8005494 <_fflush_r+0xc>
 80054d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054da:	f000 f908 	bl	80056ee <__retarget_lock_release_recursive>
 80054de:	e7d9      	b.n	8005494 <_fflush_r+0xc>
 80054e0:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <_fflush_r+0x70>)
 80054e2:	429c      	cmp	r4, r3
 80054e4:	d101      	bne.n	80054ea <_fflush_r+0x62>
 80054e6:	68ac      	ldr	r4, [r5, #8]
 80054e8:	e7df      	b.n	80054aa <_fflush_r+0x22>
 80054ea:	4b04      	ldr	r3, [pc, #16]	; (80054fc <_fflush_r+0x74>)
 80054ec:	429c      	cmp	r4, r3
 80054ee:	bf08      	it	eq
 80054f0:	68ec      	ldreq	r4, [r5, #12]
 80054f2:	e7da      	b.n	80054aa <_fflush_r+0x22>
 80054f4:	08006220 	.word	0x08006220
 80054f8:	08006240 	.word	0x08006240
 80054fc:	08006200 	.word	0x08006200

08005500 <std>:
 8005500:	2300      	movs	r3, #0
 8005502:	b510      	push	{r4, lr}
 8005504:	4604      	mov	r4, r0
 8005506:	e9c0 3300 	strd	r3, r3, [r0]
 800550a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800550e:	6083      	str	r3, [r0, #8]
 8005510:	8181      	strh	r1, [r0, #12]
 8005512:	6643      	str	r3, [r0, #100]	; 0x64
 8005514:	81c2      	strh	r2, [r0, #14]
 8005516:	6183      	str	r3, [r0, #24]
 8005518:	4619      	mov	r1, r3
 800551a:	2208      	movs	r2, #8
 800551c:	305c      	adds	r0, #92	; 0x5c
 800551e:	f7ff fdc1 	bl	80050a4 <memset>
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <std+0x38>)
 8005524:	6263      	str	r3, [r4, #36]	; 0x24
 8005526:	4b05      	ldr	r3, [pc, #20]	; (800553c <std+0x3c>)
 8005528:	62a3      	str	r3, [r4, #40]	; 0x28
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <std+0x40>)
 800552c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <std+0x44>)
 8005530:	6224      	str	r4, [r4, #32]
 8005532:	6323      	str	r3, [r4, #48]	; 0x30
 8005534:	bd10      	pop	{r4, pc}
 8005536:	bf00      	nop
 8005538:	08006009 	.word	0x08006009
 800553c:	0800602b 	.word	0x0800602b
 8005540:	08006063 	.word	0x08006063
 8005544:	08006087 	.word	0x08006087

08005548 <_cleanup_r>:
 8005548:	4901      	ldr	r1, [pc, #4]	; (8005550 <_cleanup_r+0x8>)
 800554a:	f000 b8af 	b.w	80056ac <_fwalk_reent>
 800554e:	bf00      	nop
 8005550:	08005489 	.word	0x08005489

08005554 <__sfmoreglue>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	2268      	movs	r2, #104	; 0x68
 8005558:	1e4d      	subs	r5, r1, #1
 800555a:	4355      	muls	r5, r2
 800555c:	460e      	mov	r6, r1
 800555e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005562:	f000 f997 	bl	8005894 <_malloc_r>
 8005566:	4604      	mov	r4, r0
 8005568:	b140      	cbz	r0, 800557c <__sfmoreglue+0x28>
 800556a:	2100      	movs	r1, #0
 800556c:	e9c0 1600 	strd	r1, r6, [r0]
 8005570:	300c      	adds	r0, #12
 8005572:	60a0      	str	r0, [r4, #8]
 8005574:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005578:	f7ff fd94 	bl	80050a4 <memset>
 800557c:	4620      	mov	r0, r4
 800557e:	bd70      	pop	{r4, r5, r6, pc}

08005580 <__sfp_lock_acquire>:
 8005580:	4801      	ldr	r0, [pc, #4]	; (8005588 <__sfp_lock_acquire+0x8>)
 8005582:	f000 b8b3 	b.w	80056ec <__retarget_lock_acquire_recursive>
 8005586:	bf00      	nop
 8005588:	20000271 	.word	0x20000271

0800558c <__sfp_lock_release>:
 800558c:	4801      	ldr	r0, [pc, #4]	; (8005594 <__sfp_lock_release+0x8>)
 800558e:	f000 b8ae 	b.w	80056ee <__retarget_lock_release_recursive>
 8005592:	bf00      	nop
 8005594:	20000271 	.word	0x20000271

08005598 <__sinit_lock_acquire>:
 8005598:	4801      	ldr	r0, [pc, #4]	; (80055a0 <__sinit_lock_acquire+0x8>)
 800559a:	f000 b8a7 	b.w	80056ec <__retarget_lock_acquire_recursive>
 800559e:	bf00      	nop
 80055a0:	20000272 	.word	0x20000272

080055a4 <__sinit_lock_release>:
 80055a4:	4801      	ldr	r0, [pc, #4]	; (80055ac <__sinit_lock_release+0x8>)
 80055a6:	f000 b8a2 	b.w	80056ee <__retarget_lock_release_recursive>
 80055aa:	bf00      	nop
 80055ac:	20000272 	.word	0x20000272

080055b0 <__sinit>:
 80055b0:	b510      	push	{r4, lr}
 80055b2:	4604      	mov	r4, r0
 80055b4:	f7ff fff0 	bl	8005598 <__sinit_lock_acquire>
 80055b8:	69a3      	ldr	r3, [r4, #24]
 80055ba:	b11b      	cbz	r3, 80055c4 <__sinit+0x14>
 80055bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c0:	f7ff bff0 	b.w	80055a4 <__sinit_lock_release>
 80055c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055c8:	6523      	str	r3, [r4, #80]	; 0x50
 80055ca:	4b13      	ldr	r3, [pc, #76]	; (8005618 <__sinit+0x68>)
 80055cc:	4a13      	ldr	r2, [pc, #76]	; (800561c <__sinit+0x6c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80055d2:	42a3      	cmp	r3, r4
 80055d4:	bf04      	itt	eq
 80055d6:	2301      	moveq	r3, #1
 80055d8:	61a3      	streq	r3, [r4, #24]
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 f820 	bl	8005620 <__sfp>
 80055e0:	6060      	str	r0, [r4, #4]
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 f81c 	bl	8005620 <__sfp>
 80055e8:	60a0      	str	r0, [r4, #8]
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 f818 	bl	8005620 <__sfp>
 80055f0:	2200      	movs	r2, #0
 80055f2:	60e0      	str	r0, [r4, #12]
 80055f4:	2104      	movs	r1, #4
 80055f6:	6860      	ldr	r0, [r4, #4]
 80055f8:	f7ff ff82 	bl	8005500 <std>
 80055fc:	68a0      	ldr	r0, [r4, #8]
 80055fe:	2201      	movs	r2, #1
 8005600:	2109      	movs	r1, #9
 8005602:	f7ff ff7d 	bl	8005500 <std>
 8005606:	68e0      	ldr	r0, [r4, #12]
 8005608:	2202      	movs	r2, #2
 800560a:	2112      	movs	r1, #18
 800560c:	f7ff ff78 	bl	8005500 <std>
 8005610:	2301      	movs	r3, #1
 8005612:	61a3      	str	r3, [r4, #24]
 8005614:	e7d2      	b.n	80055bc <__sinit+0xc>
 8005616:	bf00      	nop
 8005618:	080061fc 	.word	0x080061fc
 800561c:	08005549 	.word	0x08005549

08005620 <__sfp>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	4607      	mov	r7, r0
 8005624:	f7ff ffac 	bl	8005580 <__sfp_lock_acquire>
 8005628:	4b1e      	ldr	r3, [pc, #120]	; (80056a4 <__sfp+0x84>)
 800562a:	681e      	ldr	r6, [r3, #0]
 800562c:	69b3      	ldr	r3, [r6, #24]
 800562e:	b913      	cbnz	r3, 8005636 <__sfp+0x16>
 8005630:	4630      	mov	r0, r6
 8005632:	f7ff ffbd 	bl	80055b0 <__sinit>
 8005636:	3648      	adds	r6, #72	; 0x48
 8005638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800563c:	3b01      	subs	r3, #1
 800563e:	d503      	bpl.n	8005648 <__sfp+0x28>
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	b30b      	cbz	r3, 8005688 <__sfp+0x68>
 8005644:	6836      	ldr	r6, [r6, #0]
 8005646:	e7f7      	b.n	8005638 <__sfp+0x18>
 8005648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800564c:	b9d5      	cbnz	r5, 8005684 <__sfp+0x64>
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <__sfp+0x88>)
 8005650:	60e3      	str	r3, [r4, #12]
 8005652:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005656:	6665      	str	r5, [r4, #100]	; 0x64
 8005658:	f000 f847 	bl	80056ea <__retarget_lock_init_recursive>
 800565c:	f7ff ff96 	bl	800558c <__sfp_lock_release>
 8005660:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005664:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005668:	6025      	str	r5, [r4, #0]
 800566a:	61a5      	str	r5, [r4, #24]
 800566c:	2208      	movs	r2, #8
 800566e:	4629      	mov	r1, r5
 8005670:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005674:	f7ff fd16 	bl	80050a4 <memset>
 8005678:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800567c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005680:	4620      	mov	r0, r4
 8005682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005684:	3468      	adds	r4, #104	; 0x68
 8005686:	e7d9      	b.n	800563c <__sfp+0x1c>
 8005688:	2104      	movs	r1, #4
 800568a:	4638      	mov	r0, r7
 800568c:	f7ff ff62 	bl	8005554 <__sfmoreglue>
 8005690:	4604      	mov	r4, r0
 8005692:	6030      	str	r0, [r6, #0]
 8005694:	2800      	cmp	r0, #0
 8005696:	d1d5      	bne.n	8005644 <__sfp+0x24>
 8005698:	f7ff ff78 	bl	800558c <__sfp_lock_release>
 800569c:	230c      	movs	r3, #12
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	e7ee      	b.n	8005680 <__sfp+0x60>
 80056a2:	bf00      	nop
 80056a4:	080061fc 	.word	0x080061fc
 80056a8:	ffff0001 	.word	0xffff0001

080056ac <_fwalk_reent>:
 80056ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b0:	4606      	mov	r6, r0
 80056b2:	4688      	mov	r8, r1
 80056b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056b8:	2700      	movs	r7, #0
 80056ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056be:	f1b9 0901 	subs.w	r9, r9, #1
 80056c2:	d505      	bpl.n	80056d0 <_fwalk_reent+0x24>
 80056c4:	6824      	ldr	r4, [r4, #0]
 80056c6:	2c00      	cmp	r4, #0
 80056c8:	d1f7      	bne.n	80056ba <_fwalk_reent+0xe>
 80056ca:	4638      	mov	r0, r7
 80056cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056d0:	89ab      	ldrh	r3, [r5, #12]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d907      	bls.n	80056e6 <_fwalk_reent+0x3a>
 80056d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056da:	3301      	adds	r3, #1
 80056dc:	d003      	beq.n	80056e6 <_fwalk_reent+0x3a>
 80056de:	4629      	mov	r1, r5
 80056e0:	4630      	mov	r0, r6
 80056e2:	47c0      	blx	r8
 80056e4:	4307      	orrs	r7, r0
 80056e6:	3568      	adds	r5, #104	; 0x68
 80056e8:	e7e9      	b.n	80056be <_fwalk_reent+0x12>

080056ea <__retarget_lock_init_recursive>:
 80056ea:	4770      	bx	lr

080056ec <__retarget_lock_acquire_recursive>:
 80056ec:	4770      	bx	lr

080056ee <__retarget_lock_release_recursive>:
 80056ee:	4770      	bx	lr

080056f0 <__swhatbuf_r>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	460e      	mov	r6, r1
 80056f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f8:	2900      	cmp	r1, #0
 80056fa:	b096      	sub	sp, #88	; 0x58
 80056fc:	4614      	mov	r4, r2
 80056fe:	461d      	mov	r5, r3
 8005700:	da08      	bge.n	8005714 <__swhatbuf_r+0x24>
 8005702:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	602a      	str	r2, [r5, #0]
 800570a:	061a      	lsls	r2, r3, #24
 800570c:	d410      	bmi.n	8005730 <__swhatbuf_r+0x40>
 800570e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005712:	e00e      	b.n	8005732 <__swhatbuf_r+0x42>
 8005714:	466a      	mov	r2, sp
 8005716:	f000 fcdd 	bl	80060d4 <_fstat_r>
 800571a:	2800      	cmp	r0, #0
 800571c:	dbf1      	blt.n	8005702 <__swhatbuf_r+0x12>
 800571e:	9a01      	ldr	r2, [sp, #4]
 8005720:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005724:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005728:	425a      	negs	r2, r3
 800572a:	415a      	adcs	r2, r3
 800572c:	602a      	str	r2, [r5, #0]
 800572e:	e7ee      	b.n	800570e <__swhatbuf_r+0x1e>
 8005730:	2340      	movs	r3, #64	; 0x40
 8005732:	2000      	movs	r0, #0
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	b016      	add	sp, #88	; 0x58
 8005738:	bd70      	pop	{r4, r5, r6, pc}
	...

0800573c <__smakebuf_r>:
 800573c:	898b      	ldrh	r3, [r1, #12]
 800573e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005740:	079d      	lsls	r5, r3, #30
 8005742:	4606      	mov	r6, r0
 8005744:	460c      	mov	r4, r1
 8005746:	d507      	bpl.n	8005758 <__smakebuf_r+0x1c>
 8005748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	6123      	str	r3, [r4, #16]
 8005750:	2301      	movs	r3, #1
 8005752:	6163      	str	r3, [r4, #20]
 8005754:	b002      	add	sp, #8
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	ab01      	add	r3, sp, #4
 800575a:	466a      	mov	r2, sp
 800575c:	f7ff ffc8 	bl	80056f0 <__swhatbuf_r>
 8005760:	9900      	ldr	r1, [sp, #0]
 8005762:	4605      	mov	r5, r0
 8005764:	4630      	mov	r0, r6
 8005766:	f000 f895 	bl	8005894 <_malloc_r>
 800576a:	b948      	cbnz	r0, 8005780 <__smakebuf_r+0x44>
 800576c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005770:	059a      	lsls	r2, r3, #22
 8005772:	d4ef      	bmi.n	8005754 <__smakebuf_r+0x18>
 8005774:	f023 0303 	bic.w	r3, r3, #3
 8005778:	f043 0302 	orr.w	r3, r3, #2
 800577c:	81a3      	strh	r3, [r4, #12]
 800577e:	e7e3      	b.n	8005748 <__smakebuf_r+0xc>
 8005780:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <__smakebuf_r+0x7c>)
 8005782:	62b3      	str	r3, [r6, #40]	; 0x28
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	6020      	str	r0, [r4, #0]
 8005788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	9b00      	ldr	r3, [sp, #0]
 8005790:	6163      	str	r3, [r4, #20]
 8005792:	9b01      	ldr	r3, [sp, #4]
 8005794:	6120      	str	r0, [r4, #16]
 8005796:	b15b      	cbz	r3, 80057b0 <__smakebuf_r+0x74>
 8005798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800579c:	4630      	mov	r0, r6
 800579e:	f000 fcab 	bl	80060f8 <_isatty_r>
 80057a2:	b128      	cbz	r0, 80057b0 <__smakebuf_r+0x74>
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	f023 0303 	bic.w	r3, r3, #3
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	81a3      	strh	r3, [r4, #12]
 80057b0:	89a0      	ldrh	r0, [r4, #12]
 80057b2:	4305      	orrs	r5, r0
 80057b4:	81a5      	strh	r5, [r4, #12]
 80057b6:	e7cd      	b.n	8005754 <__smakebuf_r+0x18>
 80057b8:	08005549 	.word	0x08005549

080057bc <_free_r>:
 80057bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057be:	2900      	cmp	r1, #0
 80057c0:	d044      	beq.n	800584c <_free_r+0x90>
 80057c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057c6:	9001      	str	r0, [sp, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f1a1 0404 	sub.w	r4, r1, #4
 80057ce:	bfb8      	it	lt
 80057d0:	18e4      	addlt	r4, r4, r3
 80057d2:	f000 fcb3 	bl	800613c <__malloc_lock>
 80057d6:	4a1e      	ldr	r2, [pc, #120]	; (8005850 <_free_r+0x94>)
 80057d8:	9801      	ldr	r0, [sp, #4]
 80057da:	6813      	ldr	r3, [r2, #0]
 80057dc:	b933      	cbnz	r3, 80057ec <_free_r+0x30>
 80057de:	6063      	str	r3, [r4, #4]
 80057e0:	6014      	str	r4, [r2, #0]
 80057e2:	b003      	add	sp, #12
 80057e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057e8:	f000 bcae 	b.w	8006148 <__malloc_unlock>
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	d908      	bls.n	8005802 <_free_r+0x46>
 80057f0:	6825      	ldr	r5, [r4, #0]
 80057f2:	1961      	adds	r1, r4, r5
 80057f4:	428b      	cmp	r3, r1
 80057f6:	bf01      	itttt	eq
 80057f8:	6819      	ldreq	r1, [r3, #0]
 80057fa:	685b      	ldreq	r3, [r3, #4]
 80057fc:	1949      	addeq	r1, r1, r5
 80057fe:	6021      	streq	r1, [r4, #0]
 8005800:	e7ed      	b.n	80057de <_free_r+0x22>
 8005802:	461a      	mov	r2, r3
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	b10b      	cbz	r3, 800580c <_free_r+0x50>
 8005808:	42a3      	cmp	r3, r4
 800580a:	d9fa      	bls.n	8005802 <_free_r+0x46>
 800580c:	6811      	ldr	r1, [r2, #0]
 800580e:	1855      	adds	r5, r2, r1
 8005810:	42a5      	cmp	r5, r4
 8005812:	d10b      	bne.n	800582c <_free_r+0x70>
 8005814:	6824      	ldr	r4, [r4, #0]
 8005816:	4421      	add	r1, r4
 8005818:	1854      	adds	r4, r2, r1
 800581a:	42a3      	cmp	r3, r4
 800581c:	6011      	str	r1, [r2, #0]
 800581e:	d1e0      	bne.n	80057e2 <_free_r+0x26>
 8005820:	681c      	ldr	r4, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	6053      	str	r3, [r2, #4]
 8005826:	4421      	add	r1, r4
 8005828:	6011      	str	r1, [r2, #0]
 800582a:	e7da      	b.n	80057e2 <_free_r+0x26>
 800582c:	d902      	bls.n	8005834 <_free_r+0x78>
 800582e:	230c      	movs	r3, #12
 8005830:	6003      	str	r3, [r0, #0]
 8005832:	e7d6      	b.n	80057e2 <_free_r+0x26>
 8005834:	6825      	ldr	r5, [r4, #0]
 8005836:	1961      	adds	r1, r4, r5
 8005838:	428b      	cmp	r3, r1
 800583a:	bf04      	itt	eq
 800583c:	6819      	ldreq	r1, [r3, #0]
 800583e:	685b      	ldreq	r3, [r3, #4]
 8005840:	6063      	str	r3, [r4, #4]
 8005842:	bf04      	itt	eq
 8005844:	1949      	addeq	r1, r1, r5
 8005846:	6021      	streq	r1, [r4, #0]
 8005848:	6054      	str	r4, [r2, #4]
 800584a:	e7ca      	b.n	80057e2 <_free_r+0x26>
 800584c:	b003      	add	sp, #12
 800584e:	bd30      	pop	{r4, r5, pc}
 8005850:	20000274 	.word	0x20000274

08005854 <sbrk_aligned>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	4e0e      	ldr	r6, [pc, #56]	; (8005890 <sbrk_aligned+0x3c>)
 8005858:	460c      	mov	r4, r1
 800585a:	6831      	ldr	r1, [r6, #0]
 800585c:	4605      	mov	r5, r0
 800585e:	b911      	cbnz	r1, 8005866 <sbrk_aligned+0x12>
 8005860:	f000 fbc2 	bl	8005fe8 <_sbrk_r>
 8005864:	6030      	str	r0, [r6, #0]
 8005866:	4621      	mov	r1, r4
 8005868:	4628      	mov	r0, r5
 800586a:	f000 fbbd 	bl	8005fe8 <_sbrk_r>
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	d00a      	beq.n	8005888 <sbrk_aligned+0x34>
 8005872:	1cc4      	adds	r4, r0, #3
 8005874:	f024 0403 	bic.w	r4, r4, #3
 8005878:	42a0      	cmp	r0, r4
 800587a:	d007      	beq.n	800588c <sbrk_aligned+0x38>
 800587c:	1a21      	subs	r1, r4, r0
 800587e:	4628      	mov	r0, r5
 8005880:	f000 fbb2 	bl	8005fe8 <_sbrk_r>
 8005884:	3001      	adds	r0, #1
 8005886:	d101      	bne.n	800588c <sbrk_aligned+0x38>
 8005888:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800588c:	4620      	mov	r0, r4
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	20000278 	.word	0x20000278

08005894 <_malloc_r>:
 8005894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005898:	1ccd      	adds	r5, r1, #3
 800589a:	f025 0503 	bic.w	r5, r5, #3
 800589e:	3508      	adds	r5, #8
 80058a0:	2d0c      	cmp	r5, #12
 80058a2:	bf38      	it	cc
 80058a4:	250c      	movcc	r5, #12
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	4607      	mov	r7, r0
 80058aa:	db01      	blt.n	80058b0 <_malloc_r+0x1c>
 80058ac:	42a9      	cmp	r1, r5
 80058ae:	d905      	bls.n	80058bc <_malloc_r+0x28>
 80058b0:	230c      	movs	r3, #12
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	2600      	movs	r6, #0
 80058b6:	4630      	mov	r0, r6
 80058b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058bc:	4e2e      	ldr	r6, [pc, #184]	; (8005978 <_malloc_r+0xe4>)
 80058be:	f000 fc3d 	bl	800613c <__malloc_lock>
 80058c2:	6833      	ldr	r3, [r6, #0]
 80058c4:	461c      	mov	r4, r3
 80058c6:	bb34      	cbnz	r4, 8005916 <_malloc_r+0x82>
 80058c8:	4629      	mov	r1, r5
 80058ca:	4638      	mov	r0, r7
 80058cc:	f7ff ffc2 	bl	8005854 <sbrk_aligned>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	4604      	mov	r4, r0
 80058d4:	d14d      	bne.n	8005972 <_malloc_r+0xde>
 80058d6:	6834      	ldr	r4, [r6, #0]
 80058d8:	4626      	mov	r6, r4
 80058da:	2e00      	cmp	r6, #0
 80058dc:	d140      	bne.n	8005960 <_malloc_r+0xcc>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	4631      	mov	r1, r6
 80058e2:	4638      	mov	r0, r7
 80058e4:	eb04 0803 	add.w	r8, r4, r3
 80058e8:	f000 fb7e 	bl	8005fe8 <_sbrk_r>
 80058ec:	4580      	cmp	r8, r0
 80058ee:	d13a      	bne.n	8005966 <_malloc_r+0xd2>
 80058f0:	6821      	ldr	r1, [r4, #0]
 80058f2:	3503      	adds	r5, #3
 80058f4:	1a6d      	subs	r5, r5, r1
 80058f6:	f025 0503 	bic.w	r5, r5, #3
 80058fa:	3508      	adds	r5, #8
 80058fc:	2d0c      	cmp	r5, #12
 80058fe:	bf38      	it	cc
 8005900:	250c      	movcc	r5, #12
 8005902:	4629      	mov	r1, r5
 8005904:	4638      	mov	r0, r7
 8005906:	f7ff ffa5 	bl	8005854 <sbrk_aligned>
 800590a:	3001      	adds	r0, #1
 800590c:	d02b      	beq.n	8005966 <_malloc_r+0xd2>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	442b      	add	r3, r5
 8005912:	6023      	str	r3, [r4, #0]
 8005914:	e00e      	b.n	8005934 <_malloc_r+0xa0>
 8005916:	6822      	ldr	r2, [r4, #0]
 8005918:	1b52      	subs	r2, r2, r5
 800591a:	d41e      	bmi.n	800595a <_malloc_r+0xc6>
 800591c:	2a0b      	cmp	r2, #11
 800591e:	d916      	bls.n	800594e <_malloc_r+0xba>
 8005920:	1961      	adds	r1, r4, r5
 8005922:	42a3      	cmp	r3, r4
 8005924:	6025      	str	r5, [r4, #0]
 8005926:	bf18      	it	ne
 8005928:	6059      	strne	r1, [r3, #4]
 800592a:	6863      	ldr	r3, [r4, #4]
 800592c:	bf08      	it	eq
 800592e:	6031      	streq	r1, [r6, #0]
 8005930:	5162      	str	r2, [r4, r5]
 8005932:	604b      	str	r3, [r1, #4]
 8005934:	4638      	mov	r0, r7
 8005936:	f104 060b 	add.w	r6, r4, #11
 800593a:	f000 fc05 	bl	8006148 <__malloc_unlock>
 800593e:	f026 0607 	bic.w	r6, r6, #7
 8005942:	1d23      	adds	r3, r4, #4
 8005944:	1af2      	subs	r2, r6, r3
 8005946:	d0b6      	beq.n	80058b6 <_malloc_r+0x22>
 8005948:	1b9b      	subs	r3, r3, r6
 800594a:	50a3      	str	r3, [r4, r2]
 800594c:	e7b3      	b.n	80058b6 <_malloc_r+0x22>
 800594e:	6862      	ldr	r2, [r4, #4]
 8005950:	42a3      	cmp	r3, r4
 8005952:	bf0c      	ite	eq
 8005954:	6032      	streq	r2, [r6, #0]
 8005956:	605a      	strne	r2, [r3, #4]
 8005958:	e7ec      	b.n	8005934 <_malloc_r+0xa0>
 800595a:	4623      	mov	r3, r4
 800595c:	6864      	ldr	r4, [r4, #4]
 800595e:	e7b2      	b.n	80058c6 <_malloc_r+0x32>
 8005960:	4634      	mov	r4, r6
 8005962:	6876      	ldr	r6, [r6, #4]
 8005964:	e7b9      	b.n	80058da <_malloc_r+0x46>
 8005966:	230c      	movs	r3, #12
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4638      	mov	r0, r7
 800596c:	f000 fbec 	bl	8006148 <__malloc_unlock>
 8005970:	e7a1      	b.n	80058b6 <_malloc_r+0x22>
 8005972:	6025      	str	r5, [r4, #0]
 8005974:	e7de      	b.n	8005934 <_malloc_r+0xa0>
 8005976:	bf00      	nop
 8005978:	20000274 	.word	0x20000274

0800597c <__sfputc_r>:
 800597c:	6893      	ldr	r3, [r2, #8]
 800597e:	3b01      	subs	r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	b410      	push	{r4}
 8005984:	6093      	str	r3, [r2, #8]
 8005986:	da08      	bge.n	800599a <__sfputc_r+0x1e>
 8005988:	6994      	ldr	r4, [r2, #24]
 800598a:	42a3      	cmp	r3, r4
 800598c:	db01      	blt.n	8005992 <__sfputc_r+0x16>
 800598e:	290a      	cmp	r1, #10
 8005990:	d103      	bne.n	800599a <__sfputc_r+0x1e>
 8005992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005996:	f7ff bc31 	b.w	80051fc <__swbuf_r>
 800599a:	6813      	ldr	r3, [r2, #0]
 800599c:	1c58      	adds	r0, r3, #1
 800599e:	6010      	str	r0, [r2, #0]
 80059a0:	7019      	strb	r1, [r3, #0]
 80059a2:	4608      	mov	r0, r1
 80059a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <__sfputs_r>:
 80059aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ac:	4606      	mov	r6, r0
 80059ae:	460f      	mov	r7, r1
 80059b0:	4614      	mov	r4, r2
 80059b2:	18d5      	adds	r5, r2, r3
 80059b4:	42ac      	cmp	r4, r5
 80059b6:	d101      	bne.n	80059bc <__sfputs_r+0x12>
 80059b8:	2000      	movs	r0, #0
 80059ba:	e007      	b.n	80059cc <__sfputs_r+0x22>
 80059bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c0:	463a      	mov	r2, r7
 80059c2:	4630      	mov	r0, r6
 80059c4:	f7ff ffda 	bl	800597c <__sfputc_r>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d1f3      	bne.n	80059b4 <__sfputs_r+0xa>
 80059cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059d0 <_vfiprintf_r>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	460d      	mov	r5, r1
 80059d6:	b09d      	sub	sp, #116	; 0x74
 80059d8:	4614      	mov	r4, r2
 80059da:	4698      	mov	r8, r3
 80059dc:	4606      	mov	r6, r0
 80059de:	b118      	cbz	r0, 80059e8 <_vfiprintf_r+0x18>
 80059e0:	6983      	ldr	r3, [r0, #24]
 80059e2:	b90b      	cbnz	r3, 80059e8 <_vfiprintf_r+0x18>
 80059e4:	f7ff fde4 	bl	80055b0 <__sinit>
 80059e8:	4b89      	ldr	r3, [pc, #548]	; (8005c10 <_vfiprintf_r+0x240>)
 80059ea:	429d      	cmp	r5, r3
 80059ec:	d11b      	bne.n	8005a26 <_vfiprintf_r+0x56>
 80059ee:	6875      	ldr	r5, [r6, #4]
 80059f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059f2:	07d9      	lsls	r1, r3, #31
 80059f4:	d405      	bmi.n	8005a02 <_vfiprintf_r+0x32>
 80059f6:	89ab      	ldrh	r3, [r5, #12]
 80059f8:	059a      	lsls	r2, r3, #22
 80059fa:	d402      	bmi.n	8005a02 <_vfiprintf_r+0x32>
 80059fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059fe:	f7ff fe75 	bl	80056ec <__retarget_lock_acquire_recursive>
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	071b      	lsls	r3, r3, #28
 8005a06:	d501      	bpl.n	8005a0c <_vfiprintf_r+0x3c>
 8005a08:	692b      	ldr	r3, [r5, #16]
 8005a0a:	b9eb      	cbnz	r3, 8005a48 <_vfiprintf_r+0x78>
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f7ff fc46 	bl	80052a0 <__swsetup_r>
 8005a14:	b1c0      	cbz	r0, 8005a48 <_vfiprintf_r+0x78>
 8005a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a18:	07dc      	lsls	r4, r3, #31
 8005a1a:	d50e      	bpl.n	8005a3a <_vfiprintf_r+0x6a>
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a20:	b01d      	add	sp, #116	; 0x74
 8005a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a26:	4b7b      	ldr	r3, [pc, #492]	; (8005c14 <_vfiprintf_r+0x244>)
 8005a28:	429d      	cmp	r5, r3
 8005a2a:	d101      	bne.n	8005a30 <_vfiprintf_r+0x60>
 8005a2c:	68b5      	ldr	r5, [r6, #8]
 8005a2e:	e7df      	b.n	80059f0 <_vfiprintf_r+0x20>
 8005a30:	4b79      	ldr	r3, [pc, #484]	; (8005c18 <_vfiprintf_r+0x248>)
 8005a32:	429d      	cmp	r5, r3
 8005a34:	bf08      	it	eq
 8005a36:	68f5      	ldreq	r5, [r6, #12]
 8005a38:	e7da      	b.n	80059f0 <_vfiprintf_r+0x20>
 8005a3a:	89ab      	ldrh	r3, [r5, #12]
 8005a3c:	0598      	lsls	r0, r3, #22
 8005a3e:	d4ed      	bmi.n	8005a1c <_vfiprintf_r+0x4c>
 8005a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a42:	f7ff fe54 	bl	80056ee <__retarget_lock_release_recursive>
 8005a46:	e7e9      	b.n	8005a1c <_vfiprintf_r+0x4c>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4c:	2320      	movs	r3, #32
 8005a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a56:	2330      	movs	r3, #48	; 0x30
 8005a58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c1c <_vfiprintf_r+0x24c>
 8005a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a60:	f04f 0901 	mov.w	r9, #1
 8005a64:	4623      	mov	r3, r4
 8005a66:	469a      	mov	sl, r3
 8005a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a6c:	b10a      	cbz	r2, 8005a72 <_vfiprintf_r+0xa2>
 8005a6e:	2a25      	cmp	r2, #37	; 0x25
 8005a70:	d1f9      	bne.n	8005a66 <_vfiprintf_r+0x96>
 8005a72:	ebba 0b04 	subs.w	fp, sl, r4
 8005a76:	d00b      	beq.n	8005a90 <_vfiprintf_r+0xc0>
 8005a78:	465b      	mov	r3, fp
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7ff ff93 	bl	80059aa <__sfputs_r>
 8005a84:	3001      	adds	r0, #1
 8005a86:	f000 80aa 	beq.w	8005bde <_vfiprintf_r+0x20e>
 8005a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a8c:	445a      	add	r2, fp
 8005a8e:	9209      	str	r2, [sp, #36]	; 0x24
 8005a90:	f89a 3000 	ldrb.w	r3, [sl]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80a2 	beq.w	8005bde <_vfiprintf_r+0x20e>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aa4:	f10a 0a01 	add.w	sl, sl, #1
 8005aa8:	9304      	str	r3, [sp, #16]
 8005aaa:	9307      	str	r3, [sp, #28]
 8005aac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ab0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ab2:	4654      	mov	r4, sl
 8005ab4:	2205      	movs	r2, #5
 8005ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aba:	4858      	ldr	r0, [pc, #352]	; (8005c1c <_vfiprintf_r+0x24c>)
 8005abc:	f7fa fbb0 	bl	8000220 <memchr>
 8005ac0:	9a04      	ldr	r2, [sp, #16]
 8005ac2:	b9d8      	cbnz	r0, 8005afc <_vfiprintf_r+0x12c>
 8005ac4:	06d1      	lsls	r1, r2, #27
 8005ac6:	bf44      	itt	mi
 8005ac8:	2320      	movmi	r3, #32
 8005aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ace:	0713      	lsls	r3, r2, #28
 8005ad0:	bf44      	itt	mi
 8005ad2:	232b      	movmi	r3, #43	; 0x2b
 8005ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8005adc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ade:	d015      	beq.n	8005b0c <_vfiprintf_r+0x13c>
 8005ae0:	9a07      	ldr	r2, [sp, #28]
 8005ae2:	4654      	mov	r4, sl
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f04f 0c0a 	mov.w	ip, #10
 8005aea:	4621      	mov	r1, r4
 8005aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005af0:	3b30      	subs	r3, #48	; 0x30
 8005af2:	2b09      	cmp	r3, #9
 8005af4:	d94e      	bls.n	8005b94 <_vfiprintf_r+0x1c4>
 8005af6:	b1b0      	cbz	r0, 8005b26 <_vfiprintf_r+0x156>
 8005af8:	9207      	str	r2, [sp, #28]
 8005afa:	e014      	b.n	8005b26 <_vfiprintf_r+0x156>
 8005afc:	eba0 0308 	sub.w	r3, r0, r8
 8005b00:	fa09 f303 	lsl.w	r3, r9, r3
 8005b04:	4313      	orrs	r3, r2
 8005b06:	9304      	str	r3, [sp, #16]
 8005b08:	46a2      	mov	sl, r4
 8005b0a:	e7d2      	b.n	8005ab2 <_vfiprintf_r+0xe2>
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	1d19      	adds	r1, r3, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	9103      	str	r1, [sp, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bfbb      	ittet	lt
 8005b18:	425b      	neglt	r3, r3
 8005b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b1e:	9307      	strge	r3, [sp, #28]
 8005b20:	9307      	strlt	r3, [sp, #28]
 8005b22:	bfb8      	it	lt
 8005b24:	9204      	strlt	r2, [sp, #16]
 8005b26:	7823      	ldrb	r3, [r4, #0]
 8005b28:	2b2e      	cmp	r3, #46	; 0x2e
 8005b2a:	d10c      	bne.n	8005b46 <_vfiprintf_r+0x176>
 8005b2c:	7863      	ldrb	r3, [r4, #1]
 8005b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b30:	d135      	bne.n	8005b9e <_vfiprintf_r+0x1ce>
 8005b32:	9b03      	ldr	r3, [sp, #12]
 8005b34:	1d1a      	adds	r2, r3, #4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	9203      	str	r2, [sp, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bfb8      	it	lt
 8005b3e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b42:	3402      	adds	r4, #2
 8005b44:	9305      	str	r3, [sp, #20]
 8005b46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c2c <_vfiprintf_r+0x25c>
 8005b4a:	7821      	ldrb	r1, [r4, #0]
 8005b4c:	2203      	movs	r2, #3
 8005b4e:	4650      	mov	r0, sl
 8005b50:	f7fa fb66 	bl	8000220 <memchr>
 8005b54:	b140      	cbz	r0, 8005b68 <_vfiprintf_r+0x198>
 8005b56:	2340      	movs	r3, #64	; 0x40
 8005b58:	eba0 000a 	sub.w	r0, r0, sl
 8005b5c:	fa03 f000 	lsl.w	r0, r3, r0
 8005b60:	9b04      	ldr	r3, [sp, #16]
 8005b62:	4303      	orrs	r3, r0
 8005b64:	3401      	adds	r4, #1
 8005b66:	9304      	str	r3, [sp, #16]
 8005b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b6c:	482c      	ldr	r0, [pc, #176]	; (8005c20 <_vfiprintf_r+0x250>)
 8005b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b72:	2206      	movs	r2, #6
 8005b74:	f7fa fb54 	bl	8000220 <memchr>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d03f      	beq.n	8005bfc <_vfiprintf_r+0x22c>
 8005b7c:	4b29      	ldr	r3, [pc, #164]	; (8005c24 <_vfiprintf_r+0x254>)
 8005b7e:	bb1b      	cbnz	r3, 8005bc8 <_vfiprintf_r+0x1f8>
 8005b80:	9b03      	ldr	r3, [sp, #12]
 8005b82:	3307      	adds	r3, #7
 8005b84:	f023 0307 	bic.w	r3, r3, #7
 8005b88:	3308      	adds	r3, #8
 8005b8a:	9303      	str	r3, [sp, #12]
 8005b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8e:	443b      	add	r3, r7
 8005b90:	9309      	str	r3, [sp, #36]	; 0x24
 8005b92:	e767      	b.n	8005a64 <_vfiprintf_r+0x94>
 8005b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b98:	460c      	mov	r4, r1
 8005b9a:	2001      	movs	r0, #1
 8005b9c:	e7a5      	b.n	8005aea <_vfiprintf_r+0x11a>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	3401      	adds	r4, #1
 8005ba2:	9305      	str	r3, [sp, #20]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f04f 0c0a 	mov.w	ip, #10
 8005baa:	4620      	mov	r0, r4
 8005bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bb0:	3a30      	subs	r2, #48	; 0x30
 8005bb2:	2a09      	cmp	r2, #9
 8005bb4:	d903      	bls.n	8005bbe <_vfiprintf_r+0x1ee>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0c5      	beq.n	8005b46 <_vfiprintf_r+0x176>
 8005bba:	9105      	str	r1, [sp, #20]
 8005bbc:	e7c3      	b.n	8005b46 <_vfiprintf_r+0x176>
 8005bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e7f0      	b.n	8005baa <_vfiprintf_r+0x1da>
 8005bc8:	ab03      	add	r3, sp, #12
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <_vfiprintf_r+0x258>)
 8005bd0:	a904      	add	r1, sp, #16
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f3af 8000 	nop.w
 8005bd8:	4607      	mov	r7, r0
 8005bda:	1c78      	adds	r0, r7, #1
 8005bdc:	d1d6      	bne.n	8005b8c <_vfiprintf_r+0x1bc>
 8005bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005be0:	07d9      	lsls	r1, r3, #31
 8005be2:	d405      	bmi.n	8005bf0 <_vfiprintf_r+0x220>
 8005be4:	89ab      	ldrh	r3, [r5, #12]
 8005be6:	059a      	lsls	r2, r3, #22
 8005be8:	d402      	bmi.n	8005bf0 <_vfiprintf_r+0x220>
 8005bea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bec:	f7ff fd7f 	bl	80056ee <__retarget_lock_release_recursive>
 8005bf0:	89ab      	ldrh	r3, [r5, #12]
 8005bf2:	065b      	lsls	r3, r3, #25
 8005bf4:	f53f af12 	bmi.w	8005a1c <_vfiprintf_r+0x4c>
 8005bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bfa:	e711      	b.n	8005a20 <_vfiprintf_r+0x50>
 8005bfc:	ab03      	add	r3, sp, #12
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	462a      	mov	r2, r5
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <_vfiprintf_r+0x258>)
 8005c04:	a904      	add	r1, sp, #16
 8005c06:	4630      	mov	r0, r6
 8005c08:	f000 f880 	bl	8005d0c <_printf_i>
 8005c0c:	e7e4      	b.n	8005bd8 <_vfiprintf_r+0x208>
 8005c0e:	bf00      	nop
 8005c10:	08006220 	.word	0x08006220
 8005c14:	08006240 	.word	0x08006240
 8005c18:	08006200 	.word	0x08006200
 8005c1c:	08006260 	.word	0x08006260
 8005c20:	0800626a 	.word	0x0800626a
 8005c24:	00000000 	.word	0x00000000
 8005c28:	080059ab 	.word	0x080059ab
 8005c2c:	08006266 	.word	0x08006266

08005c30 <_printf_common>:
 8005c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	4616      	mov	r6, r2
 8005c36:	4699      	mov	r9, r3
 8005c38:	688a      	ldr	r2, [r1, #8]
 8005c3a:	690b      	ldr	r3, [r1, #16]
 8005c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c40:	4293      	cmp	r3, r2
 8005c42:	bfb8      	it	lt
 8005c44:	4613      	movlt	r3, r2
 8005c46:	6033      	str	r3, [r6, #0]
 8005c48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	b10a      	cbz	r2, 8005c56 <_printf_common+0x26>
 8005c52:	3301      	adds	r3, #1
 8005c54:	6033      	str	r3, [r6, #0]
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	0699      	lsls	r1, r3, #26
 8005c5a:	bf42      	ittt	mi
 8005c5c:	6833      	ldrmi	r3, [r6, #0]
 8005c5e:	3302      	addmi	r3, #2
 8005c60:	6033      	strmi	r3, [r6, #0]
 8005c62:	6825      	ldr	r5, [r4, #0]
 8005c64:	f015 0506 	ands.w	r5, r5, #6
 8005c68:	d106      	bne.n	8005c78 <_printf_common+0x48>
 8005c6a:	f104 0a19 	add.w	sl, r4, #25
 8005c6e:	68e3      	ldr	r3, [r4, #12]
 8005c70:	6832      	ldr	r2, [r6, #0]
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	42ab      	cmp	r3, r5
 8005c76:	dc26      	bgt.n	8005cc6 <_printf_common+0x96>
 8005c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c7c:	1e13      	subs	r3, r2, #0
 8005c7e:	6822      	ldr	r2, [r4, #0]
 8005c80:	bf18      	it	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	0692      	lsls	r2, r2, #26
 8005c86:	d42b      	bmi.n	8005ce0 <_printf_common+0xb0>
 8005c88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	4638      	mov	r0, r7
 8005c90:	47c0      	blx	r8
 8005c92:	3001      	adds	r0, #1
 8005c94:	d01e      	beq.n	8005cd4 <_printf_common+0xa4>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	68e5      	ldr	r5, [r4, #12]
 8005c9a:	6832      	ldr	r2, [r6, #0]
 8005c9c:	f003 0306 	and.w	r3, r3, #6
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	bf08      	it	eq
 8005ca4:	1aad      	subeq	r5, r5, r2
 8005ca6:	68a3      	ldr	r3, [r4, #8]
 8005ca8:	6922      	ldr	r2, [r4, #16]
 8005caa:	bf0c      	ite	eq
 8005cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cb0:	2500      	movne	r5, #0
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	bfc4      	itt	gt
 8005cb6:	1a9b      	subgt	r3, r3, r2
 8005cb8:	18ed      	addgt	r5, r5, r3
 8005cba:	2600      	movs	r6, #0
 8005cbc:	341a      	adds	r4, #26
 8005cbe:	42b5      	cmp	r5, r6
 8005cc0:	d11a      	bne.n	8005cf8 <_printf_common+0xc8>
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	e008      	b.n	8005cd8 <_printf_common+0xa8>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4652      	mov	r2, sl
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4638      	mov	r0, r7
 8005cce:	47c0      	blx	r8
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d103      	bne.n	8005cdc <_printf_common+0xac>
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cdc:	3501      	adds	r5, #1
 8005cde:	e7c6      	b.n	8005c6e <_printf_common+0x3e>
 8005ce0:	18e1      	adds	r1, r4, r3
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	2030      	movs	r0, #48	; 0x30
 8005ce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cea:	4422      	add	r2, r4
 8005cec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cf4:	3302      	adds	r3, #2
 8005cf6:	e7c7      	b.n	8005c88 <_printf_common+0x58>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	4638      	mov	r0, r7
 8005d00:	47c0      	blx	r8
 8005d02:	3001      	adds	r0, #1
 8005d04:	d0e6      	beq.n	8005cd4 <_printf_common+0xa4>
 8005d06:	3601      	adds	r6, #1
 8005d08:	e7d9      	b.n	8005cbe <_printf_common+0x8e>
	...

08005d0c <_printf_i>:
 8005d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d10:	7e0f      	ldrb	r7, [r1, #24]
 8005d12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d14:	2f78      	cmp	r7, #120	; 0x78
 8005d16:	4691      	mov	r9, r2
 8005d18:	4680      	mov	r8, r0
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	469a      	mov	sl, r3
 8005d1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d22:	d807      	bhi.n	8005d34 <_printf_i+0x28>
 8005d24:	2f62      	cmp	r7, #98	; 0x62
 8005d26:	d80a      	bhi.n	8005d3e <_printf_i+0x32>
 8005d28:	2f00      	cmp	r7, #0
 8005d2a:	f000 80d8 	beq.w	8005ede <_printf_i+0x1d2>
 8005d2e:	2f58      	cmp	r7, #88	; 0x58
 8005d30:	f000 80a3 	beq.w	8005e7a <_printf_i+0x16e>
 8005d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d3c:	e03a      	b.n	8005db4 <_printf_i+0xa8>
 8005d3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d42:	2b15      	cmp	r3, #21
 8005d44:	d8f6      	bhi.n	8005d34 <_printf_i+0x28>
 8005d46:	a101      	add	r1, pc, #4	; (adr r1, 8005d4c <_printf_i+0x40>)
 8005d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d4c:	08005da5 	.word	0x08005da5
 8005d50:	08005db9 	.word	0x08005db9
 8005d54:	08005d35 	.word	0x08005d35
 8005d58:	08005d35 	.word	0x08005d35
 8005d5c:	08005d35 	.word	0x08005d35
 8005d60:	08005d35 	.word	0x08005d35
 8005d64:	08005db9 	.word	0x08005db9
 8005d68:	08005d35 	.word	0x08005d35
 8005d6c:	08005d35 	.word	0x08005d35
 8005d70:	08005d35 	.word	0x08005d35
 8005d74:	08005d35 	.word	0x08005d35
 8005d78:	08005ec5 	.word	0x08005ec5
 8005d7c:	08005de9 	.word	0x08005de9
 8005d80:	08005ea7 	.word	0x08005ea7
 8005d84:	08005d35 	.word	0x08005d35
 8005d88:	08005d35 	.word	0x08005d35
 8005d8c:	08005ee7 	.word	0x08005ee7
 8005d90:	08005d35 	.word	0x08005d35
 8005d94:	08005de9 	.word	0x08005de9
 8005d98:	08005d35 	.word	0x08005d35
 8005d9c:	08005d35 	.word	0x08005d35
 8005da0:	08005eaf 	.word	0x08005eaf
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	1d1a      	adds	r2, r3, #4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	602a      	str	r2, [r5, #0]
 8005dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0a3      	b.n	8005f00 <_printf_i+0x1f4>
 8005db8:	6820      	ldr	r0, [r4, #0]
 8005dba:	6829      	ldr	r1, [r5, #0]
 8005dbc:	0606      	lsls	r6, r0, #24
 8005dbe:	f101 0304 	add.w	r3, r1, #4
 8005dc2:	d50a      	bpl.n	8005dda <_printf_i+0xce>
 8005dc4:	680e      	ldr	r6, [r1, #0]
 8005dc6:	602b      	str	r3, [r5, #0]
 8005dc8:	2e00      	cmp	r6, #0
 8005dca:	da03      	bge.n	8005dd4 <_printf_i+0xc8>
 8005dcc:	232d      	movs	r3, #45	; 0x2d
 8005dce:	4276      	negs	r6, r6
 8005dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dd4:	485e      	ldr	r0, [pc, #376]	; (8005f50 <_printf_i+0x244>)
 8005dd6:	230a      	movs	r3, #10
 8005dd8:	e019      	b.n	8005e0e <_printf_i+0x102>
 8005dda:	680e      	ldr	r6, [r1, #0]
 8005ddc:	602b      	str	r3, [r5, #0]
 8005dde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005de2:	bf18      	it	ne
 8005de4:	b236      	sxthne	r6, r6
 8005de6:	e7ef      	b.n	8005dc8 <_printf_i+0xbc>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	1d19      	adds	r1, r3, #4
 8005dee:	6029      	str	r1, [r5, #0]
 8005df0:	0601      	lsls	r1, r0, #24
 8005df2:	d501      	bpl.n	8005df8 <_printf_i+0xec>
 8005df4:	681e      	ldr	r6, [r3, #0]
 8005df6:	e002      	b.n	8005dfe <_printf_i+0xf2>
 8005df8:	0646      	lsls	r6, r0, #25
 8005dfa:	d5fb      	bpl.n	8005df4 <_printf_i+0xe8>
 8005dfc:	881e      	ldrh	r6, [r3, #0]
 8005dfe:	4854      	ldr	r0, [pc, #336]	; (8005f50 <_printf_i+0x244>)
 8005e00:	2f6f      	cmp	r7, #111	; 0x6f
 8005e02:	bf0c      	ite	eq
 8005e04:	2308      	moveq	r3, #8
 8005e06:	230a      	movne	r3, #10
 8005e08:	2100      	movs	r1, #0
 8005e0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e0e:	6865      	ldr	r5, [r4, #4]
 8005e10:	60a5      	str	r5, [r4, #8]
 8005e12:	2d00      	cmp	r5, #0
 8005e14:	bfa2      	ittt	ge
 8005e16:	6821      	ldrge	r1, [r4, #0]
 8005e18:	f021 0104 	bicge.w	r1, r1, #4
 8005e1c:	6021      	strge	r1, [r4, #0]
 8005e1e:	b90e      	cbnz	r6, 8005e24 <_printf_i+0x118>
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	d04d      	beq.n	8005ec0 <_printf_i+0x1b4>
 8005e24:	4615      	mov	r5, r2
 8005e26:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e2a:	fb03 6711 	mls	r7, r3, r1, r6
 8005e2e:	5dc7      	ldrb	r7, [r0, r7]
 8005e30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e34:	4637      	mov	r7, r6
 8005e36:	42bb      	cmp	r3, r7
 8005e38:	460e      	mov	r6, r1
 8005e3a:	d9f4      	bls.n	8005e26 <_printf_i+0x11a>
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d10b      	bne.n	8005e58 <_printf_i+0x14c>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	07de      	lsls	r6, r3, #31
 8005e44:	d508      	bpl.n	8005e58 <_printf_i+0x14c>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	6861      	ldr	r1, [r4, #4]
 8005e4a:	4299      	cmp	r1, r3
 8005e4c:	bfde      	ittt	le
 8005e4e:	2330      	movle	r3, #48	; 0x30
 8005e50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e54:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e58:	1b52      	subs	r2, r2, r5
 8005e5a:	6122      	str	r2, [r4, #16]
 8005e5c:	f8cd a000 	str.w	sl, [sp]
 8005e60:	464b      	mov	r3, r9
 8005e62:	aa03      	add	r2, sp, #12
 8005e64:	4621      	mov	r1, r4
 8005e66:	4640      	mov	r0, r8
 8005e68:	f7ff fee2 	bl	8005c30 <_printf_common>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d14c      	bne.n	8005f0a <_printf_i+0x1fe>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e74:	b004      	add	sp, #16
 8005e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7a:	4835      	ldr	r0, [pc, #212]	; (8005f50 <_printf_i+0x244>)
 8005e7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e80:	6829      	ldr	r1, [r5, #0]
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e88:	6029      	str	r1, [r5, #0]
 8005e8a:	061d      	lsls	r5, r3, #24
 8005e8c:	d514      	bpl.n	8005eb8 <_printf_i+0x1ac>
 8005e8e:	07df      	lsls	r7, r3, #31
 8005e90:	bf44      	itt	mi
 8005e92:	f043 0320 	orrmi.w	r3, r3, #32
 8005e96:	6023      	strmi	r3, [r4, #0]
 8005e98:	b91e      	cbnz	r6, 8005ea2 <_printf_i+0x196>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	f023 0320 	bic.w	r3, r3, #32
 8005ea0:	6023      	str	r3, [r4, #0]
 8005ea2:	2310      	movs	r3, #16
 8005ea4:	e7b0      	b.n	8005e08 <_printf_i+0xfc>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	f043 0320 	orr.w	r3, r3, #32
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	2378      	movs	r3, #120	; 0x78
 8005eb0:	4828      	ldr	r0, [pc, #160]	; (8005f54 <_printf_i+0x248>)
 8005eb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005eb6:	e7e3      	b.n	8005e80 <_printf_i+0x174>
 8005eb8:	0659      	lsls	r1, r3, #25
 8005eba:	bf48      	it	mi
 8005ebc:	b2b6      	uxthmi	r6, r6
 8005ebe:	e7e6      	b.n	8005e8e <_printf_i+0x182>
 8005ec0:	4615      	mov	r5, r2
 8005ec2:	e7bb      	b.n	8005e3c <_printf_i+0x130>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	6826      	ldr	r6, [r4, #0]
 8005ec8:	6961      	ldr	r1, [r4, #20]
 8005eca:	1d18      	adds	r0, r3, #4
 8005ecc:	6028      	str	r0, [r5, #0]
 8005ece:	0635      	lsls	r5, r6, #24
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	d501      	bpl.n	8005ed8 <_printf_i+0x1cc>
 8005ed4:	6019      	str	r1, [r3, #0]
 8005ed6:	e002      	b.n	8005ede <_printf_i+0x1d2>
 8005ed8:	0670      	lsls	r0, r6, #25
 8005eda:	d5fb      	bpl.n	8005ed4 <_printf_i+0x1c8>
 8005edc:	8019      	strh	r1, [r3, #0]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	4615      	mov	r5, r2
 8005ee4:	e7ba      	b.n	8005e5c <_printf_i+0x150>
 8005ee6:	682b      	ldr	r3, [r5, #0]
 8005ee8:	1d1a      	adds	r2, r3, #4
 8005eea:	602a      	str	r2, [r5, #0]
 8005eec:	681d      	ldr	r5, [r3, #0]
 8005eee:	6862      	ldr	r2, [r4, #4]
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f7fa f994 	bl	8000220 <memchr>
 8005ef8:	b108      	cbz	r0, 8005efe <_printf_i+0x1f2>
 8005efa:	1b40      	subs	r0, r0, r5
 8005efc:	6060      	str	r0, [r4, #4]
 8005efe:	6863      	ldr	r3, [r4, #4]
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	2300      	movs	r3, #0
 8005f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f08:	e7a8      	b.n	8005e5c <_printf_i+0x150>
 8005f0a:	6923      	ldr	r3, [r4, #16]
 8005f0c:	462a      	mov	r2, r5
 8005f0e:	4649      	mov	r1, r9
 8005f10:	4640      	mov	r0, r8
 8005f12:	47d0      	blx	sl
 8005f14:	3001      	adds	r0, #1
 8005f16:	d0ab      	beq.n	8005e70 <_printf_i+0x164>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	079b      	lsls	r3, r3, #30
 8005f1c:	d413      	bmi.n	8005f46 <_printf_i+0x23a>
 8005f1e:	68e0      	ldr	r0, [r4, #12]
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	4298      	cmp	r0, r3
 8005f24:	bfb8      	it	lt
 8005f26:	4618      	movlt	r0, r3
 8005f28:	e7a4      	b.n	8005e74 <_printf_i+0x168>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	47d0      	blx	sl
 8005f34:	3001      	adds	r0, #1
 8005f36:	d09b      	beq.n	8005e70 <_printf_i+0x164>
 8005f38:	3501      	adds	r5, #1
 8005f3a:	68e3      	ldr	r3, [r4, #12]
 8005f3c:	9903      	ldr	r1, [sp, #12]
 8005f3e:	1a5b      	subs	r3, r3, r1
 8005f40:	42ab      	cmp	r3, r5
 8005f42:	dcf2      	bgt.n	8005f2a <_printf_i+0x21e>
 8005f44:	e7eb      	b.n	8005f1e <_printf_i+0x212>
 8005f46:	2500      	movs	r5, #0
 8005f48:	f104 0619 	add.w	r6, r4, #25
 8005f4c:	e7f5      	b.n	8005f3a <_printf_i+0x22e>
 8005f4e:	bf00      	nop
 8005f50:	08006271 	.word	0x08006271
 8005f54:	08006282 	.word	0x08006282

08005f58 <_putc_r>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	460d      	mov	r5, r1
 8005f5c:	4614      	mov	r4, r2
 8005f5e:	4606      	mov	r6, r0
 8005f60:	b118      	cbz	r0, 8005f6a <_putc_r+0x12>
 8005f62:	6983      	ldr	r3, [r0, #24]
 8005f64:	b90b      	cbnz	r3, 8005f6a <_putc_r+0x12>
 8005f66:	f7ff fb23 	bl	80055b0 <__sinit>
 8005f6a:	4b1c      	ldr	r3, [pc, #112]	; (8005fdc <_putc_r+0x84>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d124      	bne.n	8005fba <_putc_r+0x62>
 8005f70:	6874      	ldr	r4, [r6, #4]
 8005f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f74:	07d8      	lsls	r0, r3, #31
 8005f76:	d405      	bmi.n	8005f84 <_putc_r+0x2c>
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	0599      	lsls	r1, r3, #22
 8005f7c:	d402      	bmi.n	8005f84 <_putc_r+0x2c>
 8005f7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f80:	f7ff fbb4 	bl	80056ec <__retarget_lock_acquire_recursive>
 8005f84:	68a3      	ldr	r3, [r4, #8]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	60a3      	str	r3, [r4, #8]
 8005f8c:	da05      	bge.n	8005f9a <_putc_r+0x42>
 8005f8e:	69a2      	ldr	r2, [r4, #24]
 8005f90:	4293      	cmp	r3, r2
 8005f92:	db1c      	blt.n	8005fce <_putc_r+0x76>
 8005f94:	b2eb      	uxtb	r3, r5
 8005f96:	2b0a      	cmp	r3, #10
 8005f98:	d019      	beq.n	8005fce <_putc_r+0x76>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	6022      	str	r2, [r4, #0]
 8005fa0:	701d      	strb	r5, [r3, #0]
 8005fa2:	b2ed      	uxtb	r5, r5
 8005fa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fa6:	07da      	lsls	r2, r3, #31
 8005fa8:	d405      	bmi.n	8005fb6 <_putc_r+0x5e>
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	059b      	lsls	r3, r3, #22
 8005fae:	d402      	bmi.n	8005fb6 <_putc_r+0x5e>
 8005fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fb2:	f7ff fb9c 	bl	80056ee <__retarget_lock_release_recursive>
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <_putc_r+0x88>)
 8005fbc:	429c      	cmp	r4, r3
 8005fbe:	d101      	bne.n	8005fc4 <_putc_r+0x6c>
 8005fc0:	68b4      	ldr	r4, [r6, #8]
 8005fc2:	e7d6      	b.n	8005f72 <_putc_r+0x1a>
 8005fc4:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <_putc_r+0x8c>)
 8005fc6:	429c      	cmp	r4, r3
 8005fc8:	bf08      	it	eq
 8005fca:	68f4      	ldreq	r4, [r6, #12]
 8005fcc:	e7d1      	b.n	8005f72 <_putc_r+0x1a>
 8005fce:	4629      	mov	r1, r5
 8005fd0:	4622      	mov	r2, r4
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f7ff f912 	bl	80051fc <__swbuf_r>
 8005fd8:	4605      	mov	r5, r0
 8005fda:	e7e3      	b.n	8005fa4 <_putc_r+0x4c>
 8005fdc:	08006220 	.word	0x08006220
 8005fe0:	08006240 	.word	0x08006240
 8005fe4:	08006200 	.word	0x08006200

08005fe8 <_sbrk_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4d06      	ldr	r5, [pc, #24]	; (8006004 <_sbrk_r+0x1c>)
 8005fec:	2300      	movs	r3, #0
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	f7fa fe8e 	bl	8000d14 <_sbrk>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_sbrk_r+0x1a>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_sbrk_r+0x1a>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	2000027c 	.word	0x2000027c

08006008 <__sread>:
 8006008:	b510      	push	{r4, lr}
 800600a:	460c      	mov	r4, r1
 800600c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006010:	f000 f8a0 	bl	8006154 <_read_r>
 8006014:	2800      	cmp	r0, #0
 8006016:	bfab      	itete	ge
 8006018:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800601a:	89a3      	ldrhlt	r3, [r4, #12]
 800601c:	181b      	addge	r3, r3, r0
 800601e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006022:	bfac      	ite	ge
 8006024:	6563      	strge	r3, [r4, #84]	; 0x54
 8006026:	81a3      	strhlt	r3, [r4, #12]
 8006028:	bd10      	pop	{r4, pc}

0800602a <__swrite>:
 800602a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602e:	461f      	mov	r7, r3
 8006030:	898b      	ldrh	r3, [r1, #12]
 8006032:	05db      	lsls	r3, r3, #23
 8006034:	4605      	mov	r5, r0
 8006036:	460c      	mov	r4, r1
 8006038:	4616      	mov	r6, r2
 800603a:	d505      	bpl.n	8006048 <__swrite+0x1e>
 800603c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006040:	2302      	movs	r3, #2
 8006042:	2200      	movs	r2, #0
 8006044:	f000 f868 	bl	8006118 <_lseek_r>
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800604e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	4632      	mov	r2, r6
 8006056:	463b      	mov	r3, r7
 8006058:	4628      	mov	r0, r5
 800605a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800605e:	f000 b817 	b.w	8006090 <_write_r>

08006062 <__sseek>:
 8006062:	b510      	push	{r4, lr}
 8006064:	460c      	mov	r4, r1
 8006066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800606a:	f000 f855 	bl	8006118 <_lseek_r>
 800606e:	1c43      	adds	r3, r0, #1
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	bf15      	itete	ne
 8006074:	6560      	strne	r0, [r4, #84]	; 0x54
 8006076:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800607a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800607e:	81a3      	strheq	r3, [r4, #12]
 8006080:	bf18      	it	ne
 8006082:	81a3      	strhne	r3, [r4, #12]
 8006084:	bd10      	pop	{r4, pc}

08006086 <__sclose>:
 8006086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608a:	f000 b813 	b.w	80060b4 <_close_r>
	...

08006090 <_write_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4d07      	ldr	r5, [pc, #28]	; (80060b0 <_write_r+0x20>)
 8006094:	4604      	mov	r4, r0
 8006096:	4608      	mov	r0, r1
 8006098:	4611      	mov	r1, r2
 800609a:	2200      	movs	r2, #0
 800609c:	602a      	str	r2, [r5, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	f7fa fde7 	bl	8000c72 <_write>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_write_r+0x1e>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_write_r+0x1e>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	2000027c 	.word	0x2000027c

080060b4 <_close_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4d06      	ldr	r5, [pc, #24]	; (80060d0 <_close_r+0x1c>)
 80060b8:	2300      	movs	r3, #0
 80060ba:	4604      	mov	r4, r0
 80060bc:	4608      	mov	r0, r1
 80060be:	602b      	str	r3, [r5, #0]
 80060c0:	f7fa fdf3 	bl	8000caa <_close>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <_close_r+0x1a>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	b103      	cbz	r3, 80060ce <_close_r+0x1a>
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	2000027c 	.word	0x2000027c

080060d4 <_fstat_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4d07      	ldr	r5, [pc, #28]	; (80060f4 <_fstat_r+0x20>)
 80060d8:	2300      	movs	r3, #0
 80060da:	4604      	mov	r4, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	4611      	mov	r1, r2
 80060e0:	602b      	str	r3, [r5, #0]
 80060e2:	f7fa fdee 	bl	8000cc2 <_fstat>
 80060e6:	1c43      	adds	r3, r0, #1
 80060e8:	d102      	bne.n	80060f0 <_fstat_r+0x1c>
 80060ea:	682b      	ldr	r3, [r5, #0]
 80060ec:	b103      	cbz	r3, 80060f0 <_fstat_r+0x1c>
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	bd38      	pop	{r3, r4, r5, pc}
 80060f2:	bf00      	nop
 80060f4:	2000027c 	.word	0x2000027c

080060f8 <_isatty_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4d06      	ldr	r5, [pc, #24]	; (8006114 <_isatty_r+0x1c>)
 80060fc:	2300      	movs	r3, #0
 80060fe:	4604      	mov	r4, r0
 8006100:	4608      	mov	r0, r1
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	f7fa fded 	bl	8000ce2 <_isatty>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_isatty_r+0x1a>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_isatty_r+0x1a>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	2000027c 	.word	0x2000027c

08006118 <_lseek_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4d07      	ldr	r5, [pc, #28]	; (8006138 <_lseek_r+0x20>)
 800611c:	4604      	mov	r4, r0
 800611e:	4608      	mov	r0, r1
 8006120:	4611      	mov	r1, r2
 8006122:	2200      	movs	r2, #0
 8006124:	602a      	str	r2, [r5, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	f7fa fde6 	bl	8000cf8 <_lseek>
 800612c:	1c43      	adds	r3, r0, #1
 800612e:	d102      	bne.n	8006136 <_lseek_r+0x1e>
 8006130:	682b      	ldr	r3, [r5, #0]
 8006132:	b103      	cbz	r3, 8006136 <_lseek_r+0x1e>
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	bd38      	pop	{r3, r4, r5, pc}
 8006138:	2000027c 	.word	0x2000027c

0800613c <__malloc_lock>:
 800613c:	4801      	ldr	r0, [pc, #4]	; (8006144 <__malloc_lock+0x8>)
 800613e:	f7ff bad5 	b.w	80056ec <__retarget_lock_acquire_recursive>
 8006142:	bf00      	nop
 8006144:	20000270 	.word	0x20000270

08006148 <__malloc_unlock>:
 8006148:	4801      	ldr	r0, [pc, #4]	; (8006150 <__malloc_unlock+0x8>)
 800614a:	f7ff bad0 	b.w	80056ee <__retarget_lock_release_recursive>
 800614e:	bf00      	nop
 8006150:	20000270 	.word	0x20000270

08006154 <_read_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d07      	ldr	r5, [pc, #28]	; (8006174 <_read_r+0x20>)
 8006158:	4604      	mov	r4, r0
 800615a:	4608      	mov	r0, r1
 800615c:	4611      	mov	r1, r2
 800615e:	2200      	movs	r2, #0
 8006160:	602a      	str	r2, [r5, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	f7fa fd68 	bl	8000c38 <_read>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_read_r+0x1e>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_read_r+0x1e>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	2000027c 	.word	0x2000027c

08006178 <_init>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr

08006184 <_fini>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	bf00      	nop
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr
