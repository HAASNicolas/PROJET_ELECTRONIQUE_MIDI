
CONTROLEUR_MIDI_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006368  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006670  08006670  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006678  08006678  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800667c  0800667c  0001667c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000070  080066f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  080066f0  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199eb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003184  00000000  00000000  00039a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0003cc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001448  00000000  00000000  0003e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000046ee  00000000  00000000  0003f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fa7  00000000  00000000  00043ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dce2f  00000000  00000000  0005cc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139abc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063d8  00000000  00000000  00139b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006530 	.word	0x08006530

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006530 	.word	0x08006530

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	; 0x30
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2220      	movs	r2, #32
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 ff9b 	bl	8005518 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e2:	4b48      	ldr	r3, [pc, #288]	; (8000704 <MX_ADC1_Init+0x140>)
 80005e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ea:	4b46      	ldr	r3, [pc, #280]	; (8000704 <MX_ADC1_Init+0x140>)
 80005ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f2:	4b44      	ldr	r3, [pc, #272]	; (8000704 <MX_ADC1_Init+0x140>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f8:	4b42      	ldr	r3, [pc, #264]	; (8000704 <MX_ADC1_Init+0x140>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005fe:	4b41      	ldr	r3, [pc, #260]	; (8000704 <MX_ADC1_Init+0x140>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000604:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <MX_ADC1_Init+0x140>)
 8000606:	2201      	movs	r2, #1
 8000608:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060a:	4b3e      	ldr	r3, [pc, #248]	; (8000704 <MX_ADC1_Init+0x140>)
 800060c:	2204      	movs	r2, #4
 800060e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000610:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <MX_ADC1_Init+0x140>)
 8000612:	2200      	movs	r2, #0
 8000614:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000616:	4b3b      	ldr	r3, [pc, #236]	; (8000704 <MX_ADC1_Init+0x140>)
 8000618:	2200      	movs	r2, #0
 800061a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800061c:	4b39      	ldr	r3, [pc, #228]	; (8000704 <MX_ADC1_Init+0x140>)
 800061e:	2204      	movs	r2, #4
 8000620:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <MX_ADC1_Init+0x140>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800062a:	4b36      	ldr	r3, [pc, #216]	; (8000704 <MX_ADC1_Init+0x140>)
 800062c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000632:	4b34      	ldr	r3, [pc, #208]	; (8000704 <MX_ADC1_Init+0x140>)
 8000634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063a:	4b32      	ldr	r3, [pc, #200]	; (8000704 <MX_ADC1_Init+0x140>)
 800063c:	2201      	movs	r2, #1
 800063e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000642:	4b30      	ldr	r3, [pc, #192]	; (8000704 <MX_ADC1_Init+0x140>)
 8000644:	2200      	movs	r2, #0
 8000646:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <MX_ADC1_Init+0x140>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	482c      	ldr	r0, [pc, #176]	; (8000704 <MX_ADC1_Init+0x140>)
 8000652:	f000 ff3f 	bl	80014d4 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800065c:	f000 fa47 	bl	8000aee <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000668:	4619      	mov	r1, r3
 800066a:	4826      	ldr	r0, [pc, #152]	; (8000704 <MX_ADC1_Init+0x140>)
 800066c:	f002 f904 	bl	8002878 <HAL_ADCEx_MultiModeConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000676:	f000 fa3a 	bl	8000aee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_ADC1_Init+0x144>)
 800067c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067e:	2306      	movs	r3, #6
 8000680:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000682:	2305      	movs	r3, #5
 8000684:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000686:	237f      	movs	r3, #127	; 0x7f
 8000688:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068a:	2304      	movs	r3, #4
 800068c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	481b      	ldr	r0, [pc, #108]	; (8000704 <MX_ADC1_Init+0x140>)
 8000698:	f001 fb8c 	bl	8001db4 <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006a2:	f000 fa24 	bl	8000aee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ADC1_Init+0x148>)
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006aa:	230c      	movs	r3, #12
 80006ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_ADC1_Init+0x140>)
 80006b4:	f001 fb7e 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006be:	f000 fa16 	bl	8000aee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_ADC1_Init+0x14c>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006c6:	2312      	movs	r3, #18
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_ADC1_Init+0x140>)
 80006d0:	f001 fb70 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80006da:	f000 fa08 	bl	8000aee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_ADC1_Init+0x150>)
 80006e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006e2:	2318      	movs	r3, #24
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_ADC1_Init+0x140>)
 80006ec:	f001 fb62 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80006f6:	f000 f9fa 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3730      	adds	r7, #48	; 0x30
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000008c 	.word	0x2000008c
 8000708:	04300002 	.word	0x04300002
 800070c:	08600004 	.word	0x08600004
 8000710:	2a000400 	.word	0x2a000400
 8000714:	3ef08000 	.word	0x3ef08000

08000718 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09c      	sub	sp, #112	; 0x70
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000730:	f107 0318 	add.w	r3, r7, #24
 8000734:	2244      	movs	r2, #68	; 0x44
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f004 feed 	bl	8005518 <memset>
  if(adcHandle->Instance==ADC1)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000746:	f040 8098 	bne.w	800087a <HAL_ADC_MspInit+0x162>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800074a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800074e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000750:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000754:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fc1e 	bl	8003f9c <HAL_RCCEx_PeriphCLKConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000766:	f000 f9c2 	bl	8000aee <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800076a:	4b46      	ldr	r3, [pc, #280]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a45      	ldr	r2, [pc, #276]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 8000770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b43      	ldr	r3, [pc, #268]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000782:	4b40      	ldr	r3, [pc, #256]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a3f      	ldr	r2, [pc, #252]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 8000788:	f043 0320 	orr.w	r3, r3, #32
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a39      	ldr	r2, [pc, #228]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b34      	ldr	r3, [pc, #208]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a33      	ldr	r2, [pc, #204]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <HAL_ADC_MspInit+0x16c>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
    PF0-OSC_IN     ------> ADC1_IN10
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ca:	2301      	movs	r3, #1
 80007cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ce:	2303      	movs	r3, #3
 80007d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007da:	4619      	mov	r1, r3
 80007dc:	482a      	ldr	r0, [pc, #168]	; (8000888 <HAL_ADC_MspInit+0x170>)
 80007de:	f002 fc71 	bl	80030c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007e2:	2303      	movs	r3, #3
 80007e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e6:	2303      	movs	r3, #3
 80007e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f002 fc64 	bl	80030c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007fc:	2301      	movs	r3, #1
 80007fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000800:	2303      	movs	r3, #3
 8000802:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800080c:	4619      	mov	r1, r3
 800080e:	481f      	ldr	r0, [pc, #124]	; (800088c <HAL_ADC_MspInit+0x174>)
 8000810:	f002 fc58 	bl	80030c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <HAL_ADC_MspInit+0x178>)
 8000816:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <HAL_ADC_MspInit+0x17c>)
 8000818:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <HAL_ADC_MspInit+0x178>)
 800081c:	2205      	movs	r2, #5
 800081e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <HAL_ADC_MspInit+0x178>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <HAL_ADC_MspInit+0x178>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_ADC_MspInit+0x178>)
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_ADC_MspInit+0x178>)
 8000834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000838:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_ADC_MspInit+0x178>)
 800083c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000840:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <HAL_ADC_MspInit+0x178>)
 8000844:	2220      	movs	r2, #32
 8000846:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_ADC_MspInit+0x178>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800084e:	4810      	ldr	r0, [pc, #64]	; (8000890 <HAL_ADC_MspInit+0x178>)
 8000850:	f002 f9c6 	bl	8002be0 <HAL_DMA_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 800085a:	f000 f948 	bl	8000aee <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <HAL_ADC_MspInit+0x178>)
 8000862:	655a      	str	r2, [r3, #84]	; 0x54
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <HAL_ADC_MspInit+0x178>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	2012      	movs	r0, #18
 8000870:	f002 f981 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000874:	2012      	movs	r0, #18
 8000876:	f002 f998 	bl	8002baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800087a:	bf00      	nop
 800087c:	3770      	adds	r7, #112	; 0x70
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000
 8000888:	48001400 	.word	0x48001400
 800088c:	48000400 	.word	0x48000400
 8000890:	200000f8 	.word	0x200000f8
 8000894:	40020008 	.word	0x40020008

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_DMA_Init+0x50>)
 80008a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <MX_DMA_Init+0x50>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6493      	str	r3, [r2, #72]	; 0x48
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_DMA_Init+0x50>)
 80008ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_DMA_Init+0x50>)
 80008b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <MX_DMA_Init+0x50>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6493      	str	r3, [r2, #72]	; 0x48
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_DMA_Init+0x50>)
 80008c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	200b      	movs	r0, #11
 80008d4:	f002 f94f 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008d8:	200b      	movs	r0, #11
 80008da:	f002 f966 	bl	8002baa <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_GPIO_Init+0x90>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a1d      	ldr	r2, [pc, #116]	; (800097c <MX_GPIO_Init+0x90>)
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_GPIO_Init+0x90>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0320 	and.w	r3, r3, #32
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_GPIO_Init+0x90>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a17      	ldr	r2, [pc, #92]	; (800097c <MX_GPIO_Init+0x90>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_GPIO_Init+0x90>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_GPIO_Init+0x90>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a11      	ldr	r2, [pc, #68]	; (800097c <MX_GPIO_Init+0x90>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_GPIO_Init+0x90>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <MX_GPIO_Init+0x94>)
 8000952:	f002 fd39 	bl	80033c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4619      	mov	r1, r3
 800096e:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_GPIO_Init+0x94>)
 8000970:	f002 fba8 	bl	80030c4 <HAL_GPIO_Init>

}
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40021000 	.word	0x40021000
 8000980:	48000400 	.word	0x48000400

08000984 <__io_putchar>:
// * Ouvrir un terminal
// * Taper la ligne suivante : minicom -D /dev/ttyACM0
// * Pour quitter : Ctrl+A puis Q

int __io_putchar(int chr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &chr, 1, HAL_MAX_DELAY);
 800098c:	1d39      	adds	r1, r7, #4
 800098e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000992:	2201      	movs	r2, #1
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <__io_putchar+0x20>)
 8000996:	f003 ff19 	bl	80047cc <HAL_UART_Transmit>

	return chr;
 800099a:	687b      	ldr	r3, [r7, #4]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200001ac 	.word	0x200001ac

080009a8 <HAL_ADC_ConvCpltCallback>:

int adc_available = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	adc_available = 1;
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000158 	.word	0x20000158

080009c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009ce:	f000 fad0 	bl	8000f72 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009d2:	f000 f841 	bl	8000a58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009d6:	f7ff ff89 	bl	80008ec <MX_GPIO_Init>
	MX_DMA_Init();
 80009da:	f7ff ff5d 	bl	8000898 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80009de:	f000 f9fb 	bl	8000dd8 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80009e2:	f7ff fdef 	bl	80005c4 <MX_ADC1_Init>
	MX_TIM6_Init();
 80009e6:	f000 f99f 	bl	8000d28 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	printf("=====================================================================\r\n");
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <main+0x78>)
 80009ec:	f004 fe22 	bl	8005634 <puts>
	uint16_t adc_tab[4];
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_tab, 4);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2204      	movs	r2, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4813      	ldr	r0, [pc, #76]	; (8000a44 <main+0x7c>)
 80009f8:	f000 fef0 	bl	80017dc <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 80009fc:	4812      	ldr	r0, [pc, #72]	; (8000a48 <main+0x80>)
 80009fe:	f003 fd15 	bl	800442c <HAL_TIM_Base_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (adc_available == 1)
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <main+0x84>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d1fb      	bne.n	8000a02 <main+0x3a>
		{
			adc_available = 0;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <main+0x84>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
			for(int itr = 0 ; itr < 4 ; itr++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	e00c      	b.n	8000a30 <main+0x68>
			{
				printf("%u\t", adc_tab[itr]);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	3310      	adds	r3, #16
 8000a1c:	443b      	add	r3, r7
 8000a1e:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000a22:	4619      	mov	r1, r3
 8000a24:	480a      	ldr	r0, [pc, #40]	; (8000a50 <main+0x88>)
 8000a26:	f004 fd7f 	bl	8005528 <iprintf>
			for(int itr = 0 ; itr < 4 ; itr++)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	ddef      	ble.n	8000a16 <main+0x4e>
			}
			printf("\r\n");
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <main+0x8c>)
 8000a38:	f004 fdfc 	bl	8005634 <puts>
		if (adc_available == 1)
 8000a3c:	e7e1      	b.n	8000a02 <main+0x3a>
 8000a3e:	bf00      	nop
 8000a40:	08006548 	.word	0x08006548
 8000a44:	2000008c 	.word	0x2000008c
 8000a48:	20000160 	.word	0x20000160
 8000a4c:	20000158 	.word	0x20000158
 8000a50:	08006590 	.word	0x08006590
 8000a54:	08006594 	.word	0x08006594

08000a58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	; 0x50
 8000a5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	2238      	movs	r2, #56	; 0x38
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 fd56 	bl	8005518 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f002 fcbc 	bl	80033f8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8a:	2340      	movs	r3, #64	; 0x40
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a92:	2302      	movs	r3, #2
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a96:	2304      	movs	r3, #4
 8000a98:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000a9a:	2355      	movs	r3, #85	; 0x55
 8000a9c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aaa:	f107 0318 	add.w	r3, r7, #24
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fd46 	bl	8003540 <HAL_RCC_OscConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000aba:	f000 f818 	bl	8000aee <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abe:	230f      	movs	r3, #15
 8000ac0:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 f844 	bl	8003b64 <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000ae2:	f000 f804 	bl	8000aee <Error_Handler>
	}
}
 8000ae6:	bf00      	nop
 8000ae8:	3750      	adds	r7, #80	; 0x50
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af2:	b672      	cpsid	i
}
 8000af4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000af6:	e7fe      	b.n	8000af6 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6593      	str	r3, [r2, #88]	; 0x58
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 fa44 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <DMA1_Channel1_IRQHandler+0x10>)
 8000b9a:	f002 f944 	bl	8002e26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200000f8 	.word	0x200000f8

08000ba8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <ADC1_2_IRQHandler+0x10>)
 8000bae:	f000 fec9 	bl	8001944 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000008c 	.word	0x2000008c

08000bbc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e00a      	b.n	8000be4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bce:	f3af 8000 	nop.w
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60ba      	str	r2, [r7, #8]
 8000bda:	b2ca      	uxtb	r2, r1
 8000bdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbf0      	blt.n	8000bce <_read+0x12>
  }

  return len;
 8000bec:	687b      	ldr	r3, [r7, #4]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e009      	b.n	8000c1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	60ba      	str	r2, [r7, #8]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff feb7 	bl	8000984 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf1      	blt.n	8000c08 <_write+0x12>
  }
  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_close>:

int _close(int file)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c56:	605a      	str	r2, [r3, #4]
  return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_isatty>:

int _isatty(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f004 fbfc 	bl	80054c4 <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <_sbrk+0x64>)
 8000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20008000 	.word	0x20008000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	2000015c 	.word	0x2000015c
 8000d00:	20000258 	.word	0x20000258

08000d04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_TIM6_Init+0x68>)
 8000d3a:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <MX_TIM6_Init+0x6c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_TIM6_Init+0x68>)
 8000d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d44:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_TIM6_Init+0x68>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 17000;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_TIM6_Init+0x68>)
 8000d4e:	f244 2268 	movw	r2, #17000	; 0x4268
 8000d52:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_TIM6_Init+0x68>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_TIM6_Init+0x68>)
 8000d5c:	f003 fb0e 	bl	800437c <HAL_TIM_Base_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d66:	f7ff fec2 	bl	8000aee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d6a:	2320      	movs	r3, #32
 8000d6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <MX_TIM6_Init+0x68>)
 8000d78:	f003 fc56 	bl	8004628 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d82:	f7ff feb4 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000160 	.word	0x20000160
 8000d94:	40001000 	.word	0x40001000

08000d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_TIM_Base_MspInit+0x38>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10b      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <HAL_TIM_Base_MspInit+0x3c>)
 8000db0:	f043 0310 	orr.w	r3, r3, #16
 8000db4:	6593      	str	r3, [r2, #88]	; 0x58
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <HAL_TIM_Base_MspInit+0x3c>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40001000 	.word	0x40001000
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000dde:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <MX_USART2_UART_Init+0x94>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e20:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000e22:	f003 fc83 	bl	800472c <HAL_UART_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e2c:	f7ff fe5f 	bl	8000aee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e30:	2100      	movs	r1, #0
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000e34:	f004 fa7c 	bl	8005330 <HAL_UARTEx_SetTxFifoThreshold>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e3e:	f7ff fe56 	bl	8000aee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e42:	2100      	movs	r1, #0
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000e46:	f004 fab1 	bl	80053ac <HAL_UARTEx_SetRxFifoThreshold>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e50:	f7ff fe4d 	bl	8000aee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_USART2_UART_Init+0x90>)
 8000e56:	f004 fa32 	bl	80052be <HAL_UARTEx_DisableFifoMode>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e60:	f7ff fe45 	bl	8000aee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001ac 	.word	0x200001ac
 8000e6c:	40004400 	.word	0x40004400

08000e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b09a      	sub	sp, #104	; 0x68
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2244      	movs	r2, #68	; 0x44
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 fb41 	bl	8005518 <memset>
  if(uartHandle->Instance==USART2)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <HAL_UART_MspInit+0xa8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d136      	bne.n	8000f0e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 f875 	bl	8003f9c <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb8:	f7ff fe19 	bl	8000aee <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec0:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000eec:	230c      	movs	r3, #12
 8000eee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000efc:	2307      	movs	r3, #7
 8000efe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f002 f8db 	bl	80030c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3768      	adds	r7, #104	; 0x68
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40021000 	.word	0x40021000

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff feee 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f004 fabf 	bl	80054d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff fd39 	bl	80009c8 <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   r0, =_estack
 8000f58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f64:	08006680 	.word	0x08006680
  ldr r2, =_sbss
 8000f68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f6c:	20000254 	.word	0x20000254

08000f70 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <COMP1_2_3_IRQHandler>

08000f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f001 fdef 	bl	8002b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f80e 	bl	8000fa4 <HAL_InitTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	e001      	b.n	8000f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f94:	f7ff fdb0 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f98:	79fb      	ldrb	r3, [r7, #7]

}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_InitTick+0x68>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d022      	beq.n	8000ffe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_InitTick+0x6c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <HAL_InitTick+0x68>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fdfa 	bl	8002bc6 <HAL_SYSTICK_Config>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10f      	bne.n	8000ff8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b0f      	cmp	r3, #15
 8000fdc:	d809      	bhi.n	8000ff2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe6:	f001 fdc6 	bl	8002b76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_InitTick+0x70>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e007      	b.n	8001002 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e004      	b.n	8001002 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e001      	b.n	8001002 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000008 	.word	0x20000008
 8001010:	20000000 	.word	0x20000000
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x1c>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_IncTick+0x20>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4413      	add	r3, r2
 8001026:	4a03      	ldr	r2, [pc, #12]	; (8001034 <HAL_IncTick+0x1c>)
 8001028:	6013      	str	r3, [r2, #0]
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	20000240 	.word	0x20000240
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <HAL_GetTick+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000240 	.word	0x20000240

08001054 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	609a      	str	r2, [r3, #8]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3360      	adds	r3, #96	; 0x60
 80010ce:	461a      	mov	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <LL_ADC_SetOffset+0x44>)
 80010de:	4013      	ands	r3, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	4313      	orrs	r3, r2
 80010ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010f4:	bf00      	nop
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	03fff000 	.word	0x03fff000

08001104 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3360      	adds	r3, #96	; 0x60
 8001112:	461a      	mov	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3360      	adds	r3, #96	; 0x60
 8001140:	461a      	mov	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	431a      	orrs	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800115a:	bf00      	nop
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001166:	b480      	push	{r7}
 8001168:	b087      	sub	sp, #28
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3360      	adds	r3, #96	; 0x60
 8001176:	461a      	mov	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	431a      	orrs	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001190:	bf00      	nop
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3360      	adds	r3, #96	; 0x60
 80011ac:	461a      	mov	r2, r3
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	431a      	orrs	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80011c6:	bf00      	nop
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	615a      	str	r2, [r3, #20]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800121e:	b480      	push	{r7}
 8001220:	b087      	sub	sp, #28
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3330      	adds	r3, #48	; 0x30
 800122e:	461a      	mov	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	0a1b      	lsrs	r3, r3, #8
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	4413      	add	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	f003 031f 	and.w	r3, r3, #31
 8001248:	211f      	movs	r1, #31
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	401a      	ands	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	0e9b      	lsrs	r3, r3, #26
 8001256:	f003 011f 	and.w	r1, r3, #31
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	f003 031f 	and.w	r3, r3, #31
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	431a      	orrs	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800126a:	bf00      	nop
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3314      	adds	r3, #20
 80012ac:	461a      	mov	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	0e5b      	lsrs	r3, r3, #25
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	0d1b      	lsrs	r3, r3, #20
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	2107      	movs	r1, #7
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	401a      	ands	r2, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	0d1b      	lsrs	r3, r3, #20
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800130c:	43db      	mvns	r3, r3
 800130e:	401a      	ands	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0318 	and.w	r3, r3, #24
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001318:	40d9      	lsrs	r1, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	400b      	ands	r3, r1
 800131e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001322:	431a      	orrs	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	0007ffff 	.word	0x0007ffff

0800133c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 031f 	and.w	r3, r3, #31
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6093      	str	r3, [r2, #8]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ac:	d101      	bne.n	80013b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013fc:	d101      	bne.n	8001402 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001424:	f043 0201 	orr.w	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <LL_ADC_IsEnabled+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_IsEnabled+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800146e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001472:	f043 0204 	orr.w	r2, r3, #4
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b04      	cmp	r3, #4
 8001498:	d101      	bne.n	800149e <LL_ADC_REG_IsConversionOngoing+0x18>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d101      	bne.n	80014c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e167      	b.n	80017be <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d109      	bne.n	8001510 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff f90b 	bl	8000718 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff3f 	bl	8001398 <LL_ADC_IsDeepPowerDownEnabled>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff25 	bl	8001374 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff5a 	bl	80013e8 <LL_ADC_IsInternalRegulatorEnabled>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d115      	bne.n	8001566 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff3e 	bl	80013c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001544:	4ba0      	ldr	r3, [pc, #640]	; (80017c8 <HAL_ADC_Init+0x2f4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	099b      	lsrs	r3, r3, #6
 800154a:	4aa0      	ldr	r2, [pc, #640]	; (80017cc <HAL_ADC_Init+0x2f8>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	3301      	adds	r3, #1
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001558:	e002      	b.n	8001560 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3b01      	subs	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f9      	bne.n	800155a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff3c 	bl	80013e8 <LL_ADC_IsInternalRegulatorEnabled>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10d      	bne.n	8001592 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157a:	f043 0210 	orr.w	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff75 	bl	8001486 <LL_ADC_REG_IsConversionOngoing>
 800159c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 8100 	bne.w	80017ac <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 80fc 	bne.w	80017ac <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015bc:	f043 0202 	orr.w	r2, r3, #2
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff35 	bl	8001438 <LL_ADC_IsEnabled>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d111      	bne.n	80015f8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015d8:	f7ff ff2e 	bl	8001438 <LL_ADC_IsEnabled>
 80015dc:	4604      	mov	r4, r0
 80015de:	487c      	ldr	r0, [pc, #496]	; (80017d0 <HAL_ADC_Init+0x2fc>)
 80015e0:	f7ff ff2a 	bl	8001438 <LL_ADC_IsEnabled>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4323      	orrs	r3, r4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d105      	bne.n	80015f8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4878      	ldr	r0, [pc, #480]	; (80017d4 <HAL_ADC_Init+0x300>)
 80015f4:	f7ff fd2e 	bl	8001054 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7f5b      	ldrb	r3, [r3, #29]
 80015fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001602:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001608:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800160e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001616:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001622:	2b01      	cmp	r3, #1
 8001624:	d106      	bne.n	8001634 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	3b01      	subs	r3, #1
 800162c:	045b      	lsls	r3, r3, #17
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	2b00      	cmp	r3, #0
 800163a:	d009      	beq.n	8001650 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	4b60      	ldr	r3, [pc, #384]	; (80017d8 <HAL_ADC_Init+0x304>)
 8001658:	4013      	ands	r3, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	69b9      	ldr	r1, [r7, #24]
 8001660:	430b      	orrs	r3, r1
 8001662:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff14 	bl	80014ac <LL_ADC_INJ_IsConversionOngoing>
 8001684:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d16d      	bne.n	8001768 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d16a      	bne.n	8001768 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001696:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800169e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016ae:	f023 0302 	bic.w	r3, r3, #2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d017      	beq.n	80016f4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6911      	ldr	r1, [r2, #16]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80016f2:	e013      	b.n	800171c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001702:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001714:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001718:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001722:	2b01      	cmp	r3, #1
 8001724:	d118      	bne.n	8001758 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800173c:	4311      	orrs	r1, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001748:	430a      	orrs	r2, r1
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0201 	orr.w	r2, r2, #1
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	e007      	b.n	8001768 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d10c      	bne.n	800178a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f023 010f 	bic.w	r1, r3, #15
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	1e5a      	subs	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	631a      	str	r2, [r3, #48]	; 0x30
 8001788:	e007      	b.n	800179a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 020f 	bic.w	r2, r2, #15
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179e:	f023 0303 	bic.w	r3, r3, #3
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80017aa:	e007      	b.n	80017bc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	f043 0210 	orr.w	r2, r3, #16
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000000 	.word	0x20000000
 80017cc:	053e2d63 	.word	0x053e2d63
 80017d0:	50000100 	.word	0x50000100
 80017d4:	50000300 	.word	0x50000300
 80017d8:	fff04007 	.word	0xfff04007

080017dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017e8:	4851      	ldr	r0, [pc, #324]	; (8001930 <HAL_ADC_Start_DMA+0x154>)
 80017ea:	f7ff fda7 	bl	800133c <LL_ADC_GetMultimode>
 80017ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe46 	bl	8001486 <LL_ADC_REG_IsConversionOngoing>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 808f 	bne.w	8001920 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_Start_DMA+0x34>
 800180c:	2302      	movs	r3, #2
 800180e:	e08a      	b.n	8001926 <HAL_ADC_Start_DMA+0x14a>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d002      	beq.n	800182a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	2b09      	cmp	r3, #9
 8001828:	d173      	bne.n	8001912 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 feb2 	bl	8002594 <ADC_Enable>
 8001830:	4603      	mov	r3, r0
 8001832:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d166      	bne.n	8001908 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a38      	ldr	r2, [pc, #224]	; (8001934 <HAL_ADC_Start_DMA+0x158>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d002      	beq.n	800185e <HAL_ADC_Start_DMA+0x82>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	e001      	b.n	8001862 <HAL_ADC_Start_DMA+0x86>
 800185e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	4293      	cmp	r3, r2
 8001868:	d002      	beq.n	8001870 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d105      	bne.n	800187c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001874:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188c:	f023 0206 	bic.w	r2, r3, #6
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	661a      	str	r2, [r3, #96]	; 0x60
 8001894:	e002      	b.n	800189c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a0:	4a25      	ldr	r2, [pc, #148]	; (8001938 <HAL_ADC_Start_DMA+0x15c>)
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a8:	4a24      	ldr	r2, [pc, #144]	; (800193c <HAL_ADC_Start_DMA+0x160>)
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b0:	4a23      	ldr	r2, [pc, #140]	; (8001940 <HAL_ADC_Start_DMA+0x164>)
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	221c      	movs	r2, #28
 80018ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0210 	orr.w	r2, r2, #16
 80018d2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3340      	adds	r3, #64	; 0x40
 80018ee:	4619      	mov	r1, r3
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f001 fa1c 	bl	8002d30 <HAL_DMA_Start_IT>
 80018f8:	4603      	mov	r3, r0
 80018fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fdac 	bl	800145e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001906:	e00d      	b.n	8001924 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001910:	e008      	b.n	8001924 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800191e:	e001      	b.n	8001924 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001920:	2302      	movs	r3, #2
 8001922:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001924:	7dfb      	ldrb	r3, [r7, #23]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	50000300 	.word	0x50000300
 8001934:	50000100 	.word	0x50000100
 8001938:	080026a1 	.word	0x080026a1
 800193c:	08002779 	.word	0x08002779
 8001940:	08002795 	.word	0x08002795

08001944 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001960:	4883      	ldr	r0, [pc, #524]	; (8001b70 <HAL_ADC_IRQHandler+0x22c>)
 8001962:	f7ff fceb 	bl	800133c <LL_ADC_GetMultimode>
 8001966:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d017      	beq.n	80019a2 <HAL_ADC_IRQHandler+0x5e>
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d012      	beq.n	80019a2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 ff65 	bl	8002864 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2202      	movs	r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x72>
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10a      	bne.n	80019cc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8085 	beq.w	8001acc <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d07f      	beq.n	8001acc <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fc05 	bl	80011f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d064      	beq.n	8001abe <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a5e      	ldr	r2, [pc, #376]	; (8001b74 <HAL_ADC_IRQHandler+0x230>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d002      	beq.n	8001a04 <HAL_ADC_IRQHandler+0xc0>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	e001      	b.n	8001a08 <HAL_ADC_IRQHandler+0xc4>
 8001a04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d008      	beq.n	8001a22 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	d002      	beq.n	8001a22 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b09      	cmp	r3, #9
 8001a20:	d104      	bne.n	8001a2c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	623b      	str	r3, [r7, #32]
 8001a2a:	e00d      	b.n	8001a48 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_ADC_IRQHandler+0x230>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d002      	beq.n	8001a3c <HAL_ADC_IRQHandler+0xf8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	e001      	b.n	8001a40 <HAL_ADC_IRQHandler+0xfc>
 8001a3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a40:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d135      	bne.n	8001abe <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d12e      	bne.n	8001abe <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fd0e 	bl	8001486 <LL_ADC_REG_IsConversionOngoing>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d11a      	bne.n	8001aa6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 020c 	bic.w	r2, r2, #12
 8001a7e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d112      	bne.n	8001abe <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aa4:	e00b      	b.n	8001abe <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aaa:	f043 0210 	orr.w	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	f043 0201 	orr.w	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7fe ff72 	bl	80009a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	220c      	movs	r2, #12
 8001aca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0320 	and.w	r3, r3, #32
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_ADC_IRQHandler+0x19c>
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10b      	bne.n	8001af8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 809e 	beq.w	8001c28 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8098 	beq.w	8001c28 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fbae 	bl	8001276 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b1a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fb69 	bl	80011f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b26:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a11      	ldr	r2, [pc, #68]	; (8001b74 <HAL_ADC_IRQHandler+0x230>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d002      	beq.n	8001b38 <HAL_ADC_IRQHandler+0x1f4>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e001      	b.n	8001b3c <HAL_ADC_IRQHandler+0x1f8>
 8001b38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d008      	beq.n	8001b56 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b06      	cmp	r3, #6
 8001b4e:	d002      	beq.n	8001b56 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b07      	cmp	r3, #7
 8001b54:	d104      	bne.n	8001b60 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	e011      	b.n	8001b84 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_ADC_IRQHandler+0x230>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d006      	beq.n	8001b78 <HAL_ADC_IRQHandler+0x234>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	e005      	b.n	8001b7c <HAL_ADC_IRQHandler+0x238>
 8001b70:	50000300 	.word	0x50000300
 8001b74:	50000100 	.word	0x50000100
 8001b78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b7c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d047      	beq.n	8001c1a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0x260>
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d03f      	beq.n	8001c1a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d13a      	bne.n	8001c1a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bae:	2b40      	cmp	r3, #64	; 0x40
 8001bb0:	d133      	bne.n	8001c1a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d12e      	bne.n	8001c1a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fc73 	bl	80014ac <LL_ADC_INJ_IsConversionOngoing>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d11a      	bne.n	8001c02 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bda:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d112      	bne.n	8001c1a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c00:	e00b      	b.n	8001c1a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	f043 0210 	orr.w	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fdfa 	bl	8002814 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2260      	movs	r2, #96	; 0x60
 8001c26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d011      	beq.n	8001c56 <HAL_ADC_IRQHandler+0x312>
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00c      	beq.n	8001c56 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f89f 	bl	8001d8c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d012      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x342>
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fde0 	bl	800283c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d012      	beq.n	8001cb6 <HAL_ADC_IRQHandler+0x372>
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00d      	beq.n	8001cb6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fdd2 	bl	8002850 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d036      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x3ea>
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d031      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd6:	e014      	b.n	8001d02 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cde:	4825      	ldr	r0, [pc, #148]	; (8001d74 <HAL_ADC_IRQHandler+0x430>)
 8001ce0:	f7ff fb3a 	bl	8001358 <LL_ADC_GetMultiDMATransfer>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001cea:	2301      	movs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	e008      	b.n	8001d02 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d10e      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d18:	f043 0202 	orr.w	r2, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f83d 	bl	8001da0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d018      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x426>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d013      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	f043 0208 	orr.w	r2, r3, #8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d62:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fd5f 	bl	8002828 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	50000300 	.word	0x50000300

08001d78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b0b6      	sub	sp, #216	; 0xd8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x22>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e3c8      	b.n	8002568 <HAL_ADC_ConfigChannel+0x7b4>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fb4f 	bl	8001486 <LL_ADC_REG_IsConversionOngoing>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 83ad 	bne.w	800254a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f7ff fa0e 	bl	800121e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fb3d 	bl	8001486 <LL_ADC_REG_IsConversionOngoing>
 8001e0c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fb49 	bl	80014ac <LL_ADC_INJ_IsConversionOngoing>
 8001e1a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 81d9 	bne.w	80021da <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 81d4 	bne.w	80021da <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e3a:	d10f      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2200      	movs	r2, #0
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7ff fa28 	bl	800129c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f9bc 	bl	80011d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001e5a:	e00e      	b.n	8001e7a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6819      	ldr	r1, [r3, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f7ff fa17 	bl	800129c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff f9ac 	bl	80011d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d022      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6919      	ldr	r1, [r3, #16]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eac:	f7ff f906 	bl	80010bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6919      	ldr	r1, [r3, #16]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f7ff f952 	bl	8001166 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x124>
 8001ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed6:	e000      	b.n	8001eda <HAL_ADC_ConfigChannel+0x126>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	461a      	mov	r2, r3
 8001edc:	f7ff f95e 	bl	800119c <LL_ADC_SetOffsetSaturation>
 8001ee0:	e17b      	b.n	80021da <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f90b 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x15a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f900 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	e01e      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x198>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff f8f5 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001f3c:	2320      	movs	r3, #32
 8001f3e:	e004      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001f40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x1b0>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0e9b      	lsrs	r3, r3, #26
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	e018      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x1e2>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001f88:	2320      	movs	r3, #32
 8001f8a:	e004      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001f8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d106      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f8c4 	bl	8001130 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2101      	movs	r1, #1
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f8a8 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x220>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff f89d 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	0e9b      	lsrs	r3, r3, #26
 8001fce:	f003 021f 	and.w	r2, r3, #31
 8001fd2:	e01e      	b.n	8002012 <HAL_ADC_ConfigChannel+0x25e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f892 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ffa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002002:	2320      	movs	r3, #32
 8002004:	e004      	b.n	8002010 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <HAL_ADC_ConfigChannel+0x276>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	e018      	b.n	800205c <HAL_ADC_ConfigChannel+0x2a8>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800203e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002046:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800204e:	2320      	movs	r3, #32
 8002050:	e004      	b.n	800205c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800205c:	429a      	cmp	r2, r3
 800205e:	d106      	bne.n	800206e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	2101      	movs	r1, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f861 	bl	8001130 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2102      	movs	r1, #2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff f845 	bl	8001104 <LL_ADC_GetOffsetChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <HAL_ADC_ConfigChannel+0x2e6>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2102      	movs	r1, #2
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f83a 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8002090:	4603      	mov	r3, r0
 8002092:	0e9b      	lsrs	r3, r3, #26
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	e01e      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x324>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2102      	movs	r1, #2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff f82f 	bl	8001104 <LL_ADC_GetOffsetChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80020c8:	2320      	movs	r3, #32
 80020ca:	e004      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80020cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x33c>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0e9b      	lsrs	r3, r3, #26
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	e016      	b.n	800211e <HAL_ADC_ConfigChannel+0x36a>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002110:	2320      	movs	r3, #32
 8002112:	e004      	b.n	800211e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800211e:	429a      	cmp	r2, r3
 8002120:	d106      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2200      	movs	r2, #0
 8002128:	2102      	movs	r1, #2
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f800 	bl	8001130 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2103      	movs	r1, #3
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe ffe4 	bl	8001104 <LL_ADC_GetOffsetChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10a      	bne.n	800215c <HAL_ADC_ConfigChannel+0x3a8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2103      	movs	r1, #3
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe ffd9 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	f003 021f 	and.w	r2, r3, #31
 800215a:	e017      	b.n	800218c <HAL_ADC_ConfigChannel+0x3d8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2103      	movs	r1, #3
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe ffce 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002176:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e003      	b.n	800218a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x3f0>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	e011      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x414>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80021bc:	2320      	movs	r3, #32
 80021be:	e003      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80021c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d106      	bne.n	80021da <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2200      	movs	r2, #0
 80021d2:	2103      	movs	r1, #3
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe ffab 	bl	8001130 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f92a 	bl	8001438 <LL_ADC_IsEnabled>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 8140 	bne.w	800246c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	461a      	mov	r2, r3
 80021fa:	f7ff f87b 	bl	80012f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	4a8f      	ldr	r2, [pc, #572]	; (8002440 <HAL_ADC_ConfigChannel+0x68c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	f040 8131 	bne.w	800246c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10b      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x47e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0e9b      	lsrs	r3, r3, #26
 8002220:	3301      	adds	r3, #1
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	2b09      	cmp	r3, #9
 8002228:	bf94      	ite	ls
 800222a:	2301      	movls	r3, #1
 800222c:	2300      	movhi	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	e019      	b.n	8002266 <HAL_ADC_ConfigChannel+0x4b2>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002242:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e003      	b.n	8002256 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800224e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3301      	adds	r3, #1
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	2b09      	cmp	r3, #9
 800225e:	bf94      	ite	ls
 8002260:	2301      	movls	r3, #1
 8002262:	2300      	movhi	r3, #0
 8002264:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002266:	2b00      	cmp	r3, #0
 8002268:	d079      	beq.n	800235e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002272:	2b00      	cmp	r3, #0
 8002274:	d107      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x4d2>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	3301      	adds	r3, #1
 800227e:	069b      	lsls	r3, r3, #26
 8002280:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002284:	e015      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x4fe>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002296:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800229e:	2320      	movs	r3, #32
 80022a0:	e003      	b.n	80022aa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80022a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	069b      	lsls	r3, r3, #26
 80022ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x51e>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0e9b      	lsrs	r3, r3, #26
 80022c4:	3301      	adds	r3, #1
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2101      	movs	r1, #1
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	e017      	b.n	8002302 <HAL_ADC_ConfigChannel+0x54e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80022e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80022e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80022ea:	2320      	movs	r3, #32
 80022ec:	e003      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80022ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2101      	movs	r1, #1
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	ea42 0103 	orr.w	r1, r2, r3
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10a      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x574>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0e9b      	lsrs	r3, r3, #26
 8002318:	3301      	adds	r3, #1
 800231a:	f003 021f 	and.w	r2, r3, #31
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	051b      	lsls	r3, r3, #20
 8002326:	e018      	b.n	800235a <HAL_ADC_ConfigChannel+0x5a6>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002338:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800233a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002340:	2320      	movs	r3, #32
 8002342:	e003      	b.n	800234c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	3301      	adds	r3, #1
 800234e:	f003 021f 	and.w	r2, r3, #31
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235a:	430b      	orrs	r3, r1
 800235c:	e081      	b.n	8002462 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <HAL_ADC_ConfigChannel+0x5c6>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	3301      	adds	r3, #1
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002378:	e015      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x5f2>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e003      	b.n	800239e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	069b      	lsls	r3, r3, #26
 80023a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x612>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0e9b      	lsrs	r3, r3, #26
 80023b8:	3301      	adds	r3, #1
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	2101      	movs	r1, #1
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	e017      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x642>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	61fb      	str	r3, [r7, #28]
  return result;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	ea42 0103 	orr.w	r1, r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x66e>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0e9b      	lsrs	r3, r3, #26
 800240c:	3301      	adds	r3, #1
 800240e:	f003 021f 	and.w	r2, r3, #31
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	3b1e      	subs	r3, #30
 800241a:	051b      	lsls	r3, r3, #20
 800241c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002420:	e01e      	b.n	8002460 <HAL_ADC_ConfigChannel+0x6ac>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	613b      	str	r3, [r7, #16]
  return result;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d104      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800243a:	2320      	movs	r3, #32
 800243c:	e006      	b.n	800244c <HAL_ADC_ConfigChannel+0x698>
 800243e:	bf00      	nop
 8002440:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	3301      	adds	r3, #1
 800244e:	f003 021f 	and.w	r2, r3, #31
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	3b1e      	subs	r3, #30
 800245a:	051b      	lsls	r3, r3, #20
 800245c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002460:	430b      	orrs	r3, r1
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	6892      	ldr	r2, [r2, #8]
 8002466:	4619      	mov	r1, r3
 8002468:	f7fe ff18 	bl	800129c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <HAL_ADC_ConfigChannel+0x7bc>)
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d071      	beq.n	800255c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002478:	483e      	ldr	r0, [pc, #248]	; (8002574 <HAL_ADC_ConfigChannel+0x7c0>)
 800247a:	f7fe fe11 	bl	80010a0 <LL_ADC_GetCommonPathInternalCh>
 800247e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_ADC_ConfigChannel+0x7c4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d004      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x6e2>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a3a      	ldr	r2, [pc, #232]	; (800257c <HAL_ADC_ConfigChannel+0x7c8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d127      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002496:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800249a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d121      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024aa:	d157      	bne.n	800255c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024b4:	4619      	mov	r1, r3
 80024b6:	482f      	ldr	r0, [pc, #188]	; (8002574 <HAL_ADC_ConfigChannel+0x7c0>)
 80024b8:	f7fe fddf 	bl	800107a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024bc:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_ADC_ConfigChannel+0x7cc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	4a30      	ldr	r2, [pc, #192]	; (8002584 <HAL_ADC_ConfigChannel+0x7d0>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024d6:	e002      	b.n	80024de <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3b01      	subs	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f9      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e4:	e03a      	b.n	800255c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a27      	ldr	r2, [pc, #156]	; (8002588 <HAL_ADC_ConfigChannel+0x7d4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d113      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10d      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a22      	ldr	r2, [pc, #136]	; (800258c <HAL_ADC_ConfigChannel+0x7d8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02a      	beq.n	800255c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800250a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250e:	4619      	mov	r1, r3
 8002510:	4818      	ldr	r0, [pc, #96]	; (8002574 <HAL_ADC_ConfigChannel+0x7c0>)
 8002512:	f7fe fdb2 	bl	800107a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002516:	e021      	b.n	800255c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <HAL_ADC_ConfigChannel+0x7dc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d11c      	bne.n	800255c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a16      	ldr	r2, [pc, #88]	; (800258c <HAL_ADC_ConfigChannel+0x7d8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d011      	beq.n	800255c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800253c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002540:	4619      	mov	r1, r3
 8002542:	480c      	ldr	r0, [pc, #48]	; (8002574 <HAL_ADC_ConfigChannel+0x7c0>)
 8002544:	f7fe fd99 	bl	800107a <LL_ADC_SetCommonPathInternalCh>
 8002548:	e008      	b.n	800255c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	f043 0220 	orr.w	r2, r3, #32
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002564:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002568:	4618      	mov	r0, r3
 800256a:	37d8      	adds	r7, #216	; 0xd8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	80080000 	.word	0x80080000
 8002574:	50000300 	.word	0x50000300
 8002578:	c3210000 	.word	0xc3210000
 800257c:	90c00010 	.word	0x90c00010
 8002580:	20000000 	.word	0x20000000
 8002584:	053e2d63 	.word	0x053e2d63
 8002588:	c7520000 	.word	0xc7520000
 800258c:	50000100 	.word	0x50000100
 8002590:	cb840000 	.word	0xcb840000

08002594 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe ff47 	bl	8001438 <LL_ADC_IsEnabled>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d169      	bne.n	8002684 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	4b36      	ldr	r3, [pc, #216]	; (8002690 <ADC_Enable+0xfc>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	f043 0210 	orr.w	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	f043 0201 	orr.w	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e055      	b.n	8002686 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe ff16 	bl	8001410 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025e4:	482b      	ldr	r0, [pc, #172]	; (8002694 <ADC_Enable+0x100>)
 80025e6:	f7fe fd5b 	bl	80010a0 <LL_ADC_GetCommonPathInternalCh>
 80025ea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <ADC_Enable+0x104>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	4a28      	ldr	r2, [pc, #160]	; (800269c <ADC_Enable+0x108>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800260e:	e002      	b.n	8002616 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	3b01      	subs	r3, #1
 8002614:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800261c:	f7fe fd0e 	bl	800103c <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002622:	e028      	b.n	8002676 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe ff05 	bl	8001438 <LL_ADC_IsEnabled>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d104      	bne.n	800263e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fee9 	bl	8001410 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800263e:	f7fe fcfd 	bl	800103c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d914      	bls.n	8002676 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d00d      	beq.n	8002676 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	f043 0210 	orr.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e007      	b.n	8002686 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d1cf      	bne.n	8002624 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	8000003f 	.word	0x8000003f
 8002694:	50000300 	.word	0x50000300
 8002698:	20000000 	.word	0x20000000
 800269c:	053e2d63 	.word	0x053e2d63

080026a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d14b      	bne.n	8002752 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d021      	beq.n	8002718 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fd8d 	bl	80011f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d032      	beq.n	800274a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d12b      	bne.n	800274a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d11f      	bne.n	800274a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	65da      	str	r2, [r3, #92]	; 0x5c
 8002716:	e018      	b.n	800274a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d111      	bne.n	800274a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f7fe f92c 	bl	80009a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002750:	e00e      	b.n	8002770 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff fb1e 	bl	8001da0 <HAL_ADC_ErrorCallback>
}
 8002764:	e004      	b.n	8002770 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff faf6 	bl	8001d78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b2:	f043 0204 	orr.w	r2, r3, #4
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff faf0 	bl	8001da0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <LL_ADC_IsEnabled>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <LL_ADC_IsEnabled+0x18>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <LL_ADC_IsEnabled+0x1a>
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_ADC_REG_IsConversionOngoing>:
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d101      	bne.n	8002806 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b0a1      	sub	sp, #132	; 0x84
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002892:	2302      	movs	r3, #2
 8002894:	e08b      	b.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800289e:	2300      	movs	r3, #0
 80028a0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028a2:	2300      	movs	r3, #0
 80028a4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ae:	d102      	bne.n	80028b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028b0:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	e001      	b.n	80028ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e06a      	b.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff ff87 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 80028e0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff81 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d14c      	bne.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80028f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d149      	bne.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028f8:	4b30      	ldr	r3, [pc, #192]	; (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80028fa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d028      	beq.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002916:	035b      	lsls	r3, r3, #13
 8002918:	430b      	orrs	r3, r1
 800291a:	431a      	orrs	r2, r3
 800291c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800291e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002920:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002924:	f7ff ff50 	bl	80027c8 <LL_ADC_IsEnabled>
 8002928:	4604      	mov	r4, r0
 800292a:	4823      	ldr	r0, [pc, #140]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800292c:	f7ff ff4c 	bl	80027c8 <LL_ADC_IsEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	4323      	orrs	r3, r4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d133      	bne.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002940:	f023 030f 	bic.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	6811      	ldr	r1, [r2, #0]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	6892      	ldr	r2, [r2, #8]
 800294c:	430a      	orrs	r2, r1
 800294e:	431a      	orrs	r2, r3
 8002950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002952:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002954:	e024      	b.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800295e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002960:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002962:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002966:	f7ff ff2f 	bl	80027c8 <LL_ADC_IsEnabled>
 800296a:	4604      	mov	r4, r0
 800296c:	4812      	ldr	r0, [pc, #72]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800296e:	f7ff ff2b 	bl	80027c8 <LL_ADC_IsEnabled>
 8002972:	4603      	mov	r3, r0
 8002974:	4323      	orrs	r3, r4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d112      	bne.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800297a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002982:	f023 030f 	bic.w	r3, r3, #15
 8002986:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002988:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800298a:	e009      	b.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800299e:	e000      	b.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80029aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3784      	adds	r7, #132	; 0x84
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd90      	pop	{r4, r7, pc}
 80029b6:	bf00      	nop
 80029b8:	50000100 	.word	0x50000100
 80029bc:	50000300 	.word	0x50000300

080029c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f2:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	60d3      	str	r3, [r2, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <__NVIC_GetPriorityGrouping+0x18>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	f003 0307 	and.w	r3, r3, #7
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	db0b      	blt.n	8002a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	f003 021f 	and.w	r2, r3, #31
 8002a3c:	4907      	ldr	r1, [pc, #28]	; (8002a5c <__NVIC_EnableIRQ+0x38>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	2001      	movs	r0, #1
 8002a46:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000e100 	.word	0xe000e100

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	; (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	; 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	bf28      	it	cs
 8002ad2:	2304      	movcs	r3, #4
 8002ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d902      	bls.n	8002ae4 <NVIC_EncodePriority+0x30>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	e000      	b.n	8002ae6 <NVIC_EncodePriority+0x32>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4313      	orrs	r3, r2
         );
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b2c:	d301      	bcc.n	8002b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00f      	b.n	8002b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <SysTick_Config+0x40>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b40:	f7ff ff8e 	bl	8002a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <SysTick_Config+0x40>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <SysTick_Config+0x40>)
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	e000e010 	.word	0xe000e010

08002b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff29 	bl	80029c0 <__NVIC_SetPriorityGrouping>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b84:	f7ff ff40 	bl	8002a08 <__NVIC_GetPriorityGrouping>
 8002b88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	6978      	ldr	r0, [r7, #20]
 8002b90:	f7ff ff90 	bl	8002ab4 <NVIC_EncodePriority>
 8002b94:	4602      	mov	r2, r0
 8002b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff5f 	bl	8002a60 <__NVIC_SetPriority>
}
 8002ba2:	bf00      	nop
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff33 	bl	8002a24 <__NVIC_EnableIRQ>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ffa4 	bl	8002b1c <SysTick_Config>
 8002bd4:	4603      	mov	r3, r0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e08d      	b.n	8002d0e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <HAL_DMA_Init+0x138>)
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d80f      	bhi.n	8002c1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	4b45      	ldr	r3, [pc, #276]	; (8002d1c <HAL_DMA_Init+0x13c>)
 8002c06:	4413      	add	r3, r2
 8002c08:	4a45      	ldr	r2, [pc, #276]	; (8002d20 <HAL_DMA_Init+0x140>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	009a      	lsls	r2, r3, #2
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a42      	ldr	r2, [pc, #264]	; (8002d24 <HAL_DMA_Init+0x144>)
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c1c:	e00e      	b.n	8002c3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_DMA_Init+0x148>)
 8002c26:	4413      	add	r3, r2
 8002c28:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <HAL_DMA_Init+0x140>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	009a      	lsls	r2, r3, #2
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a3c      	ldr	r2, [pc, #240]	; (8002d2c <HAL_DMA_Init+0x14c>)
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f9b6 	bl	8003000 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c9c:	d102      	bne.n	8002ca4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002cb8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_DMA_Init+0x104>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d80c      	bhi.n	8002ce4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f9d6 	bl	800307c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	e008      	b.n	8002cf6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40020407 	.word	0x40020407
 8002d1c:	bffdfff8 	.word	0xbffdfff8
 8002d20:	cccccccd 	.word	0xcccccccd
 8002d24:	40020000 	.word	0x40020000
 8002d28:	bffdfbf8 	.word	0xbffdfbf8
 8002d2c:	40020400 	.word	0x40020400

08002d30 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_DMA_Start_IT+0x20>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e066      	b.n	8002e1e <HAL_DMA_Start_IT+0xee>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d155      	bne.n	8002e10 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f8fb 	bl	8002f84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 020e 	orr.w	r2, r2, #14
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e00f      	b.n	8002dc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0204 	bic.w	r2, r2, #4
 8002db6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 020a 	orr.w	r2, r2, #10
 8002dc6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0201 	orr.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e005      	b.n	8002e1c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	2204      	movs	r2, #4
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d026      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x7a>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d021      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d107      	bne.n	8002e7a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0204 	bic.w	r2, r2, #4
 8002e78:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f003 021f 	and.w	r2, r3, #31
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2104      	movs	r1, #4
 8002e88:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d071      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e9e:	e06c      	b.n	8002f7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d02e      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d029      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 020a 	bic.w	r2, r2, #10
 8002eda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d038      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f10:	e033      	b.n	8002f7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d02a      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d025      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 020e 	bic.w	r2, r2, #14
 8002f3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	f003 021f 	and.w	r2, r3, #31
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
}
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f9a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d004      	beq.n	8002fae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	f003 021f 	and.w	r2, r3, #31
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d108      	bne.n	8002fe4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fe2:	e007      	b.n	8002ff4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	60da      	str	r2, [r3, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003010:	429a      	cmp	r2, r3
 8003012:	d802      	bhi.n	800301a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	e001      	b.n	800301e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800301c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3b08      	subs	r3, #8
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	461a      	mov	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800304a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	2201      	movs	r2, #1
 8003054:	409a      	lsls	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	651a      	str	r2, [r3, #80]	; 0x50
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40020407 	.word	0x40020407
 800306c:	40020800 	.word	0x40020800
 8003070:	40020820 	.word	0x40020820
 8003074:	cccccccd 	.word	0xcccccccd
 8003078:	40020880 	.word	0x40020880

0800307c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800309e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2201      	movs	r2, #1
 80030aa:	409a      	lsls	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	1000823f 	.word	0x1000823f
 80030c0:	40020940 	.word	0x40020940

080030c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030d2:	e15a      	b.n	800338a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2101      	movs	r1, #1
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	4013      	ands	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 814c 	beq.w	8003384 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d005      	beq.n	8003104 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003100:	2b02      	cmp	r3, #2
 8003102:	d130      	bne.n	8003166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800313a:	2201      	movs	r2, #1
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 0201 	and.w	r2, r3, #1
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b03      	cmp	r3, #3
 8003170:	d017      	beq.n	80031a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d123      	bne.n	80031f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	08da      	lsrs	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3208      	adds	r2, #8
 80031b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	6939      	ldr	r1, [r7, #16]
 80031f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0203 	and.w	r2, r3, #3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80a6 	beq.w	8003384 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003238:	4b5b      	ldr	r3, [pc, #364]	; (80033a8 <HAL_GPIO_Init+0x2e4>)
 800323a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323c:	4a5a      	ldr	r2, [pc, #360]	; (80033a8 <HAL_GPIO_Init+0x2e4>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6613      	str	r3, [r2, #96]	; 0x60
 8003244:	4b58      	ldr	r3, [pc, #352]	; (80033a8 <HAL_GPIO_Init+0x2e4>)
 8003246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003250:	4a56      	ldr	r2, [pc, #344]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800327a:	d01f      	beq.n	80032bc <HAL_GPIO_Init+0x1f8>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a4c      	ldr	r2, [pc, #304]	; (80033b0 <HAL_GPIO_Init+0x2ec>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d019      	beq.n	80032b8 <HAL_GPIO_Init+0x1f4>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a4b      	ldr	r2, [pc, #300]	; (80033b4 <HAL_GPIO_Init+0x2f0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <HAL_GPIO_Init+0x1f0>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a4a      	ldr	r2, [pc, #296]	; (80033b8 <HAL_GPIO_Init+0x2f4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00d      	beq.n	80032b0 <HAL_GPIO_Init+0x1ec>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a49      	ldr	r2, [pc, #292]	; (80033bc <HAL_GPIO_Init+0x2f8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <HAL_GPIO_Init+0x1e8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a48      	ldr	r2, [pc, #288]	; (80033c0 <HAL_GPIO_Init+0x2fc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d101      	bne.n	80032a8 <HAL_GPIO_Init+0x1e4>
 80032a4:	2305      	movs	r3, #5
 80032a6:	e00a      	b.n	80032be <HAL_GPIO_Init+0x1fa>
 80032a8:	2306      	movs	r3, #6
 80032aa:	e008      	b.n	80032be <HAL_GPIO_Init+0x1fa>
 80032ac:	2304      	movs	r3, #4
 80032ae:	e006      	b.n	80032be <HAL_GPIO_Init+0x1fa>
 80032b0:	2303      	movs	r3, #3
 80032b2:	e004      	b.n	80032be <HAL_GPIO_Init+0x1fa>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e002      	b.n	80032be <HAL_GPIO_Init+0x1fa>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <HAL_GPIO_Init+0x1fa>
 80032bc:	2300      	movs	r3, #0
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	f002 0203 	and.w	r2, r2, #3
 80032c4:	0092      	lsls	r2, r2, #2
 80032c6:	4093      	lsls	r3, r2
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032ce:	4937      	ldr	r1, [pc, #220]	; (80033ac <HAL_GPIO_Init+0x2e8>)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	089b      	lsrs	r3, r3, #2
 80032d4:	3302      	adds	r3, #2
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032dc:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_GPIO_Init+0x300>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003300:	4a30      	ldr	r2, [pc, #192]	; (80033c4 <HAL_GPIO_Init+0x300>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003306:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <HAL_GPIO_Init+0x300>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	43db      	mvns	r3, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800332a:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <HAL_GPIO_Init+0x300>)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003330:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_GPIO_Init+0x300>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003354:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_GPIO_Init+0x300>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_GPIO_Init+0x300>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800337e:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <HAL_GPIO_Init+0x300>)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	3301      	adds	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	f47f ae9d 	bne.w	80030d4 <HAL_GPIO_Init+0x10>
  }
}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40010000 	.word	0x40010000
 80033b0:	48000400 	.word	0x48000400
 80033b4:	48000800 	.word	0x48000800
 80033b8:	48000c00 	.word	0x48000c00
 80033bc:	48001000 	.word	0x48001000
 80033c0:	48001400 	.word	0x48001400
 80033c4:	40010400 	.word	0x40010400

080033c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
 80033d4:	4613      	mov	r3, r2
 80033d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d8:	787b      	ldrb	r3, [r7, #1]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033e4:	e002      	b.n	80033ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d141      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003406:	4b4b      	ldr	r3, [pc, #300]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003412:	d131      	bne.n	8003478 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003414:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800341a:	4a46      	ldr	r2, [pc, #280]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003420:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003424:	4b43      	ldr	r3, [pc, #268]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800342c:	4a41      	ldr	r2, [pc, #260]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003432:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003434:	4b40      	ldr	r3, [pc, #256]	; (8003538 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2232      	movs	r2, #50	; 0x32
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	4a3f      	ldr	r2, [pc, #252]	; (800353c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	0c9b      	lsrs	r3, r3, #18
 8003446:	3301      	adds	r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800344a:	e002      	b.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3b01      	subs	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003452:	4b38      	ldr	r3, [pc, #224]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	d102      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f2      	bne.n	800344c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003466:	4b33      	ldr	r3, [pc, #204]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003472:	d158      	bne.n	8003526 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e057      	b.n	8003528 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003478:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800347e:	4a2d      	ldr	r2, [pc, #180]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003484:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003488:	e04d      	b.n	8003526 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003490:	d141      	bne.n	8003516 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003492:	4b28      	ldr	r3, [pc, #160]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349e:	d131      	bne.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034a0:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a6:	4a23      	ldr	r2, [pc, #140]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034b0:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034b8:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034c0:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2232      	movs	r2, #50	; 0x32
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	4a1c      	ldr	r2, [pc, #112]	; (800353c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	0c9b      	lsrs	r3, r3, #18
 80034d2:	3301      	adds	r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d6:	e002      	b.n	80034de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3b01      	subs	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ea:	d102      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f2      	bne.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fe:	d112      	bne.n	8003526 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e011      	b.n	8003528 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800350a:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003510:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003514:	e007      	b.n	8003526 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003516:	4b07      	ldr	r3, [pc, #28]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800351e:	4a05      	ldr	r2, [pc, #20]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003520:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003524:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40007000 	.word	0x40007000
 8003538:	20000000 	.word	0x20000000
 800353c:	431bde83 	.word	0x431bde83

08003540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e2fe      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d075      	beq.n	800364a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355e:	4b97      	ldr	r3, [pc, #604]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003568:	4b94      	ldr	r3, [pc, #592]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	d102      	bne.n	800357e <HAL_RCC_OscConfig+0x3e>
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d002      	beq.n	8003584 <HAL_RCC_OscConfig+0x44>
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d10b      	bne.n	800359c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	4b8d      	ldr	r3, [pc, #564]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05b      	beq.n	8003648 <HAL_RCC_OscConfig+0x108>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d157      	bne.n	8003648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e2d9      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d106      	bne.n	80035b4 <HAL_RCC_OscConfig+0x74>
 80035a6:	4b85      	ldr	r3, [pc, #532]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a84      	ldr	r2, [pc, #528]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e01d      	b.n	80035f0 <HAL_RCC_OscConfig+0xb0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x98>
 80035be:	4b7f      	ldr	r3, [pc, #508]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a7e      	ldr	r2, [pc, #504]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80035c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b7c      	ldr	r3, [pc, #496]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a7b      	ldr	r2, [pc, #492]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e00b      	b.n	80035f0 <HAL_RCC_OscConfig+0xb0>
 80035d8:	4b78      	ldr	r3, [pc, #480]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a77      	ldr	r2, [pc, #476]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b75      	ldr	r3, [pc, #468]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a74      	ldr	r2, [pc, #464]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80035ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fd fd20 	bl	800103c <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003600:	f7fd fd1c 	bl	800103c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e29e      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003612:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0xc0>
 800361e:	e014      	b.n	800364a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fd0c 	bl	800103c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003628:	f7fd fd08 	bl	800103c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e28a      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363a:	4b60      	ldr	r3, [pc, #384]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0xe8>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d075      	beq.n	8003742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003656:	4b59      	ldr	r3, [pc, #356]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003660:	4b56      	ldr	r3, [pc, #344]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	d102      	bne.n	8003676 <HAL_RCC_OscConfig+0x136>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d002      	beq.n	800367c <HAL_RCC_OscConfig+0x13c>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b04      	cmp	r3, #4
 800367a:	d11f      	bne.n	80036bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800367c:	4b4f      	ldr	r3, [pc, #316]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_OscConfig+0x154>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e25d      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	4b49      	ldr	r3, [pc, #292]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	4946      	ldr	r1, [pc, #280]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036a8:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <HAL_RCC_OscConfig+0x280>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fc79 	bl	8000fa4 <HAL_InitTick>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d043      	beq.n	8003740 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e249      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d023      	beq.n	800370c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a3c      	ldr	r2, [pc, #240]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80036ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fd fcb4 	bl	800103c <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d8:	f7fd fcb0 	bl	800103c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e232      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ea:	4b34      	ldr	r3, [pc, #208]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f6:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	061b      	lsls	r3, r3, #24
 8003704:	492d      	ldr	r1, [pc, #180]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003706:	4313      	orrs	r3, r2
 8003708:	604b      	str	r3, [r1, #4]
 800370a:	e01a      	b.n	8003742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd fc90 	bl	800103c <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003720:	f7fd fc8c 	bl	800103c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e20e      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x1e0>
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d041      	beq.n	80037d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01c      	beq.n	8003790 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375c:	4a17      	ldr	r2, [pc, #92]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fd fc69 	bl	800103c <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376e:	f7fd fc65 	bl	800103c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e1e7      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0ef      	beq.n	800376e <HAL_RCC_OscConfig+0x22e>
 800378e:	e020      	b.n	80037d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003796:	4a09      	ldr	r2, [pc, #36]	; (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fd fc4c 	bl	800103c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a6:	e00d      	b.n	80037c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a8:	f7fd fc48 	bl	800103c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d906      	bls.n	80037c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e1ca      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c4:	4b8c      	ldr	r3, [pc, #560]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 80037c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1ea      	bne.n	80037a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80a6 	beq.w	800392c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037e4:	4b84      	ldr	r3, [pc, #528]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_OscConfig+0x2b4>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x2b6>
 80037f4:	2300      	movs	r3, #0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	4b7f      	ldr	r3, [pc, #508]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	4a7e      	ldr	r2, [pc, #504]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	6593      	str	r3, [r2, #88]	; 0x58
 8003806:	4b7c      	ldr	r3, [pc, #496]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003816:	4b79      	ldr	r3, [pc, #484]	; (80039fc <HAL_RCC_OscConfig+0x4bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003822:	4b76      	ldr	r3, [pc, #472]	; (80039fc <HAL_RCC_OscConfig+0x4bc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a75      	ldr	r2, [pc, #468]	; (80039fc <HAL_RCC_OscConfig+0x4bc>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7fd fc05 	bl	800103c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7fd fc01 	bl	800103c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e183      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003848:	4b6c      	ldr	r3, [pc, #432]	; (80039fc <HAL_RCC_OscConfig+0x4bc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d108      	bne.n	800386e <HAL_RCC_OscConfig+0x32e>
 800385c:	4b66      	ldr	r3, [pc, #408]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	4a65      	ldr	r2, [pc, #404]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800386c:	e024      	b.n	80038b8 <HAL_RCC_OscConfig+0x378>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b05      	cmp	r3, #5
 8003874:	d110      	bne.n	8003898 <HAL_RCC_OscConfig+0x358>
 8003876:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 8003878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387c:	4a5e      	ldr	r2, [pc, #376]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 800387e:	f043 0304 	orr.w	r3, r3, #4
 8003882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003886:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	4a5a      	ldr	r2, [pc, #360]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003896:	e00f      	b.n	80038b8 <HAL_RCC_OscConfig+0x378>
 8003898:	4b57      	ldr	r3, [pc, #348]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	4a56      	ldr	r2, [pc, #344]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a8:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d016      	beq.n	80038ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c0:	f7fd fbbc 	bl	800103c <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c6:	e00a      	b.n	80038de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c8:	f7fd fbb8 	bl	800103c <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e138      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038de:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0ed      	beq.n	80038c8 <HAL_RCC_OscConfig+0x388>
 80038ec:	e015      	b.n	800391a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ee:	f7fd fba5 	bl	800103c <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f4:	e00a      	b.n	800390c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fd fba1 	bl	800103c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e121      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1ed      	bne.n	80038f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800391a:	7ffb      	ldrb	r3, [r7, #31]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003920:	4b35      	ldr	r3, [pc, #212]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	4a34      	ldr	r2, [pc, #208]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 8003926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d03c      	beq.n	80039b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01c      	beq.n	800397a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003940:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 8003942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003946:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fd fb74 	bl	800103c <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003958:	f7fd fb70 	bl	800103c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e0f2      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 800396c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0ef      	beq.n	8003958 <HAL_RCC_OscConfig+0x418>
 8003978:	e01b      	b.n	80039b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 800397c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398a:	f7fd fb57 	bl	800103c <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003992:	f7fd fb53 	bl	800103c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e0d5      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039a4:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 80039a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1ef      	bne.n	8003992 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80c9 	beq.w	8003b4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b0c      	cmp	r3, #12
 80039c6:	f000 8083 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d15e      	bne.n	8003a90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <HAL_RCC_OscConfig+0x4b8>)
 80039d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039de:	f7fd fb2d 	bl	800103c <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e4:	e00c      	b.n	8003a00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fd fb29 	bl	800103c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d905      	bls.n	8003a00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e0ab      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a00:	4b55      	ldr	r3, [pc, #340]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ec      	bne.n	80039e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a0c:	4b52      	ldr	r3, [pc, #328]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	4b52      	ldr	r3, [pc, #328]	; (8003b5c <HAL_RCC_OscConfig+0x61c>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6a11      	ldr	r1, [r2, #32]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a1c:	3a01      	subs	r2, #1
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	4311      	orrs	r1, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a26:	0212      	lsls	r2, r2, #8
 8003a28:	4311      	orrs	r1, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a2e:	0852      	lsrs	r2, r2, #1
 8003a30:	3a01      	subs	r2, #1
 8003a32:	0552      	lsls	r2, r2, #21
 8003a34:	4311      	orrs	r1, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a3a:	0852      	lsrs	r2, r2, #1
 8003a3c:	3a01      	subs	r2, #1
 8003a3e:	0652      	lsls	r2, r2, #25
 8003a40:	4311      	orrs	r1, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a46:	06d2      	lsls	r2, r2, #27
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	4943      	ldr	r1, [pc, #268]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a50:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a40      	ldr	r2, [pc, #256]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a5c:	4b3e      	ldr	r3, [pc, #248]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4a3d      	ldr	r2, [pc, #244]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fd fae8 	bl	800103c <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fd fae4 	bl	800103c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e066      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	4b35      	ldr	r3, [pc, #212]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x530>
 8003a8e:	e05e      	b.n	8003b4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a90:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a30      	ldr	r2, [pc, #192]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fd face 	bl	800103c <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fd faca 	bl	800103c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e04c      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab6:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ac2:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	4924      	ldr	r1, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003ac8:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <HAL_RCC_OscConfig+0x620>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	60cb      	str	r3, [r1, #12]
 8003ace:	e03e      	b.n	8003b4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e039      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003adc:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <HAL_RCC_OscConfig+0x618>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f003 0203 	and.w	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d12c      	bne.n	8003b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	3b01      	subs	r3, #1
 8003afc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d123      	bne.n	8003b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d11b      	bne.n	8003b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d113      	bne.n	8003b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d109      	bne.n	8003b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	3b01      	subs	r3, #1
 8003b44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d001      	beq.n	8003b4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	019f800c 	.word	0x019f800c
 8003b60:	feeefffc 	.word	0xfeeefffc

08003b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e11e      	b.n	8003dba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b7c:	4b91      	ldr	r3, [pc, #580]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d910      	bls.n	8003bac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8a:	4b8e      	ldr	r3, [pc, #568]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 020f 	bic.w	r2, r3, #15
 8003b92:	498c      	ldr	r1, [pc, #560]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b8a      	ldr	r3, [pc, #552]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e106      	b.n	8003dba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d073      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d129      	bne.n	8003c14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc0:	4b81      	ldr	r3, [pc, #516]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0f4      	b.n	8003dba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003bd0:	f000 f99e 	bl	8003f10 <RCC_GetSysClockFreqFromPLLSource>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4a7c      	ldr	r2, [pc, #496]	; (8003dcc <HAL_RCC_ClockConfig+0x268>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d93f      	bls.n	8003c5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bde:	4b7a      	ldr	r3, [pc, #488]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d033      	beq.n	8003c5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d12f      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bfe:	4b72      	ldr	r3, [pc, #456]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c06:	4a70      	ldr	r2, [pc, #448]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e024      	b.n	8003c5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d109      	bne.n	8003c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0c6      	b.n	8003dba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c2c:	4b66      	ldr	r3, [pc, #408]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0be      	b.n	8003dba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c3c:	f000 f8ce 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4a61      	ldr	r2, [pc, #388]	; (8003dcc <HAL_RCC_ClockConfig+0x268>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d909      	bls.n	8003c5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c4a:	4b5f      	ldr	r3, [pc, #380]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c52:	4a5d      	ldr	r2, [pc, #372]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	4b5a      	ldr	r3, [pc, #360]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4957      	ldr	r1, [pc, #348]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c70:	f7fd f9e4 	bl	800103c <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fd f9e0 	bl	800103c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e095      	b.n	8003dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	4b4e      	ldr	r3, [pc, #312]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 020c 	and.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1eb      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d023      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb8:	4b43      	ldr	r3, [pc, #268]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4a42      	ldr	r2, [pc, #264]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003cbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003cd0:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cd8:	4a3b      	ldr	r2, [pc, #236]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003cda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce0:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4936      	ldr	r1, [pc, #216]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b80      	cmp	r3, #128	; 0x80
 8003cf8:	d105      	bne.n	8003d06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cfa:	4b33      	ldr	r3, [pc, #204]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	4a32      	ldr	r2, [pc, #200]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d06:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d21d      	bcs.n	8003d50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d14:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f023 020f 	bic.w	r2, r3, #15
 8003d1c:	4929      	ldr	r1, [pc, #164]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d24:	f7fd f98a 	bl	800103c <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2c:	f7fd f986 	bl	800103c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e03b      	b.n	8003dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b20      	ldr	r3, [pc, #128]	; (8003dc4 <HAL_RCC_ClockConfig+0x260>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d1ed      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4917      	ldr	r1, [pc, #92]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	490f      	ldr	r1, [pc, #60]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d8e:	f000 f825 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <HAL_RCC_ClockConfig+0x264>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	490c      	ldr	r1, [pc, #48]	; (8003dd0 <HAL_RCC_ClockConfig+0x26c>)
 8003da0:	5ccb      	ldrb	r3, [r1, r3]
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	fa22 f303 	lsr.w	r3, r2, r3
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x270>)
 8003dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_RCC_ClockConfig+0x274>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd f8f6 	bl	8000fa4 <HAL_InitTick>
 8003db8:	4603      	mov	r3, r0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40022000 	.word	0x40022000
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	04c4b400 	.word	0x04c4b400
 8003dd0:	08006598 	.word	0x08006598
 8003dd4:	20000000 	.word	0x20000000
 8003dd8:	20000004 	.word	0x20000004

08003ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003de2:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d102      	bne.n	8003df4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dee:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	e047      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003df4:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d102      	bne.n	8003e06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e00:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	e03e      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e06:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	d136      	bne.n	8003e80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e12:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	3301      	adds	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e30:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e3a:	68d2      	ldr	r2, [r2, #12]
 8003e3c:	0a12      	lsrs	r2, r2, #8
 8003e3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	617b      	str	r3, [r7, #20]
      break;
 8003e48:	e00c      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	4a10      	ldr	r2, [pc, #64]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e54:	68d2      	ldr	r2, [r2, #12]
 8003e56:	0a12      	lsrs	r2, r2, #8
 8003e58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
      break;
 8003e62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	0e5b      	lsrs	r3, r3, #25
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	e001      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e84:	693b      	ldr	r3, [r7, #16]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	00f42400 	.word	0x00f42400
 8003e9c:	007a1200 	.word	0x007a1200

08003ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000000 	.word	0x20000000

08003eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ebc:	f7ff fff0 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4904      	ldr	r1, [pc, #16]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	080065a8 	.word	0x080065a8

08003ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ee8:	f7ff ffda 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0adb      	lsrs	r3, r3, #11
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4904      	ldr	r1, [pc, #16]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	080065a8 	.word	0x080065a8

08003f10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f16:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d10c      	bne.n	8003f4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f34:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f3e:	68d2      	ldr	r2, [r2, #12]
 8003f40:	0a12      	lsrs	r2, r2, #8
 8003f42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	617b      	str	r3, [r7, #20]
    break;
 8003f4c:	e00c      	b.n	8003f68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f4e:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f56:	4a0e      	ldr	r2, [pc, #56]	; (8003f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f58:	68d2      	ldr	r2, [r2, #12]
 8003f5a:	0a12      	lsrs	r2, r2, #8
 8003f5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f60:	fb02 f303 	mul.w	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
    break;
 8003f66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	0e5b      	lsrs	r3, r3, #25
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	3301      	adds	r3, #1
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f82:	687b      	ldr	r3, [r7, #4]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40021000 	.word	0x40021000
 8003f94:	007a1200 	.word	0x007a1200
 8003f98:	00f42400 	.word	0x00f42400

08003f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fa8:	2300      	movs	r3, #0
 8003faa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8098 	beq.w	80040ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fbe:	4b43      	ldr	r3, [pc, #268]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10d      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	4b40      	ldr	r3, [pc, #256]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	4a3f      	ldr	r2, [pc, #252]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd6:	4b3d      	ldr	r3, [pc, #244]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe6:	4b3a      	ldr	r3, [pc, #232]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a39      	ldr	r2, [pc, #228]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff2:	f7fd f823 	bl	800103c <HAL_GetTick>
 8003ff6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ff8:	e009      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7fd f81f 	bl	800103c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d902      	bls.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	74fb      	strb	r3, [r7, #19]
        break;
 800400c:	e005      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800400e:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0ef      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800401a:	7cfb      	ldrb	r3, [r7, #19]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d159      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004020:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01e      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	429a      	cmp	r2, r3
 800403a:	d019      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800403c:	4b23      	ldr	r3, [pc, #140]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004046:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004048:	4b20      	ldr	r3, [pc, #128]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004058:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	4a1b      	ldr	r2, [pc, #108]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004068:	4a18      	ldr	r2, [pc, #96]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7fc ffdf 	bl	800103c <HAL_GetTick>
 800407e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004080:	e00b      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004082:	f7fc ffdb 	bl	800103c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004090:	4293      	cmp	r3, r2
 8004092:	d902      	bls.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	74fb      	strb	r3, [r7, #19]
            break;
 8004098:	e006      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409a:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0ec      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10b      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	4903      	ldr	r1, [pc, #12]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040c4:	e008      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	74bb      	strb	r3, [r7, #18]
 80040ca:	e005      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040d8:	7c7b      	ldrb	r3, [r7, #17]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d105      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040de:	4ba6      	ldr	r3, [pc, #664]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	4aa5      	ldr	r2, [pc, #660]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040f6:	4ba0      	ldr	r3, [pc, #640]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f023 0203 	bic.w	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	499c      	ldr	r1, [pc, #624]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004118:	4b97      	ldr	r3, [pc, #604]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f023 020c 	bic.w	r2, r3, #12
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	4994      	ldr	r1, [pc, #592]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800413a:	4b8f      	ldr	r3, [pc, #572]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	498b      	ldr	r1, [pc, #556]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800415c:	4b86      	ldr	r3, [pc, #536]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	4983      	ldr	r1, [pc, #524]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800417e:	4b7e      	ldr	r3, [pc, #504]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	497a      	ldr	r1, [pc, #488]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041a0:	4b75      	ldr	r3, [pc, #468]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	4972      	ldr	r1, [pc, #456]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041c2:	4b6d      	ldr	r3, [pc, #436]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	4969      	ldr	r1, [pc, #420]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e4:	4b64      	ldr	r3, [pc, #400]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	4961      	ldr	r1, [pc, #388]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	4958      	ldr	r1, [pc, #352]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004228:	4b53      	ldr	r3, [pc, #332]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	4950      	ldr	r1, [pc, #320]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004246:	d105      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a4a      	ldr	r2, [pc, #296]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004260:	4b45      	ldr	r3, [pc, #276]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	4942      	ldr	r1, [pc, #264]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427e:	d105      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004280:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a3c      	ldr	r2, [pc, #240]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d015      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004298:	4b37      	ldr	r3, [pc, #220]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	4934      	ldr	r1, [pc, #208]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042b6:	d105      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b8:	4b2f      	ldr	r3, [pc, #188]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a2e      	ldr	r2, [pc, #184]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d015      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042d0:	4b29      	ldr	r3, [pc, #164]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	4926      	ldr	r1, [pc, #152]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ee:	d105      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f0:	4b21      	ldr	r3, [pc, #132]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a20      	ldr	r2, [pc, #128]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d015      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	4918      	ldr	r1, [pc, #96]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004326:	d105      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a12      	ldr	r2, [pc, #72]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004332:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004340:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434e:	490a      	ldr	r1, [pc, #40]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800435e:	d105      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4a04      	ldr	r2, [pc, #16]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800436c:	7cbb      	ldrb	r3, [r7, #18]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000

0800437c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e049      	b.n	8004422 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc fcf8 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 f898 	bl	80044f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d001      	beq.n	8004444 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e042      	b.n	80044ca <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <HAL_TIM_Base_Start+0xac>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d018      	beq.n	8004488 <HAL_TIM_Base_Start+0x5c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d013      	beq.n	8004488 <HAL_TIM_Base_Start+0x5c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1d      	ldr	r2, [pc, #116]	; (80044dc <HAL_TIM_Base_Start+0xb0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <HAL_TIM_Base_Start+0x5c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <HAL_TIM_Base_Start+0xb4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_TIM_Base_Start+0x5c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1a      	ldr	r2, [pc, #104]	; (80044e4 <HAL_TIM_Base_Start+0xb8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_TIM_Base_Start+0x5c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a19      	ldr	r2, [pc, #100]	; (80044e8 <HAL_TIM_Base_Start+0xbc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d115      	bne.n	80044b4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <HAL_TIM_Base_Start+0xc0>)
 8004490:	4013      	ands	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b06      	cmp	r3, #6
 8004498:	d015      	beq.n	80044c6 <HAL_TIM_Base_Start+0x9a>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a0:	d011      	beq.n	80044c6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b2:	e008      	b.n	80044c6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e000      	b.n	80044c8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40013400 	.word	0x40013400
 80044e8:	40014000 	.word	0x40014000
 80044ec:	00010007 	.word	0x00010007

080044f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a42      	ldr	r2, [pc, #264]	; (800460c <TIM_Base_SetConfig+0x11c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00f      	beq.n	8004528 <TIM_Base_SetConfig+0x38>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450e:	d00b      	beq.n	8004528 <TIM_Base_SetConfig+0x38>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3f      	ldr	r2, [pc, #252]	; (8004610 <TIM_Base_SetConfig+0x120>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d007      	beq.n	8004528 <TIM_Base_SetConfig+0x38>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a3e      	ldr	r2, [pc, #248]	; (8004614 <TIM_Base_SetConfig+0x124>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_Base_SetConfig+0x38>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a3d      	ldr	r2, [pc, #244]	; (8004618 <TIM_Base_SetConfig+0x128>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d108      	bne.n	800453a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a33      	ldr	r2, [pc, #204]	; (800460c <TIM_Base_SetConfig+0x11c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01b      	beq.n	800457a <TIM_Base_SetConfig+0x8a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004548:	d017      	beq.n	800457a <TIM_Base_SetConfig+0x8a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a30      	ldr	r2, [pc, #192]	; (8004610 <TIM_Base_SetConfig+0x120>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <TIM_Base_SetConfig+0x8a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2f      	ldr	r2, [pc, #188]	; (8004614 <TIM_Base_SetConfig+0x124>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00f      	beq.n	800457a <TIM_Base_SetConfig+0x8a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2e      	ldr	r2, [pc, #184]	; (8004618 <TIM_Base_SetConfig+0x128>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00b      	beq.n	800457a <TIM_Base_SetConfig+0x8a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2d      	ldr	r2, [pc, #180]	; (800461c <TIM_Base_SetConfig+0x12c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <TIM_Base_SetConfig+0x8a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2c      	ldr	r2, [pc, #176]	; (8004620 <TIM_Base_SetConfig+0x130>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d003      	beq.n	800457a <TIM_Base_SetConfig+0x8a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2b      	ldr	r2, [pc, #172]	; (8004624 <TIM_Base_SetConfig+0x134>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d108      	bne.n	800458c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a16      	ldr	r2, [pc, #88]	; (800460c <TIM_Base_SetConfig+0x11c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00f      	beq.n	80045d8 <TIM_Base_SetConfig+0xe8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a17      	ldr	r2, [pc, #92]	; (8004618 <TIM_Base_SetConfig+0x128>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00b      	beq.n	80045d8 <TIM_Base_SetConfig+0xe8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a16      	ldr	r2, [pc, #88]	; (800461c <TIM_Base_SetConfig+0x12c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d007      	beq.n	80045d8 <TIM_Base_SetConfig+0xe8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a15      	ldr	r2, [pc, #84]	; (8004620 <TIM_Base_SetConfig+0x130>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d003      	beq.n	80045d8 <TIM_Base_SetConfig+0xe8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a14      	ldr	r2, [pc, #80]	; (8004624 <TIM_Base_SetConfig+0x134>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d103      	bne.n	80045e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d105      	bne.n	80045fe <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f023 0201 	bic.w	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	611a      	str	r2, [r3, #16]
  }
}
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800
 8004618:	40013400 	.word	0x40013400
 800461c:	40014000 	.word	0x40014000
 8004620:	40014400 	.word	0x40014400
 8004624:	40014800 	.word	0x40014800

08004628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800463c:	2302      	movs	r3, #2
 800463e:	e065      	b.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2b      	ldr	r2, [pc, #172]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d108      	bne.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800467a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800468c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004690:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d018      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b6:	d013      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a18      	ldr	r2, [pc, #96]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00e      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a17      	ldr	r2, [pc, #92]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d009      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a12      	ldr	r2, [pc, #72]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d004      	beq.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a13      	ldr	r2, [pc, #76]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10c      	bne.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40013400 	.word	0x40013400
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800
 8004728:	40014000 	.word	0x40014000

0800472c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e042      	b.n	80047c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fc fb8d 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2224      	movs	r2, #36	; 0x24
 800475a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fb82 	bl	8004e80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8b3 	bl	80048e8 <UART_SetConfig>
 8004782:	4603      	mov	r3, r0
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e01b      	b.n	80047c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800479a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fc01 	bl	8004fc4 <UART_CheckIdleState>
 80047c2:	4603      	mov	r3, r0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d17b      	bne.n	80048de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_UART_Transmit+0x26>
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e074      	b.n	80048e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2221      	movs	r2, #33	; 0x21
 8004802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004806:	f7fc fc19 	bl	800103c <HAL_GetTick>
 800480a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	88fa      	ldrh	r2, [r7, #6]
 8004810:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	88fa      	ldrh	r2, [r7, #6]
 8004818:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004824:	d108      	bne.n	8004838 <HAL_UART_Transmit+0x6c>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d104      	bne.n	8004838 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e003      	b.n	8004840 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004840:	e030      	b.n	80048a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2200      	movs	r2, #0
 800484a:	2180      	movs	r1, #128	; 0x80
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 fc63 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e03d      	b.n	80048e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004878:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	3302      	adds	r3, #2
 800487e:	61bb      	str	r3, [r7, #24]
 8004880:	e007      	b.n	8004892 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	781a      	ldrb	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	3301      	adds	r3, #1
 8004890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1c8      	bne.n	8004842 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2200      	movs	r2, #0
 80048b8:	2140      	movs	r1, #64	; 0x40
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fc2c 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e006      	b.n	80048e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
  }
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048ec:	b08c      	sub	sp, #48	; 0x30
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	431a      	orrs	r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	431a      	orrs	r2, r3
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4bab      	ldr	r3, [pc, #684]	; (8004bc4 <UART_SetConfig+0x2dc>)
 8004918:	4013      	ands	r3, r2
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004920:	430b      	orrs	r3, r1
 8004922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4aa0      	ldr	r2, [pc, #640]	; (8004bc8 <UART_SetConfig+0x2e0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d004      	beq.n	8004954 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004950:	4313      	orrs	r3, r2
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800495e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004968:	430b      	orrs	r3, r1
 800496a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	f023 010f 	bic.w	r1, r3, #15
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a91      	ldr	r2, [pc, #580]	; (8004bcc <UART_SetConfig+0x2e4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d125      	bne.n	80049d8 <UART_SetConfig+0xf0>
 800498c:	4b90      	ldr	r3, [pc, #576]	; (8004bd0 <UART_SetConfig+0x2e8>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b03      	cmp	r3, #3
 8004998:	d81a      	bhi.n	80049d0 <UART_SetConfig+0xe8>
 800499a:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <UART_SetConfig+0xb8>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	080049b1 	.word	0x080049b1
 80049a4:	080049c1 	.word	0x080049c1
 80049a8:	080049b9 	.word	0x080049b9
 80049ac:	080049c9 	.word	0x080049c9
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b6:	e0d6      	b.n	8004b66 <UART_SetConfig+0x27e>
 80049b8:	2302      	movs	r3, #2
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049be:	e0d2      	b.n	8004b66 <UART_SetConfig+0x27e>
 80049c0:	2304      	movs	r3, #4
 80049c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c6:	e0ce      	b.n	8004b66 <UART_SetConfig+0x27e>
 80049c8:	2308      	movs	r3, #8
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ce:	e0ca      	b.n	8004b66 <UART_SetConfig+0x27e>
 80049d0:	2310      	movs	r3, #16
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d6:	e0c6      	b.n	8004b66 <UART_SetConfig+0x27e>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a7d      	ldr	r2, [pc, #500]	; (8004bd4 <UART_SetConfig+0x2ec>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d138      	bne.n	8004a54 <UART_SetConfig+0x16c>
 80049e2:	4b7b      	ldr	r3, [pc, #492]	; (8004bd0 <UART_SetConfig+0x2e8>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f003 030c 	and.w	r3, r3, #12
 80049ec:	2b0c      	cmp	r3, #12
 80049ee:	d82d      	bhi.n	8004a4c <UART_SetConfig+0x164>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <UART_SetConfig+0x110>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a2d 	.word	0x08004a2d
 80049fc:	08004a4d 	.word	0x08004a4d
 8004a00:	08004a4d 	.word	0x08004a4d
 8004a04:	08004a4d 	.word	0x08004a4d
 8004a08:	08004a3d 	.word	0x08004a3d
 8004a0c:	08004a4d 	.word	0x08004a4d
 8004a10:	08004a4d 	.word	0x08004a4d
 8004a14:	08004a4d 	.word	0x08004a4d
 8004a18:	08004a35 	.word	0x08004a35
 8004a1c:	08004a4d 	.word	0x08004a4d
 8004a20:	08004a4d 	.word	0x08004a4d
 8004a24:	08004a4d 	.word	0x08004a4d
 8004a28:	08004a45 	.word	0x08004a45
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a32:	e098      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004a34:	2302      	movs	r3, #2
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3a:	e094      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a42:	e090      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004a44:	2308      	movs	r3, #8
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4a:	e08c      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a52:	e088      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a5f      	ldr	r2, [pc, #380]	; (8004bd8 <UART_SetConfig+0x2f0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d125      	bne.n	8004aaa <UART_SetConfig+0x1c2>
 8004a5e:	4b5c      	ldr	r3, [pc, #368]	; (8004bd0 <UART_SetConfig+0x2e8>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a68:	2b30      	cmp	r3, #48	; 0x30
 8004a6a:	d016      	beq.n	8004a9a <UART_SetConfig+0x1b2>
 8004a6c:	2b30      	cmp	r3, #48	; 0x30
 8004a6e:	d818      	bhi.n	8004aa2 <UART_SetConfig+0x1ba>
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d00a      	beq.n	8004a8a <UART_SetConfig+0x1a2>
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d814      	bhi.n	8004aa2 <UART_SetConfig+0x1ba>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <UART_SetConfig+0x19a>
 8004a7c:	2b10      	cmp	r3, #16
 8004a7e:	d008      	beq.n	8004a92 <UART_SetConfig+0x1aa>
 8004a80:	e00f      	b.n	8004aa2 <UART_SetConfig+0x1ba>
 8004a82:	2300      	movs	r3, #0
 8004a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a88:	e06d      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a90:	e069      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004a92:	2304      	movs	r3, #4
 8004a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a98:	e065      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa0:	e061      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004aa2:	2310      	movs	r3, #16
 8004aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa8:	e05d      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a4b      	ldr	r2, [pc, #300]	; (8004bdc <UART_SetConfig+0x2f4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d125      	bne.n	8004b00 <UART_SetConfig+0x218>
 8004ab4:	4b46      	ldr	r3, [pc, #280]	; (8004bd0 <UART_SetConfig+0x2e8>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004abe:	2bc0      	cmp	r3, #192	; 0xc0
 8004ac0:	d016      	beq.n	8004af0 <UART_SetConfig+0x208>
 8004ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ac4:	d818      	bhi.n	8004af8 <UART_SetConfig+0x210>
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d00a      	beq.n	8004ae0 <UART_SetConfig+0x1f8>
 8004aca:	2b80      	cmp	r3, #128	; 0x80
 8004acc:	d814      	bhi.n	8004af8 <UART_SetConfig+0x210>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <UART_SetConfig+0x1f0>
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d008      	beq.n	8004ae8 <UART_SetConfig+0x200>
 8004ad6:	e00f      	b.n	8004af8 <UART_SetConfig+0x210>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ade:	e042      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae6:	e03e      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aee:	e03a      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af6:	e036      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004afe:	e032      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a30      	ldr	r2, [pc, #192]	; (8004bc8 <UART_SetConfig+0x2e0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d12a      	bne.n	8004b60 <UART_SetConfig+0x278>
 8004b0a:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <UART_SetConfig+0x2e8>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b18:	d01a      	beq.n	8004b50 <UART_SetConfig+0x268>
 8004b1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b1e:	d81b      	bhi.n	8004b58 <UART_SetConfig+0x270>
 8004b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b24:	d00c      	beq.n	8004b40 <UART_SetConfig+0x258>
 8004b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2a:	d815      	bhi.n	8004b58 <UART_SetConfig+0x270>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <UART_SetConfig+0x250>
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b34:	d008      	beq.n	8004b48 <UART_SetConfig+0x260>
 8004b36:	e00f      	b.n	8004b58 <UART_SetConfig+0x270>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e012      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004b40:	2302      	movs	r3, #2
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e00e      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e00a      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004b50:	2308      	movs	r3, #8
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b56:	e006      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5e:	e002      	b.n	8004b66 <UART_SetConfig+0x27e>
 8004b60:	2310      	movs	r3, #16
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <UART_SetConfig+0x2e0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	f040 80a8 	bne.w	8004cc2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d834      	bhi.n	8004be4 <UART_SetConfig+0x2fc>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0x298>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004be5 	.word	0x08004be5
 8004b88:	08004bad 	.word	0x08004bad
 8004b8c:	08004be5 	.word	0x08004be5
 8004b90:	08004bb3 	.word	0x08004bb3
 8004b94:	08004be5 	.word	0x08004be5
 8004b98:	08004be5 	.word	0x08004be5
 8004b9c:	08004be5 	.word	0x08004be5
 8004ba0:	08004bbb 	.word	0x08004bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba4:	f7ff f988 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 8004ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004baa:	e021      	b.n	8004bf0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <UART_SetConfig+0x2f8>)
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb0:	e01e      	b.n	8004bf0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb2:	f7ff f913 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8004bb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb8:	e01a      	b.n	8004bf0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc0:	e016      	b.n	8004bf0 <UART_SetConfig+0x308>
 8004bc2:	bf00      	nop
 8004bc4:	cfff69f3 	.word	0xcfff69f3
 8004bc8:	40008000 	.word	0x40008000
 8004bcc:	40013800 	.word	0x40013800
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40004400 	.word	0x40004400
 8004bd8:	40004800 	.word	0x40004800
 8004bdc:	40004c00 	.word	0x40004c00
 8004be0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 812a 	beq.w	8004e4c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	4a9e      	ldr	r2, [pc, #632]	; (8004e78 <UART_SetConfig+0x590>)
 8004bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c02:	461a      	mov	r2, r3
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d305      	bcc.n	8004c28 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d903      	bls.n	8004c30 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c2e:	e10d      	b.n	8004e4c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	2200      	movs	r2, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	60fa      	str	r2, [r7, #12]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	4a8e      	ldr	r2, [pc, #568]	; (8004e78 <UART_SetConfig+0x590>)
 8004c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2200      	movs	r2, #0
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	607a      	str	r2, [r7, #4]
 8004c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c52:	f7fb fb35 	bl	80002c0 <__aeabi_uldivmod>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	020b      	lsls	r3, r1, #8
 8004c68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c6c:	0202      	lsls	r2, r0, #8
 8004c6e:	6979      	ldr	r1, [r7, #20]
 8004c70:	6849      	ldr	r1, [r1, #4]
 8004c72:	0849      	lsrs	r1, r1, #1
 8004c74:	2000      	movs	r0, #0
 8004c76:	460c      	mov	r4, r1
 8004c78:	4605      	mov	r5, r0
 8004c7a:	eb12 0804 	adds.w	r8, r2, r4
 8004c7e:	eb43 0905 	adc.w	r9, r3, r5
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	469a      	mov	sl, r3
 8004c8a:	4693      	mov	fp, r2
 8004c8c:	4652      	mov	r2, sl
 8004c8e:	465b      	mov	r3, fp
 8004c90:	4640      	mov	r0, r8
 8004c92:	4649      	mov	r1, r9
 8004c94:	f7fb fb14 	bl	80002c0 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca6:	d308      	bcc.n	8004cba <UART_SetConfig+0x3d2>
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cae:	d204      	bcs.n	8004cba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6a3a      	ldr	r2, [r7, #32]
 8004cb6:	60da      	str	r2, [r3, #12]
 8004cb8:	e0c8      	b.n	8004e4c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cc0:	e0c4      	b.n	8004e4c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cca:	d167      	bne.n	8004d9c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004ccc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d828      	bhi.n	8004d26 <UART_SetConfig+0x43e>
 8004cd4:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <UART_SetConfig+0x3f4>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004d09 	.word	0x08004d09
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	08004d27 	.word	0x08004d27
 8004cec:	08004d17 	.word	0x08004d17
 8004cf0:	08004d27 	.word	0x08004d27
 8004cf4:	08004d27 	.word	0x08004d27
 8004cf8:	08004d27 	.word	0x08004d27
 8004cfc:	08004d1f 	.word	0x08004d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d00:	f7ff f8da 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 8004d04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d06:	e014      	b.n	8004d32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d08:	f7ff f8ec 	bl	8003ee4 <HAL_RCC_GetPCLK2Freq>
 8004d0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d0e:	e010      	b.n	8004d32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d10:	4b5a      	ldr	r3, [pc, #360]	; (8004e7c <UART_SetConfig+0x594>)
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d14:	e00d      	b.n	8004d32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d16:	f7ff f861 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8004d1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d1c:	e009      	b.n	8004d32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d24:	e005      	b.n	8004d32 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8089 	beq.w	8004e4c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	4a4e      	ldr	r2, [pc, #312]	; (8004e78 <UART_SetConfig+0x590>)
 8004d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d44:	461a      	mov	r2, r3
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d4c:	005a      	lsls	r2, r3, #1
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	085b      	lsrs	r3, r3, #1
 8004d54:	441a      	add	r2, r3
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	2b0f      	cmp	r3, #15
 8004d64:	d916      	bls.n	8004d94 <UART_SetConfig+0x4ac>
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d212      	bcs.n	8004d94 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f023 030f 	bic.w	r3, r3, #15
 8004d76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	8bfb      	ldrh	r3, [r7, #30]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	8bfa      	ldrh	r2, [r7, #30]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	e05b      	b.n	8004e4c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d9a:	e057      	b.n	8004e4c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d828      	bhi.n	8004df6 <UART_SetConfig+0x50e>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <UART_SetConfig+0x4c4>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	08004dd9 	.word	0x08004dd9
 8004db4:	08004de1 	.word	0x08004de1
 8004db8:	08004df7 	.word	0x08004df7
 8004dbc:	08004de7 	.word	0x08004de7
 8004dc0:	08004df7 	.word	0x08004df7
 8004dc4:	08004df7 	.word	0x08004df7
 8004dc8:	08004df7 	.word	0x08004df7
 8004dcc:	08004def 	.word	0x08004def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd0:	f7ff f872 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 8004dd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dd6:	e014      	b.n	8004e02 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd8:	f7ff f884 	bl	8003ee4 <HAL_RCC_GetPCLK2Freq>
 8004ddc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dde:	e010      	b.n	8004e02 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de0:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <UART_SetConfig+0x594>)
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004de4:	e00d      	b.n	8004e02 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de6:	f7fe fff9 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8004dea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dec:	e009      	b.n	8004e02 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004df4:	e005      	b.n	8004e02 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e00:	bf00      	nop
    }

    if (pclk != 0U)
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d021      	beq.n	8004e4c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	4a1a      	ldr	r2, [pc, #104]	; (8004e78 <UART_SetConfig+0x590>)
 8004e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e12:	461a      	mov	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	441a      	add	r2, r3
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	2b0f      	cmp	r3, #15
 8004e30:	d909      	bls.n	8004e46 <UART_SetConfig+0x55e>
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e38:	d205      	bcs.n	8004e46 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60da      	str	r2, [r3, #12]
 8004e44:	e002      	b.n	8004e4c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2200      	movs	r2, #0
 8004e66:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e68:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3730      	adds	r7, #48	; 0x30
 8004e70:	46bd      	mov	sp, r7
 8004e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e76:	bf00      	nop
 8004e78:	080065b0 	.word	0x080065b0
 8004e7c:	00f42400 	.word	0x00f42400

08004e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01a      	beq.n	8004f96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7e:	d10a      	bne.n	8004f96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b098      	sub	sp, #96	; 0x60
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fd4:	f7fc f832 	bl	800103c <HAL_GetTick>
 8004fd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d12f      	bne.n	8005048 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f88e 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d022      	beq.n	8005048 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005016:	653b      	str	r3, [r7, #80]	; 0x50
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005020:	647b      	str	r3, [r7, #68]	; 0x44
 8005022:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e6      	bne.n	8005002 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e063      	b.n	8005110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d149      	bne.n	80050ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005056:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800505e:	2200      	movs	r2, #0
 8005060:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f857 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d03c      	beq.n	80050ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	623b      	str	r3, [r7, #32]
   return(result);
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508e:	633b      	str	r3, [r7, #48]	; 0x30
 8005090:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e6      	bne.n	8005070 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3308      	adds	r3, #8
 80050a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c2:	61fa      	str	r2, [r7, #28]
 80050c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	69b9      	ldr	r1, [r7, #24]
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	617b      	str	r3, [r7, #20]
   return(result);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e012      	b.n	8005110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3758      	adds	r7, #88	; 0x58
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005128:	e04f      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005130:	d04b      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7fb ff83 	bl	800103c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <UART_WaitOnFlagUntilTimeout+0x30>
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e04e      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d037      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b80      	cmp	r3, #128	; 0x80
 800515e:	d034      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d031      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b08      	cmp	r3, #8
 8005172:	d110      	bne.n	8005196 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2208      	movs	r2, #8
 800517a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f838 	bl	80051f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2208      	movs	r2, #8
 8005186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e029      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a4:	d111      	bne.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f81e 	bl	80051f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e00f      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4013      	ands	r3, r2
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	bf0c      	ite	eq
 80051da:	2301      	moveq	r3, #1
 80051dc:	2300      	movne	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d0a0      	beq.n	800512a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b095      	sub	sp, #84	; 0x54
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800520e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005218:	643b      	str	r3, [r7, #64]	; 0x40
 800521a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800521e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005220:	e841 2300 	strex	r3, r2, [r1]
 8005224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e6      	bne.n	80051fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3308      	adds	r3, #8
 8005232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	61fb      	str	r3, [r7, #28]
   return(result);
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	64bb      	str	r3, [r7, #72]	; 0x48
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005250:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e3      	bne.n	800522c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005268:	2b01      	cmp	r3, #1
 800526a:	d118      	bne.n	800529e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	60bb      	str	r3, [r7, #8]
   return(result);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f023 0310 	bic.w	r3, r3, #16
 8005280:	647b      	str	r3, [r7, #68]	; 0x44
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6979      	ldr	r1, [r7, #20]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	613b      	str	r3, [r7, #16]
   return(result);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e6      	bne.n	800526c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80052b2:	bf00      	nop
 80052b4:	3754      	adds	r7, #84	; 0x54
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e027      	b.n	8005324 <HAL_UARTEx_DisableFifoMode+0x66>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2224      	movs	r2, #36	; 0x24
 80052e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0201 	bic.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005302:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005344:	2302      	movs	r3, #2
 8005346:	e02d      	b.n	80053a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2224      	movs	r2, #36	; 0x24
 8005354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f84f 	bl	8005428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e02d      	b.n	8005420 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2224      	movs	r2, #36	; 0x24
 80053d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f811 	bl	8005428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005434:	2b00      	cmp	r3, #0
 8005436:	d108      	bne.n	800544a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005448:	e031      	b.n	80054ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800544a:	2308      	movs	r3, #8
 800544c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800544e:	2308      	movs	r3, #8
 8005450:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	0e5b      	lsrs	r3, r3, #25
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	0f5b      	lsrs	r3, r3, #29
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005472:	7bbb      	ldrb	r3, [r7, #14]
 8005474:	7b3a      	ldrb	r2, [r7, #12]
 8005476:	4911      	ldr	r1, [pc, #68]	; (80054bc <UARTEx_SetNbDataToProcess+0x94>)
 8005478:	5c8a      	ldrb	r2, [r1, r2]
 800547a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800547e:	7b3a      	ldrb	r2, [r7, #12]
 8005480:	490f      	ldr	r1, [pc, #60]	; (80054c0 <UARTEx_SetNbDataToProcess+0x98>)
 8005482:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005484:	fb93 f3f2 	sdiv	r3, r3, r2
 8005488:	b29a      	uxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	7b7a      	ldrb	r2, [r7, #13]
 8005494:	4909      	ldr	r1, [pc, #36]	; (80054bc <UARTEx_SetNbDataToProcess+0x94>)
 8005496:	5c8a      	ldrb	r2, [r1, r2]
 8005498:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800549c:	7b7a      	ldrb	r2, [r7, #13]
 800549e:	4908      	ldr	r1, [pc, #32]	; (80054c0 <UARTEx_SetNbDataToProcess+0x98>)
 80054a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	080065c8 	.word	0x080065c8
 80054c0:	080065d0 	.word	0x080065d0

080054c4 <__errno>:
 80054c4:	4b01      	ldr	r3, [pc, #4]	; (80054cc <__errno+0x8>)
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	2000000c 	.word	0x2000000c

080054d0 <__libc_init_array>:
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	4d0d      	ldr	r5, [pc, #52]	; (8005508 <__libc_init_array+0x38>)
 80054d4:	4c0d      	ldr	r4, [pc, #52]	; (800550c <__libc_init_array+0x3c>)
 80054d6:	1b64      	subs	r4, r4, r5
 80054d8:	10a4      	asrs	r4, r4, #2
 80054da:	2600      	movs	r6, #0
 80054dc:	42a6      	cmp	r6, r4
 80054de:	d109      	bne.n	80054f4 <__libc_init_array+0x24>
 80054e0:	4d0b      	ldr	r5, [pc, #44]	; (8005510 <__libc_init_array+0x40>)
 80054e2:	4c0c      	ldr	r4, [pc, #48]	; (8005514 <__libc_init_array+0x44>)
 80054e4:	f001 f824 	bl	8006530 <_init>
 80054e8:	1b64      	subs	r4, r4, r5
 80054ea:	10a4      	asrs	r4, r4, #2
 80054ec:	2600      	movs	r6, #0
 80054ee:	42a6      	cmp	r6, r4
 80054f0:	d105      	bne.n	80054fe <__libc_init_array+0x2e>
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f8:	4798      	blx	r3
 80054fa:	3601      	adds	r6, #1
 80054fc:	e7ee      	b.n	80054dc <__libc_init_array+0xc>
 80054fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005502:	4798      	blx	r3
 8005504:	3601      	adds	r6, #1
 8005506:	e7f2      	b.n	80054ee <__libc_init_array+0x1e>
 8005508:	08006678 	.word	0x08006678
 800550c:	08006678 	.word	0x08006678
 8005510:	08006678 	.word	0x08006678
 8005514:	0800667c 	.word	0x0800667c

08005518 <memset>:
 8005518:	4402      	add	r2, r0
 800551a:	4603      	mov	r3, r0
 800551c:	4293      	cmp	r3, r2
 800551e:	d100      	bne.n	8005522 <memset+0xa>
 8005520:	4770      	bx	lr
 8005522:	f803 1b01 	strb.w	r1, [r3], #1
 8005526:	e7f9      	b.n	800551c <memset+0x4>

08005528 <iprintf>:
 8005528:	b40f      	push	{r0, r1, r2, r3}
 800552a:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <iprintf+0x2c>)
 800552c:	b513      	push	{r0, r1, r4, lr}
 800552e:	681c      	ldr	r4, [r3, #0]
 8005530:	b124      	cbz	r4, 800553c <iprintf+0x14>
 8005532:	69a3      	ldr	r3, [r4, #24]
 8005534:	b913      	cbnz	r3, 800553c <iprintf+0x14>
 8005536:	4620      	mov	r0, r4
 8005538:	f000 fa5e 	bl	80059f8 <__sinit>
 800553c:	ab05      	add	r3, sp, #20
 800553e:	9a04      	ldr	r2, [sp, #16]
 8005540:	68a1      	ldr	r1, [r4, #8]
 8005542:	9301      	str	r3, [sp, #4]
 8005544:	4620      	mov	r0, r4
 8005546:	f000 fc67 	bl	8005e18 <_vfiprintf_r>
 800554a:	b002      	add	sp, #8
 800554c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005550:	b004      	add	sp, #16
 8005552:	4770      	bx	lr
 8005554:	2000000c 	.word	0x2000000c

08005558 <_puts_r>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	460e      	mov	r6, r1
 800555c:	4605      	mov	r5, r0
 800555e:	b118      	cbz	r0, 8005568 <_puts_r+0x10>
 8005560:	6983      	ldr	r3, [r0, #24]
 8005562:	b90b      	cbnz	r3, 8005568 <_puts_r+0x10>
 8005564:	f000 fa48 	bl	80059f8 <__sinit>
 8005568:	69ab      	ldr	r3, [r5, #24]
 800556a:	68ac      	ldr	r4, [r5, #8]
 800556c:	b913      	cbnz	r3, 8005574 <_puts_r+0x1c>
 800556e:	4628      	mov	r0, r5
 8005570:	f000 fa42 	bl	80059f8 <__sinit>
 8005574:	4b2c      	ldr	r3, [pc, #176]	; (8005628 <_puts_r+0xd0>)
 8005576:	429c      	cmp	r4, r3
 8005578:	d120      	bne.n	80055bc <_puts_r+0x64>
 800557a:	686c      	ldr	r4, [r5, #4]
 800557c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800557e:	07db      	lsls	r3, r3, #31
 8005580:	d405      	bmi.n	800558e <_puts_r+0x36>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	0598      	lsls	r0, r3, #22
 8005586:	d402      	bmi.n	800558e <_puts_r+0x36>
 8005588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800558a:	f000 fad3 	bl	8005b34 <__retarget_lock_acquire_recursive>
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	0719      	lsls	r1, r3, #28
 8005592:	d51d      	bpl.n	80055d0 <_puts_r+0x78>
 8005594:	6923      	ldr	r3, [r4, #16]
 8005596:	b1db      	cbz	r3, 80055d0 <_puts_r+0x78>
 8005598:	3e01      	subs	r6, #1
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055a0:	3b01      	subs	r3, #1
 80055a2:	60a3      	str	r3, [r4, #8]
 80055a4:	bb39      	cbnz	r1, 80055f6 <_puts_r+0x9e>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da38      	bge.n	800561c <_puts_r+0xc4>
 80055aa:	4622      	mov	r2, r4
 80055ac:	210a      	movs	r1, #10
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 f848 	bl	8005644 <__swbuf_r>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d011      	beq.n	80055dc <_puts_r+0x84>
 80055b8:	250a      	movs	r5, #10
 80055ba:	e011      	b.n	80055e0 <_puts_r+0x88>
 80055bc:	4b1b      	ldr	r3, [pc, #108]	; (800562c <_puts_r+0xd4>)
 80055be:	429c      	cmp	r4, r3
 80055c0:	d101      	bne.n	80055c6 <_puts_r+0x6e>
 80055c2:	68ac      	ldr	r4, [r5, #8]
 80055c4:	e7da      	b.n	800557c <_puts_r+0x24>
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <_puts_r+0xd8>)
 80055c8:	429c      	cmp	r4, r3
 80055ca:	bf08      	it	eq
 80055cc:	68ec      	ldreq	r4, [r5, #12]
 80055ce:	e7d5      	b.n	800557c <_puts_r+0x24>
 80055d0:	4621      	mov	r1, r4
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 f888 	bl	80056e8 <__swsetup_r>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d0dd      	beq.n	8005598 <_puts_r+0x40>
 80055dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80055e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055e2:	07da      	lsls	r2, r3, #31
 80055e4:	d405      	bmi.n	80055f2 <_puts_r+0x9a>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	059b      	lsls	r3, r3, #22
 80055ea:	d402      	bmi.n	80055f2 <_puts_r+0x9a>
 80055ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ee:	f000 faa2 	bl	8005b36 <__retarget_lock_release_recursive>
 80055f2:	4628      	mov	r0, r5
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	da04      	bge.n	8005604 <_puts_r+0xac>
 80055fa:	69a2      	ldr	r2, [r4, #24]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	dc06      	bgt.n	800560e <_puts_r+0xb6>
 8005600:	290a      	cmp	r1, #10
 8005602:	d004      	beq.n	800560e <_puts_r+0xb6>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	6022      	str	r2, [r4, #0]
 800560a:	7019      	strb	r1, [r3, #0]
 800560c:	e7c5      	b.n	800559a <_puts_r+0x42>
 800560e:	4622      	mov	r2, r4
 8005610:	4628      	mov	r0, r5
 8005612:	f000 f817 	bl	8005644 <__swbuf_r>
 8005616:	3001      	adds	r0, #1
 8005618:	d1bf      	bne.n	800559a <_puts_r+0x42>
 800561a:	e7df      	b.n	80055dc <_puts_r+0x84>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	250a      	movs	r5, #10
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	6022      	str	r2, [r4, #0]
 8005624:	701d      	strb	r5, [r3, #0]
 8005626:	e7db      	b.n	80055e0 <_puts_r+0x88>
 8005628:	080065fc 	.word	0x080065fc
 800562c:	0800661c 	.word	0x0800661c
 8005630:	080065dc 	.word	0x080065dc

08005634 <puts>:
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <puts+0xc>)
 8005636:	4601      	mov	r1, r0
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f7ff bf8d 	b.w	8005558 <_puts_r>
 800563e:	bf00      	nop
 8005640:	2000000c 	.word	0x2000000c

08005644 <__swbuf_r>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	460e      	mov	r6, r1
 8005648:	4614      	mov	r4, r2
 800564a:	4605      	mov	r5, r0
 800564c:	b118      	cbz	r0, 8005656 <__swbuf_r+0x12>
 800564e:	6983      	ldr	r3, [r0, #24]
 8005650:	b90b      	cbnz	r3, 8005656 <__swbuf_r+0x12>
 8005652:	f000 f9d1 	bl	80059f8 <__sinit>
 8005656:	4b21      	ldr	r3, [pc, #132]	; (80056dc <__swbuf_r+0x98>)
 8005658:	429c      	cmp	r4, r3
 800565a:	d12b      	bne.n	80056b4 <__swbuf_r+0x70>
 800565c:	686c      	ldr	r4, [r5, #4]
 800565e:	69a3      	ldr	r3, [r4, #24]
 8005660:	60a3      	str	r3, [r4, #8]
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	071a      	lsls	r2, r3, #28
 8005666:	d52f      	bpl.n	80056c8 <__swbuf_r+0x84>
 8005668:	6923      	ldr	r3, [r4, #16]
 800566a:	b36b      	cbz	r3, 80056c8 <__swbuf_r+0x84>
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	6820      	ldr	r0, [r4, #0]
 8005670:	1ac0      	subs	r0, r0, r3
 8005672:	6963      	ldr	r3, [r4, #20]
 8005674:	b2f6      	uxtb	r6, r6
 8005676:	4283      	cmp	r3, r0
 8005678:	4637      	mov	r7, r6
 800567a:	dc04      	bgt.n	8005686 <__swbuf_r+0x42>
 800567c:	4621      	mov	r1, r4
 800567e:	4628      	mov	r0, r5
 8005680:	f000 f926 	bl	80058d0 <_fflush_r>
 8005684:	bb30      	cbnz	r0, 80056d4 <__swbuf_r+0x90>
 8005686:	68a3      	ldr	r3, [r4, #8]
 8005688:	3b01      	subs	r3, #1
 800568a:	60a3      	str	r3, [r4, #8]
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	6022      	str	r2, [r4, #0]
 8005692:	701e      	strb	r6, [r3, #0]
 8005694:	6963      	ldr	r3, [r4, #20]
 8005696:	3001      	adds	r0, #1
 8005698:	4283      	cmp	r3, r0
 800569a:	d004      	beq.n	80056a6 <__swbuf_r+0x62>
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	07db      	lsls	r3, r3, #31
 80056a0:	d506      	bpl.n	80056b0 <__swbuf_r+0x6c>
 80056a2:	2e0a      	cmp	r6, #10
 80056a4:	d104      	bne.n	80056b0 <__swbuf_r+0x6c>
 80056a6:	4621      	mov	r1, r4
 80056a8:	4628      	mov	r0, r5
 80056aa:	f000 f911 	bl	80058d0 <_fflush_r>
 80056ae:	b988      	cbnz	r0, 80056d4 <__swbuf_r+0x90>
 80056b0:	4638      	mov	r0, r7
 80056b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056b4:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <__swbuf_r+0x9c>)
 80056b6:	429c      	cmp	r4, r3
 80056b8:	d101      	bne.n	80056be <__swbuf_r+0x7a>
 80056ba:	68ac      	ldr	r4, [r5, #8]
 80056bc:	e7cf      	b.n	800565e <__swbuf_r+0x1a>
 80056be:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <__swbuf_r+0xa0>)
 80056c0:	429c      	cmp	r4, r3
 80056c2:	bf08      	it	eq
 80056c4:	68ec      	ldreq	r4, [r5, #12]
 80056c6:	e7ca      	b.n	800565e <__swbuf_r+0x1a>
 80056c8:	4621      	mov	r1, r4
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 f80c 	bl	80056e8 <__swsetup_r>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d0cb      	beq.n	800566c <__swbuf_r+0x28>
 80056d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80056d8:	e7ea      	b.n	80056b0 <__swbuf_r+0x6c>
 80056da:	bf00      	nop
 80056dc:	080065fc 	.word	0x080065fc
 80056e0:	0800661c 	.word	0x0800661c
 80056e4:	080065dc 	.word	0x080065dc

080056e8 <__swsetup_r>:
 80056e8:	4b32      	ldr	r3, [pc, #200]	; (80057b4 <__swsetup_r+0xcc>)
 80056ea:	b570      	push	{r4, r5, r6, lr}
 80056ec:	681d      	ldr	r5, [r3, #0]
 80056ee:	4606      	mov	r6, r0
 80056f0:	460c      	mov	r4, r1
 80056f2:	b125      	cbz	r5, 80056fe <__swsetup_r+0x16>
 80056f4:	69ab      	ldr	r3, [r5, #24]
 80056f6:	b913      	cbnz	r3, 80056fe <__swsetup_r+0x16>
 80056f8:	4628      	mov	r0, r5
 80056fa:	f000 f97d 	bl	80059f8 <__sinit>
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <__swsetup_r+0xd0>)
 8005700:	429c      	cmp	r4, r3
 8005702:	d10f      	bne.n	8005724 <__swsetup_r+0x3c>
 8005704:	686c      	ldr	r4, [r5, #4]
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800570c:	0719      	lsls	r1, r3, #28
 800570e:	d42c      	bmi.n	800576a <__swsetup_r+0x82>
 8005710:	06dd      	lsls	r5, r3, #27
 8005712:	d411      	bmi.n	8005738 <__swsetup_r+0x50>
 8005714:	2309      	movs	r3, #9
 8005716:	6033      	str	r3, [r6, #0]
 8005718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800571c:	81a3      	strh	r3, [r4, #12]
 800571e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005722:	e03e      	b.n	80057a2 <__swsetup_r+0xba>
 8005724:	4b25      	ldr	r3, [pc, #148]	; (80057bc <__swsetup_r+0xd4>)
 8005726:	429c      	cmp	r4, r3
 8005728:	d101      	bne.n	800572e <__swsetup_r+0x46>
 800572a:	68ac      	ldr	r4, [r5, #8]
 800572c:	e7eb      	b.n	8005706 <__swsetup_r+0x1e>
 800572e:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <__swsetup_r+0xd8>)
 8005730:	429c      	cmp	r4, r3
 8005732:	bf08      	it	eq
 8005734:	68ec      	ldreq	r4, [r5, #12]
 8005736:	e7e6      	b.n	8005706 <__swsetup_r+0x1e>
 8005738:	0758      	lsls	r0, r3, #29
 800573a:	d512      	bpl.n	8005762 <__swsetup_r+0x7a>
 800573c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800573e:	b141      	cbz	r1, 8005752 <__swsetup_r+0x6a>
 8005740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005744:	4299      	cmp	r1, r3
 8005746:	d002      	beq.n	800574e <__swsetup_r+0x66>
 8005748:	4630      	mov	r0, r6
 800574a:	f000 fa5b 	bl	8005c04 <_free_r>
 800574e:	2300      	movs	r3, #0
 8005750:	6363      	str	r3, [r4, #52]	; 0x34
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	2300      	movs	r3, #0
 800575c:	6063      	str	r3, [r4, #4]
 800575e:	6923      	ldr	r3, [r4, #16]
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	f043 0308 	orr.w	r3, r3, #8
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	b94b      	cbnz	r3, 8005782 <__swsetup_r+0x9a>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005778:	d003      	beq.n	8005782 <__swsetup_r+0x9a>
 800577a:	4621      	mov	r1, r4
 800577c:	4630      	mov	r0, r6
 800577e:	f000 fa01 	bl	8005b84 <__smakebuf_r>
 8005782:	89a0      	ldrh	r0, [r4, #12]
 8005784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005788:	f010 0301 	ands.w	r3, r0, #1
 800578c:	d00a      	beq.n	80057a4 <__swsetup_r+0xbc>
 800578e:	2300      	movs	r3, #0
 8005790:	60a3      	str	r3, [r4, #8]
 8005792:	6963      	ldr	r3, [r4, #20]
 8005794:	425b      	negs	r3, r3
 8005796:	61a3      	str	r3, [r4, #24]
 8005798:	6923      	ldr	r3, [r4, #16]
 800579a:	b943      	cbnz	r3, 80057ae <__swsetup_r+0xc6>
 800579c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057a0:	d1ba      	bne.n	8005718 <__swsetup_r+0x30>
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	0781      	lsls	r1, r0, #30
 80057a6:	bf58      	it	pl
 80057a8:	6963      	ldrpl	r3, [r4, #20]
 80057aa:	60a3      	str	r3, [r4, #8]
 80057ac:	e7f4      	b.n	8005798 <__swsetup_r+0xb0>
 80057ae:	2000      	movs	r0, #0
 80057b0:	e7f7      	b.n	80057a2 <__swsetup_r+0xba>
 80057b2:	bf00      	nop
 80057b4:	2000000c 	.word	0x2000000c
 80057b8:	080065fc 	.word	0x080065fc
 80057bc:	0800661c 	.word	0x0800661c
 80057c0:	080065dc 	.word	0x080065dc

080057c4 <__sflush_r>:
 80057c4:	898a      	ldrh	r2, [r1, #12]
 80057c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ca:	4605      	mov	r5, r0
 80057cc:	0710      	lsls	r0, r2, #28
 80057ce:	460c      	mov	r4, r1
 80057d0:	d458      	bmi.n	8005884 <__sflush_r+0xc0>
 80057d2:	684b      	ldr	r3, [r1, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	dc05      	bgt.n	80057e4 <__sflush_r+0x20>
 80057d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	dc02      	bgt.n	80057e4 <__sflush_r+0x20>
 80057de:	2000      	movs	r0, #0
 80057e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057e6:	2e00      	cmp	r6, #0
 80057e8:	d0f9      	beq.n	80057de <__sflush_r+0x1a>
 80057ea:	2300      	movs	r3, #0
 80057ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057f0:	682f      	ldr	r7, [r5, #0]
 80057f2:	602b      	str	r3, [r5, #0]
 80057f4:	d032      	beq.n	800585c <__sflush_r+0x98>
 80057f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	075a      	lsls	r2, r3, #29
 80057fc:	d505      	bpl.n	800580a <__sflush_r+0x46>
 80057fe:	6863      	ldr	r3, [r4, #4]
 8005800:	1ac0      	subs	r0, r0, r3
 8005802:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005804:	b10b      	cbz	r3, 800580a <__sflush_r+0x46>
 8005806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005808:	1ac0      	subs	r0, r0, r3
 800580a:	2300      	movs	r3, #0
 800580c:	4602      	mov	r2, r0
 800580e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005810:	6a21      	ldr	r1, [r4, #32]
 8005812:	4628      	mov	r0, r5
 8005814:	47b0      	blx	r6
 8005816:	1c43      	adds	r3, r0, #1
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	d106      	bne.n	800582a <__sflush_r+0x66>
 800581c:	6829      	ldr	r1, [r5, #0]
 800581e:	291d      	cmp	r1, #29
 8005820:	d82c      	bhi.n	800587c <__sflush_r+0xb8>
 8005822:	4a2a      	ldr	r2, [pc, #168]	; (80058cc <__sflush_r+0x108>)
 8005824:	40ca      	lsrs	r2, r1
 8005826:	07d6      	lsls	r6, r2, #31
 8005828:	d528      	bpl.n	800587c <__sflush_r+0xb8>
 800582a:	2200      	movs	r2, #0
 800582c:	6062      	str	r2, [r4, #4]
 800582e:	04d9      	lsls	r1, r3, #19
 8005830:	6922      	ldr	r2, [r4, #16]
 8005832:	6022      	str	r2, [r4, #0]
 8005834:	d504      	bpl.n	8005840 <__sflush_r+0x7c>
 8005836:	1c42      	adds	r2, r0, #1
 8005838:	d101      	bne.n	800583e <__sflush_r+0x7a>
 800583a:	682b      	ldr	r3, [r5, #0]
 800583c:	b903      	cbnz	r3, 8005840 <__sflush_r+0x7c>
 800583e:	6560      	str	r0, [r4, #84]	; 0x54
 8005840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005842:	602f      	str	r7, [r5, #0]
 8005844:	2900      	cmp	r1, #0
 8005846:	d0ca      	beq.n	80057de <__sflush_r+0x1a>
 8005848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800584c:	4299      	cmp	r1, r3
 800584e:	d002      	beq.n	8005856 <__sflush_r+0x92>
 8005850:	4628      	mov	r0, r5
 8005852:	f000 f9d7 	bl	8005c04 <_free_r>
 8005856:	2000      	movs	r0, #0
 8005858:	6360      	str	r0, [r4, #52]	; 0x34
 800585a:	e7c1      	b.n	80057e0 <__sflush_r+0x1c>
 800585c:	6a21      	ldr	r1, [r4, #32]
 800585e:	2301      	movs	r3, #1
 8005860:	4628      	mov	r0, r5
 8005862:	47b0      	blx	r6
 8005864:	1c41      	adds	r1, r0, #1
 8005866:	d1c7      	bne.n	80057f8 <__sflush_r+0x34>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0c4      	beq.n	80057f8 <__sflush_r+0x34>
 800586e:	2b1d      	cmp	r3, #29
 8005870:	d001      	beq.n	8005876 <__sflush_r+0xb2>
 8005872:	2b16      	cmp	r3, #22
 8005874:	d101      	bne.n	800587a <__sflush_r+0xb6>
 8005876:	602f      	str	r7, [r5, #0]
 8005878:	e7b1      	b.n	80057de <__sflush_r+0x1a>
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	e7ad      	b.n	80057e0 <__sflush_r+0x1c>
 8005884:	690f      	ldr	r7, [r1, #16]
 8005886:	2f00      	cmp	r7, #0
 8005888:	d0a9      	beq.n	80057de <__sflush_r+0x1a>
 800588a:	0793      	lsls	r3, r2, #30
 800588c:	680e      	ldr	r6, [r1, #0]
 800588e:	bf08      	it	eq
 8005890:	694b      	ldreq	r3, [r1, #20]
 8005892:	600f      	str	r7, [r1, #0]
 8005894:	bf18      	it	ne
 8005896:	2300      	movne	r3, #0
 8005898:	eba6 0807 	sub.w	r8, r6, r7
 800589c:	608b      	str	r3, [r1, #8]
 800589e:	f1b8 0f00 	cmp.w	r8, #0
 80058a2:	dd9c      	ble.n	80057de <__sflush_r+0x1a>
 80058a4:	6a21      	ldr	r1, [r4, #32]
 80058a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058a8:	4643      	mov	r3, r8
 80058aa:	463a      	mov	r2, r7
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b0      	blx	r6
 80058b0:	2800      	cmp	r0, #0
 80058b2:	dc06      	bgt.n	80058c2 <__sflush_r+0xfe>
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ba:	81a3      	strh	r3, [r4, #12]
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c0:	e78e      	b.n	80057e0 <__sflush_r+0x1c>
 80058c2:	4407      	add	r7, r0
 80058c4:	eba8 0800 	sub.w	r8, r8, r0
 80058c8:	e7e9      	b.n	800589e <__sflush_r+0xda>
 80058ca:	bf00      	nop
 80058cc:	20400001 	.word	0x20400001

080058d0 <_fflush_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	690b      	ldr	r3, [r1, #16]
 80058d4:	4605      	mov	r5, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	b913      	cbnz	r3, 80058e0 <_fflush_r+0x10>
 80058da:	2500      	movs	r5, #0
 80058dc:	4628      	mov	r0, r5
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	b118      	cbz	r0, 80058ea <_fflush_r+0x1a>
 80058e2:	6983      	ldr	r3, [r0, #24]
 80058e4:	b90b      	cbnz	r3, 80058ea <_fflush_r+0x1a>
 80058e6:	f000 f887 	bl	80059f8 <__sinit>
 80058ea:	4b14      	ldr	r3, [pc, #80]	; (800593c <_fflush_r+0x6c>)
 80058ec:	429c      	cmp	r4, r3
 80058ee:	d11b      	bne.n	8005928 <_fflush_r+0x58>
 80058f0:	686c      	ldr	r4, [r5, #4]
 80058f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0ef      	beq.n	80058da <_fflush_r+0xa>
 80058fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058fc:	07d0      	lsls	r0, r2, #31
 80058fe:	d404      	bmi.n	800590a <_fflush_r+0x3a>
 8005900:	0599      	lsls	r1, r3, #22
 8005902:	d402      	bmi.n	800590a <_fflush_r+0x3a>
 8005904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005906:	f000 f915 	bl	8005b34 <__retarget_lock_acquire_recursive>
 800590a:	4628      	mov	r0, r5
 800590c:	4621      	mov	r1, r4
 800590e:	f7ff ff59 	bl	80057c4 <__sflush_r>
 8005912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005914:	07da      	lsls	r2, r3, #31
 8005916:	4605      	mov	r5, r0
 8005918:	d4e0      	bmi.n	80058dc <_fflush_r+0xc>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	059b      	lsls	r3, r3, #22
 800591e:	d4dd      	bmi.n	80058dc <_fflush_r+0xc>
 8005920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005922:	f000 f908 	bl	8005b36 <__retarget_lock_release_recursive>
 8005926:	e7d9      	b.n	80058dc <_fflush_r+0xc>
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <_fflush_r+0x70>)
 800592a:	429c      	cmp	r4, r3
 800592c:	d101      	bne.n	8005932 <_fflush_r+0x62>
 800592e:	68ac      	ldr	r4, [r5, #8]
 8005930:	e7df      	b.n	80058f2 <_fflush_r+0x22>
 8005932:	4b04      	ldr	r3, [pc, #16]	; (8005944 <_fflush_r+0x74>)
 8005934:	429c      	cmp	r4, r3
 8005936:	bf08      	it	eq
 8005938:	68ec      	ldreq	r4, [r5, #12]
 800593a:	e7da      	b.n	80058f2 <_fflush_r+0x22>
 800593c:	080065fc 	.word	0x080065fc
 8005940:	0800661c 	.word	0x0800661c
 8005944:	080065dc 	.word	0x080065dc

08005948 <std>:
 8005948:	2300      	movs	r3, #0
 800594a:	b510      	push	{r4, lr}
 800594c:	4604      	mov	r4, r0
 800594e:	e9c0 3300 	strd	r3, r3, [r0]
 8005952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005956:	6083      	str	r3, [r0, #8]
 8005958:	8181      	strh	r1, [r0, #12]
 800595a:	6643      	str	r3, [r0, #100]	; 0x64
 800595c:	81c2      	strh	r2, [r0, #14]
 800595e:	6183      	str	r3, [r0, #24]
 8005960:	4619      	mov	r1, r3
 8005962:	2208      	movs	r2, #8
 8005964:	305c      	adds	r0, #92	; 0x5c
 8005966:	f7ff fdd7 	bl	8005518 <memset>
 800596a:	4b05      	ldr	r3, [pc, #20]	; (8005980 <std+0x38>)
 800596c:	6263      	str	r3, [r4, #36]	; 0x24
 800596e:	4b05      	ldr	r3, [pc, #20]	; (8005984 <std+0x3c>)
 8005970:	62a3      	str	r3, [r4, #40]	; 0x28
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <std+0x40>)
 8005974:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <std+0x44>)
 8005978:	6224      	str	r4, [r4, #32]
 800597a:	6323      	str	r3, [r4, #48]	; 0x30
 800597c:	bd10      	pop	{r4, pc}
 800597e:	bf00      	nop
 8005980:	080063c1 	.word	0x080063c1
 8005984:	080063e3 	.word	0x080063e3
 8005988:	0800641b 	.word	0x0800641b
 800598c:	0800643f 	.word	0x0800643f

08005990 <_cleanup_r>:
 8005990:	4901      	ldr	r1, [pc, #4]	; (8005998 <_cleanup_r+0x8>)
 8005992:	f000 b8af 	b.w	8005af4 <_fwalk_reent>
 8005996:	bf00      	nop
 8005998:	080058d1 	.word	0x080058d1

0800599c <__sfmoreglue>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	2268      	movs	r2, #104	; 0x68
 80059a0:	1e4d      	subs	r5, r1, #1
 80059a2:	4355      	muls	r5, r2
 80059a4:	460e      	mov	r6, r1
 80059a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059aa:	f000 f997 	bl	8005cdc <_malloc_r>
 80059ae:	4604      	mov	r4, r0
 80059b0:	b140      	cbz	r0, 80059c4 <__sfmoreglue+0x28>
 80059b2:	2100      	movs	r1, #0
 80059b4:	e9c0 1600 	strd	r1, r6, [r0]
 80059b8:	300c      	adds	r0, #12
 80059ba:	60a0      	str	r0, [r4, #8]
 80059bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059c0:	f7ff fdaa 	bl	8005518 <memset>
 80059c4:	4620      	mov	r0, r4
 80059c6:	bd70      	pop	{r4, r5, r6, pc}

080059c8 <__sfp_lock_acquire>:
 80059c8:	4801      	ldr	r0, [pc, #4]	; (80059d0 <__sfp_lock_acquire+0x8>)
 80059ca:	f000 b8b3 	b.w	8005b34 <__retarget_lock_acquire_recursive>
 80059ce:	bf00      	nop
 80059d0:	20000245 	.word	0x20000245

080059d4 <__sfp_lock_release>:
 80059d4:	4801      	ldr	r0, [pc, #4]	; (80059dc <__sfp_lock_release+0x8>)
 80059d6:	f000 b8ae 	b.w	8005b36 <__retarget_lock_release_recursive>
 80059da:	bf00      	nop
 80059dc:	20000245 	.word	0x20000245

080059e0 <__sinit_lock_acquire>:
 80059e0:	4801      	ldr	r0, [pc, #4]	; (80059e8 <__sinit_lock_acquire+0x8>)
 80059e2:	f000 b8a7 	b.w	8005b34 <__retarget_lock_acquire_recursive>
 80059e6:	bf00      	nop
 80059e8:	20000246 	.word	0x20000246

080059ec <__sinit_lock_release>:
 80059ec:	4801      	ldr	r0, [pc, #4]	; (80059f4 <__sinit_lock_release+0x8>)
 80059ee:	f000 b8a2 	b.w	8005b36 <__retarget_lock_release_recursive>
 80059f2:	bf00      	nop
 80059f4:	20000246 	.word	0x20000246

080059f8 <__sinit>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	4604      	mov	r4, r0
 80059fc:	f7ff fff0 	bl	80059e0 <__sinit_lock_acquire>
 8005a00:	69a3      	ldr	r3, [r4, #24]
 8005a02:	b11b      	cbz	r3, 8005a0c <__sinit+0x14>
 8005a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a08:	f7ff bff0 	b.w	80059ec <__sinit_lock_release>
 8005a0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a10:	6523      	str	r3, [r4, #80]	; 0x50
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <__sinit+0x68>)
 8005a14:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <__sinit+0x6c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a1a:	42a3      	cmp	r3, r4
 8005a1c:	bf04      	itt	eq
 8005a1e:	2301      	moveq	r3, #1
 8005a20:	61a3      	streq	r3, [r4, #24]
 8005a22:	4620      	mov	r0, r4
 8005a24:	f000 f820 	bl	8005a68 <__sfp>
 8005a28:	6060      	str	r0, [r4, #4]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f81c 	bl	8005a68 <__sfp>
 8005a30:	60a0      	str	r0, [r4, #8]
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f818 	bl	8005a68 <__sfp>
 8005a38:	2200      	movs	r2, #0
 8005a3a:	60e0      	str	r0, [r4, #12]
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	6860      	ldr	r0, [r4, #4]
 8005a40:	f7ff ff82 	bl	8005948 <std>
 8005a44:	68a0      	ldr	r0, [r4, #8]
 8005a46:	2201      	movs	r2, #1
 8005a48:	2109      	movs	r1, #9
 8005a4a:	f7ff ff7d 	bl	8005948 <std>
 8005a4e:	68e0      	ldr	r0, [r4, #12]
 8005a50:	2202      	movs	r2, #2
 8005a52:	2112      	movs	r1, #18
 8005a54:	f7ff ff78 	bl	8005948 <std>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	61a3      	str	r3, [r4, #24]
 8005a5c:	e7d2      	b.n	8005a04 <__sinit+0xc>
 8005a5e:	bf00      	nop
 8005a60:	080065d8 	.word	0x080065d8
 8005a64:	08005991 	.word	0x08005991

08005a68 <__sfp>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	f7ff ffac 	bl	80059c8 <__sfp_lock_acquire>
 8005a70:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <__sfp+0x84>)
 8005a72:	681e      	ldr	r6, [r3, #0]
 8005a74:	69b3      	ldr	r3, [r6, #24]
 8005a76:	b913      	cbnz	r3, 8005a7e <__sfp+0x16>
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f7ff ffbd 	bl	80059f8 <__sinit>
 8005a7e:	3648      	adds	r6, #72	; 0x48
 8005a80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	d503      	bpl.n	8005a90 <__sfp+0x28>
 8005a88:	6833      	ldr	r3, [r6, #0]
 8005a8a:	b30b      	cbz	r3, 8005ad0 <__sfp+0x68>
 8005a8c:	6836      	ldr	r6, [r6, #0]
 8005a8e:	e7f7      	b.n	8005a80 <__sfp+0x18>
 8005a90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a94:	b9d5      	cbnz	r5, 8005acc <__sfp+0x64>
 8005a96:	4b16      	ldr	r3, [pc, #88]	; (8005af0 <__sfp+0x88>)
 8005a98:	60e3      	str	r3, [r4, #12]
 8005a9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a9e:	6665      	str	r5, [r4, #100]	; 0x64
 8005aa0:	f000 f847 	bl	8005b32 <__retarget_lock_init_recursive>
 8005aa4:	f7ff ff96 	bl	80059d4 <__sfp_lock_release>
 8005aa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005aac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ab0:	6025      	str	r5, [r4, #0]
 8005ab2:	61a5      	str	r5, [r4, #24]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005abc:	f7ff fd2c 	bl	8005518 <memset>
 8005ac0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ac4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ac8:	4620      	mov	r0, r4
 8005aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005acc:	3468      	adds	r4, #104	; 0x68
 8005ace:	e7d9      	b.n	8005a84 <__sfp+0x1c>
 8005ad0:	2104      	movs	r1, #4
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	f7ff ff62 	bl	800599c <__sfmoreglue>
 8005ad8:	4604      	mov	r4, r0
 8005ada:	6030      	str	r0, [r6, #0]
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d1d5      	bne.n	8005a8c <__sfp+0x24>
 8005ae0:	f7ff ff78 	bl	80059d4 <__sfp_lock_release>
 8005ae4:	230c      	movs	r3, #12
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	e7ee      	b.n	8005ac8 <__sfp+0x60>
 8005aea:	bf00      	nop
 8005aec:	080065d8 	.word	0x080065d8
 8005af0:	ffff0001 	.word	0xffff0001

08005af4 <_fwalk_reent>:
 8005af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af8:	4606      	mov	r6, r0
 8005afa:	4688      	mov	r8, r1
 8005afc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b00:	2700      	movs	r7, #0
 8005b02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b06:	f1b9 0901 	subs.w	r9, r9, #1
 8005b0a:	d505      	bpl.n	8005b18 <_fwalk_reent+0x24>
 8005b0c:	6824      	ldr	r4, [r4, #0]
 8005b0e:	2c00      	cmp	r4, #0
 8005b10:	d1f7      	bne.n	8005b02 <_fwalk_reent+0xe>
 8005b12:	4638      	mov	r0, r7
 8005b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b18:	89ab      	ldrh	r3, [r5, #12]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d907      	bls.n	8005b2e <_fwalk_reent+0x3a>
 8005b1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b22:	3301      	adds	r3, #1
 8005b24:	d003      	beq.n	8005b2e <_fwalk_reent+0x3a>
 8005b26:	4629      	mov	r1, r5
 8005b28:	4630      	mov	r0, r6
 8005b2a:	47c0      	blx	r8
 8005b2c:	4307      	orrs	r7, r0
 8005b2e:	3568      	adds	r5, #104	; 0x68
 8005b30:	e7e9      	b.n	8005b06 <_fwalk_reent+0x12>

08005b32 <__retarget_lock_init_recursive>:
 8005b32:	4770      	bx	lr

08005b34 <__retarget_lock_acquire_recursive>:
 8005b34:	4770      	bx	lr

08005b36 <__retarget_lock_release_recursive>:
 8005b36:	4770      	bx	lr

08005b38 <__swhatbuf_r>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	460e      	mov	r6, r1
 8005b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b40:	2900      	cmp	r1, #0
 8005b42:	b096      	sub	sp, #88	; 0x58
 8005b44:	4614      	mov	r4, r2
 8005b46:	461d      	mov	r5, r3
 8005b48:	da08      	bge.n	8005b5c <__swhatbuf_r+0x24>
 8005b4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	602a      	str	r2, [r5, #0]
 8005b52:	061a      	lsls	r2, r3, #24
 8005b54:	d410      	bmi.n	8005b78 <__swhatbuf_r+0x40>
 8005b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b5a:	e00e      	b.n	8005b7a <__swhatbuf_r+0x42>
 8005b5c:	466a      	mov	r2, sp
 8005b5e:	f000 fc95 	bl	800648c <_fstat_r>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	dbf1      	blt.n	8005b4a <__swhatbuf_r+0x12>
 8005b66:	9a01      	ldr	r2, [sp, #4]
 8005b68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b70:	425a      	negs	r2, r3
 8005b72:	415a      	adcs	r2, r3
 8005b74:	602a      	str	r2, [r5, #0]
 8005b76:	e7ee      	b.n	8005b56 <__swhatbuf_r+0x1e>
 8005b78:	2340      	movs	r3, #64	; 0x40
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	b016      	add	sp, #88	; 0x58
 8005b80:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b84 <__smakebuf_r>:
 8005b84:	898b      	ldrh	r3, [r1, #12]
 8005b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b88:	079d      	lsls	r5, r3, #30
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	d507      	bpl.n	8005ba0 <__smakebuf_r+0x1c>
 8005b90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	6123      	str	r3, [r4, #16]
 8005b98:	2301      	movs	r3, #1
 8005b9a:	6163      	str	r3, [r4, #20]
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	ab01      	add	r3, sp, #4
 8005ba2:	466a      	mov	r2, sp
 8005ba4:	f7ff ffc8 	bl	8005b38 <__swhatbuf_r>
 8005ba8:	9900      	ldr	r1, [sp, #0]
 8005baa:	4605      	mov	r5, r0
 8005bac:	4630      	mov	r0, r6
 8005bae:	f000 f895 	bl	8005cdc <_malloc_r>
 8005bb2:	b948      	cbnz	r0, 8005bc8 <__smakebuf_r+0x44>
 8005bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb8:	059a      	lsls	r2, r3, #22
 8005bba:	d4ef      	bmi.n	8005b9c <__smakebuf_r+0x18>
 8005bbc:	f023 0303 	bic.w	r3, r3, #3
 8005bc0:	f043 0302 	orr.w	r3, r3, #2
 8005bc4:	81a3      	strh	r3, [r4, #12]
 8005bc6:	e7e3      	b.n	8005b90 <__smakebuf_r+0xc>
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <__smakebuf_r+0x7c>)
 8005bca:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	6020      	str	r0, [r4, #0]
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	9b00      	ldr	r3, [sp, #0]
 8005bd8:	6163      	str	r3, [r4, #20]
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	6120      	str	r0, [r4, #16]
 8005bde:	b15b      	cbz	r3, 8005bf8 <__smakebuf_r+0x74>
 8005be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005be4:	4630      	mov	r0, r6
 8005be6:	f000 fc63 	bl	80064b0 <_isatty_r>
 8005bea:	b128      	cbz	r0, 8005bf8 <__smakebuf_r+0x74>
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	81a3      	strh	r3, [r4, #12]
 8005bf8:	89a0      	ldrh	r0, [r4, #12]
 8005bfa:	4305      	orrs	r5, r0
 8005bfc:	81a5      	strh	r5, [r4, #12]
 8005bfe:	e7cd      	b.n	8005b9c <__smakebuf_r+0x18>
 8005c00:	08005991 	.word	0x08005991

08005c04 <_free_r>:
 8005c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c06:	2900      	cmp	r1, #0
 8005c08:	d044      	beq.n	8005c94 <_free_r+0x90>
 8005c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c0e:	9001      	str	r0, [sp, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f1a1 0404 	sub.w	r4, r1, #4
 8005c16:	bfb8      	it	lt
 8005c18:	18e4      	addlt	r4, r4, r3
 8005c1a:	f000 fc6b 	bl	80064f4 <__malloc_lock>
 8005c1e:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <_free_r+0x94>)
 8005c20:	9801      	ldr	r0, [sp, #4]
 8005c22:	6813      	ldr	r3, [r2, #0]
 8005c24:	b933      	cbnz	r3, 8005c34 <_free_r+0x30>
 8005c26:	6063      	str	r3, [r4, #4]
 8005c28:	6014      	str	r4, [r2, #0]
 8005c2a:	b003      	add	sp, #12
 8005c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c30:	f000 bc66 	b.w	8006500 <__malloc_unlock>
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	d908      	bls.n	8005c4a <_free_r+0x46>
 8005c38:	6825      	ldr	r5, [r4, #0]
 8005c3a:	1961      	adds	r1, r4, r5
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	bf01      	itttt	eq
 8005c40:	6819      	ldreq	r1, [r3, #0]
 8005c42:	685b      	ldreq	r3, [r3, #4]
 8005c44:	1949      	addeq	r1, r1, r5
 8005c46:	6021      	streq	r1, [r4, #0]
 8005c48:	e7ed      	b.n	8005c26 <_free_r+0x22>
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	b10b      	cbz	r3, 8005c54 <_free_r+0x50>
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d9fa      	bls.n	8005c4a <_free_r+0x46>
 8005c54:	6811      	ldr	r1, [r2, #0]
 8005c56:	1855      	adds	r5, r2, r1
 8005c58:	42a5      	cmp	r5, r4
 8005c5a:	d10b      	bne.n	8005c74 <_free_r+0x70>
 8005c5c:	6824      	ldr	r4, [r4, #0]
 8005c5e:	4421      	add	r1, r4
 8005c60:	1854      	adds	r4, r2, r1
 8005c62:	42a3      	cmp	r3, r4
 8005c64:	6011      	str	r1, [r2, #0]
 8005c66:	d1e0      	bne.n	8005c2a <_free_r+0x26>
 8005c68:	681c      	ldr	r4, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	6053      	str	r3, [r2, #4]
 8005c6e:	4421      	add	r1, r4
 8005c70:	6011      	str	r1, [r2, #0]
 8005c72:	e7da      	b.n	8005c2a <_free_r+0x26>
 8005c74:	d902      	bls.n	8005c7c <_free_r+0x78>
 8005c76:	230c      	movs	r3, #12
 8005c78:	6003      	str	r3, [r0, #0]
 8005c7a:	e7d6      	b.n	8005c2a <_free_r+0x26>
 8005c7c:	6825      	ldr	r5, [r4, #0]
 8005c7e:	1961      	adds	r1, r4, r5
 8005c80:	428b      	cmp	r3, r1
 8005c82:	bf04      	itt	eq
 8005c84:	6819      	ldreq	r1, [r3, #0]
 8005c86:	685b      	ldreq	r3, [r3, #4]
 8005c88:	6063      	str	r3, [r4, #4]
 8005c8a:	bf04      	itt	eq
 8005c8c:	1949      	addeq	r1, r1, r5
 8005c8e:	6021      	streq	r1, [r4, #0]
 8005c90:	6054      	str	r4, [r2, #4]
 8005c92:	e7ca      	b.n	8005c2a <_free_r+0x26>
 8005c94:	b003      	add	sp, #12
 8005c96:	bd30      	pop	{r4, r5, pc}
 8005c98:	20000248 	.word	0x20000248

08005c9c <sbrk_aligned>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4e0e      	ldr	r6, [pc, #56]	; (8005cd8 <sbrk_aligned+0x3c>)
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	6831      	ldr	r1, [r6, #0]
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	b911      	cbnz	r1, 8005cae <sbrk_aligned+0x12>
 8005ca8:	f000 fb7a 	bl	80063a0 <_sbrk_r>
 8005cac:	6030      	str	r0, [r6, #0]
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f000 fb75 	bl	80063a0 <_sbrk_r>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	d00a      	beq.n	8005cd0 <sbrk_aligned+0x34>
 8005cba:	1cc4      	adds	r4, r0, #3
 8005cbc:	f024 0403 	bic.w	r4, r4, #3
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d007      	beq.n	8005cd4 <sbrk_aligned+0x38>
 8005cc4:	1a21      	subs	r1, r4, r0
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 fb6a 	bl	80063a0 <_sbrk_r>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d101      	bne.n	8005cd4 <sbrk_aligned+0x38>
 8005cd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	2000024c 	.word	0x2000024c

08005cdc <_malloc_r>:
 8005cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce0:	1ccd      	adds	r5, r1, #3
 8005ce2:	f025 0503 	bic.w	r5, r5, #3
 8005ce6:	3508      	adds	r5, #8
 8005ce8:	2d0c      	cmp	r5, #12
 8005cea:	bf38      	it	cc
 8005cec:	250c      	movcc	r5, #12
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	db01      	blt.n	8005cf8 <_malloc_r+0x1c>
 8005cf4:	42a9      	cmp	r1, r5
 8005cf6:	d905      	bls.n	8005d04 <_malloc_r+0x28>
 8005cf8:	230c      	movs	r3, #12
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	2600      	movs	r6, #0
 8005cfe:	4630      	mov	r0, r6
 8005d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d04:	4e2e      	ldr	r6, [pc, #184]	; (8005dc0 <_malloc_r+0xe4>)
 8005d06:	f000 fbf5 	bl	80064f4 <__malloc_lock>
 8005d0a:	6833      	ldr	r3, [r6, #0]
 8005d0c:	461c      	mov	r4, r3
 8005d0e:	bb34      	cbnz	r4, 8005d5e <_malloc_r+0x82>
 8005d10:	4629      	mov	r1, r5
 8005d12:	4638      	mov	r0, r7
 8005d14:	f7ff ffc2 	bl	8005c9c <sbrk_aligned>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	d14d      	bne.n	8005dba <_malloc_r+0xde>
 8005d1e:	6834      	ldr	r4, [r6, #0]
 8005d20:	4626      	mov	r6, r4
 8005d22:	2e00      	cmp	r6, #0
 8005d24:	d140      	bne.n	8005da8 <_malloc_r+0xcc>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	eb04 0803 	add.w	r8, r4, r3
 8005d30:	f000 fb36 	bl	80063a0 <_sbrk_r>
 8005d34:	4580      	cmp	r8, r0
 8005d36:	d13a      	bne.n	8005dae <_malloc_r+0xd2>
 8005d38:	6821      	ldr	r1, [r4, #0]
 8005d3a:	3503      	adds	r5, #3
 8005d3c:	1a6d      	subs	r5, r5, r1
 8005d3e:	f025 0503 	bic.w	r5, r5, #3
 8005d42:	3508      	adds	r5, #8
 8005d44:	2d0c      	cmp	r5, #12
 8005d46:	bf38      	it	cc
 8005d48:	250c      	movcc	r5, #12
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f7ff ffa5 	bl	8005c9c <sbrk_aligned>
 8005d52:	3001      	adds	r0, #1
 8005d54:	d02b      	beq.n	8005dae <_malloc_r+0xd2>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	442b      	add	r3, r5
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	e00e      	b.n	8005d7c <_malloc_r+0xa0>
 8005d5e:	6822      	ldr	r2, [r4, #0]
 8005d60:	1b52      	subs	r2, r2, r5
 8005d62:	d41e      	bmi.n	8005da2 <_malloc_r+0xc6>
 8005d64:	2a0b      	cmp	r2, #11
 8005d66:	d916      	bls.n	8005d96 <_malloc_r+0xba>
 8005d68:	1961      	adds	r1, r4, r5
 8005d6a:	42a3      	cmp	r3, r4
 8005d6c:	6025      	str	r5, [r4, #0]
 8005d6e:	bf18      	it	ne
 8005d70:	6059      	strne	r1, [r3, #4]
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	bf08      	it	eq
 8005d76:	6031      	streq	r1, [r6, #0]
 8005d78:	5162      	str	r2, [r4, r5]
 8005d7a:	604b      	str	r3, [r1, #4]
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	f104 060b 	add.w	r6, r4, #11
 8005d82:	f000 fbbd 	bl	8006500 <__malloc_unlock>
 8005d86:	f026 0607 	bic.w	r6, r6, #7
 8005d8a:	1d23      	adds	r3, r4, #4
 8005d8c:	1af2      	subs	r2, r6, r3
 8005d8e:	d0b6      	beq.n	8005cfe <_malloc_r+0x22>
 8005d90:	1b9b      	subs	r3, r3, r6
 8005d92:	50a3      	str	r3, [r4, r2]
 8005d94:	e7b3      	b.n	8005cfe <_malloc_r+0x22>
 8005d96:	6862      	ldr	r2, [r4, #4]
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	bf0c      	ite	eq
 8005d9c:	6032      	streq	r2, [r6, #0]
 8005d9e:	605a      	strne	r2, [r3, #4]
 8005da0:	e7ec      	b.n	8005d7c <_malloc_r+0xa0>
 8005da2:	4623      	mov	r3, r4
 8005da4:	6864      	ldr	r4, [r4, #4]
 8005da6:	e7b2      	b.n	8005d0e <_malloc_r+0x32>
 8005da8:	4634      	mov	r4, r6
 8005daa:	6876      	ldr	r6, [r6, #4]
 8005dac:	e7b9      	b.n	8005d22 <_malloc_r+0x46>
 8005dae:	230c      	movs	r3, #12
 8005db0:	603b      	str	r3, [r7, #0]
 8005db2:	4638      	mov	r0, r7
 8005db4:	f000 fba4 	bl	8006500 <__malloc_unlock>
 8005db8:	e7a1      	b.n	8005cfe <_malloc_r+0x22>
 8005dba:	6025      	str	r5, [r4, #0]
 8005dbc:	e7de      	b.n	8005d7c <_malloc_r+0xa0>
 8005dbe:	bf00      	nop
 8005dc0:	20000248 	.word	0x20000248

08005dc4 <__sfputc_r>:
 8005dc4:	6893      	ldr	r3, [r2, #8]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	b410      	push	{r4}
 8005dcc:	6093      	str	r3, [r2, #8]
 8005dce:	da08      	bge.n	8005de2 <__sfputc_r+0x1e>
 8005dd0:	6994      	ldr	r4, [r2, #24]
 8005dd2:	42a3      	cmp	r3, r4
 8005dd4:	db01      	blt.n	8005dda <__sfputc_r+0x16>
 8005dd6:	290a      	cmp	r1, #10
 8005dd8:	d103      	bne.n	8005de2 <__sfputc_r+0x1e>
 8005dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dde:	f7ff bc31 	b.w	8005644 <__swbuf_r>
 8005de2:	6813      	ldr	r3, [r2, #0]
 8005de4:	1c58      	adds	r0, r3, #1
 8005de6:	6010      	str	r0, [r2, #0]
 8005de8:	7019      	strb	r1, [r3, #0]
 8005dea:	4608      	mov	r0, r1
 8005dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <__sfputs_r>:
 8005df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df4:	4606      	mov	r6, r0
 8005df6:	460f      	mov	r7, r1
 8005df8:	4614      	mov	r4, r2
 8005dfa:	18d5      	adds	r5, r2, r3
 8005dfc:	42ac      	cmp	r4, r5
 8005dfe:	d101      	bne.n	8005e04 <__sfputs_r+0x12>
 8005e00:	2000      	movs	r0, #0
 8005e02:	e007      	b.n	8005e14 <__sfputs_r+0x22>
 8005e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e08:	463a      	mov	r2, r7
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff ffda 	bl	8005dc4 <__sfputc_r>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d1f3      	bne.n	8005dfc <__sfputs_r+0xa>
 8005e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e18 <_vfiprintf_r>:
 8005e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	460d      	mov	r5, r1
 8005e1e:	b09d      	sub	sp, #116	; 0x74
 8005e20:	4614      	mov	r4, r2
 8005e22:	4698      	mov	r8, r3
 8005e24:	4606      	mov	r6, r0
 8005e26:	b118      	cbz	r0, 8005e30 <_vfiprintf_r+0x18>
 8005e28:	6983      	ldr	r3, [r0, #24]
 8005e2a:	b90b      	cbnz	r3, 8005e30 <_vfiprintf_r+0x18>
 8005e2c:	f7ff fde4 	bl	80059f8 <__sinit>
 8005e30:	4b89      	ldr	r3, [pc, #548]	; (8006058 <_vfiprintf_r+0x240>)
 8005e32:	429d      	cmp	r5, r3
 8005e34:	d11b      	bne.n	8005e6e <_vfiprintf_r+0x56>
 8005e36:	6875      	ldr	r5, [r6, #4]
 8005e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e3a:	07d9      	lsls	r1, r3, #31
 8005e3c:	d405      	bmi.n	8005e4a <_vfiprintf_r+0x32>
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	059a      	lsls	r2, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_vfiprintf_r+0x32>
 8005e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e46:	f7ff fe75 	bl	8005b34 <__retarget_lock_acquire_recursive>
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	071b      	lsls	r3, r3, #28
 8005e4e:	d501      	bpl.n	8005e54 <_vfiprintf_r+0x3c>
 8005e50:	692b      	ldr	r3, [r5, #16]
 8005e52:	b9eb      	cbnz	r3, 8005e90 <_vfiprintf_r+0x78>
 8005e54:	4629      	mov	r1, r5
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7ff fc46 	bl	80056e8 <__swsetup_r>
 8005e5c:	b1c0      	cbz	r0, 8005e90 <_vfiprintf_r+0x78>
 8005e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e60:	07dc      	lsls	r4, r3, #31
 8005e62:	d50e      	bpl.n	8005e82 <_vfiprintf_r+0x6a>
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e68:	b01d      	add	sp, #116	; 0x74
 8005e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6e:	4b7b      	ldr	r3, [pc, #492]	; (800605c <_vfiprintf_r+0x244>)
 8005e70:	429d      	cmp	r5, r3
 8005e72:	d101      	bne.n	8005e78 <_vfiprintf_r+0x60>
 8005e74:	68b5      	ldr	r5, [r6, #8]
 8005e76:	e7df      	b.n	8005e38 <_vfiprintf_r+0x20>
 8005e78:	4b79      	ldr	r3, [pc, #484]	; (8006060 <_vfiprintf_r+0x248>)
 8005e7a:	429d      	cmp	r5, r3
 8005e7c:	bf08      	it	eq
 8005e7e:	68f5      	ldreq	r5, [r6, #12]
 8005e80:	e7da      	b.n	8005e38 <_vfiprintf_r+0x20>
 8005e82:	89ab      	ldrh	r3, [r5, #12]
 8005e84:	0598      	lsls	r0, r3, #22
 8005e86:	d4ed      	bmi.n	8005e64 <_vfiprintf_r+0x4c>
 8005e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e8a:	f7ff fe54 	bl	8005b36 <__retarget_lock_release_recursive>
 8005e8e:	e7e9      	b.n	8005e64 <_vfiprintf_r+0x4c>
 8005e90:	2300      	movs	r3, #0
 8005e92:	9309      	str	r3, [sp, #36]	; 0x24
 8005e94:	2320      	movs	r3, #32
 8005e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e9e:	2330      	movs	r3, #48	; 0x30
 8005ea0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006064 <_vfiprintf_r+0x24c>
 8005ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ea8:	f04f 0901 	mov.w	r9, #1
 8005eac:	4623      	mov	r3, r4
 8005eae:	469a      	mov	sl, r3
 8005eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eb4:	b10a      	cbz	r2, 8005eba <_vfiprintf_r+0xa2>
 8005eb6:	2a25      	cmp	r2, #37	; 0x25
 8005eb8:	d1f9      	bne.n	8005eae <_vfiprintf_r+0x96>
 8005eba:	ebba 0b04 	subs.w	fp, sl, r4
 8005ebe:	d00b      	beq.n	8005ed8 <_vfiprintf_r+0xc0>
 8005ec0:	465b      	mov	r3, fp
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f7ff ff93 	bl	8005df2 <__sfputs_r>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f000 80aa 	beq.w	8006026 <_vfiprintf_r+0x20e>
 8005ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed4:	445a      	add	r2, fp
 8005ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80a2 	beq.w	8006026 <_vfiprintf_r+0x20e>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eec:	f10a 0a01 	add.w	sl, sl, #1
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	9307      	str	r3, [sp, #28]
 8005ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8005efa:	4654      	mov	r4, sl
 8005efc:	2205      	movs	r2, #5
 8005efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f02:	4858      	ldr	r0, [pc, #352]	; (8006064 <_vfiprintf_r+0x24c>)
 8005f04:	f7fa f98c 	bl	8000220 <memchr>
 8005f08:	9a04      	ldr	r2, [sp, #16]
 8005f0a:	b9d8      	cbnz	r0, 8005f44 <_vfiprintf_r+0x12c>
 8005f0c:	06d1      	lsls	r1, r2, #27
 8005f0e:	bf44      	itt	mi
 8005f10:	2320      	movmi	r3, #32
 8005f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f16:	0713      	lsls	r3, r2, #28
 8005f18:	bf44      	itt	mi
 8005f1a:	232b      	movmi	r3, #43	; 0x2b
 8005f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f20:	f89a 3000 	ldrb.w	r3, [sl]
 8005f24:	2b2a      	cmp	r3, #42	; 0x2a
 8005f26:	d015      	beq.n	8005f54 <_vfiprintf_r+0x13c>
 8005f28:	9a07      	ldr	r2, [sp, #28]
 8005f2a:	4654      	mov	r4, sl
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f04f 0c0a 	mov.w	ip, #10
 8005f32:	4621      	mov	r1, r4
 8005f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f38:	3b30      	subs	r3, #48	; 0x30
 8005f3a:	2b09      	cmp	r3, #9
 8005f3c:	d94e      	bls.n	8005fdc <_vfiprintf_r+0x1c4>
 8005f3e:	b1b0      	cbz	r0, 8005f6e <_vfiprintf_r+0x156>
 8005f40:	9207      	str	r2, [sp, #28]
 8005f42:	e014      	b.n	8005f6e <_vfiprintf_r+0x156>
 8005f44:	eba0 0308 	sub.w	r3, r0, r8
 8005f48:	fa09 f303 	lsl.w	r3, r9, r3
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	9304      	str	r3, [sp, #16]
 8005f50:	46a2      	mov	sl, r4
 8005f52:	e7d2      	b.n	8005efa <_vfiprintf_r+0xe2>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	1d19      	adds	r1, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	9103      	str	r1, [sp, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bfbb      	ittet	lt
 8005f60:	425b      	neglt	r3, r3
 8005f62:	f042 0202 	orrlt.w	r2, r2, #2
 8005f66:	9307      	strge	r3, [sp, #28]
 8005f68:	9307      	strlt	r3, [sp, #28]
 8005f6a:	bfb8      	it	lt
 8005f6c:	9204      	strlt	r2, [sp, #16]
 8005f6e:	7823      	ldrb	r3, [r4, #0]
 8005f70:	2b2e      	cmp	r3, #46	; 0x2e
 8005f72:	d10c      	bne.n	8005f8e <_vfiprintf_r+0x176>
 8005f74:	7863      	ldrb	r3, [r4, #1]
 8005f76:	2b2a      	cmp	r3, #42	; 0x2a
 8005f78:	d135      	bne.n	8005fe6 <_vfiprintf_r+0x1ce>
 8005f7a:	9b03      	ldr	r3, [sp, #12]
 8005f7c:	1d1a      	adds	r2, r3, #4
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	9203      	str	r2, [sp, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bfb8      	it	lt
 8005f86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f8a:	3402      	adds	r4, #2
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006074 <_vfiprintf_r+0x25c>
 8005f92:	7821      	ldrb	r1, [r4, #0]
 8005f94:	2203      	movs	r2, #3
 8005f96:	4650      	mov	r0, sl
 8005f98:	f7fa f942 	bl	8000220 <memchr>
 8005f9c:	b140      	cbz	r0, 8005fb0 <_vfiprintf_r+0x198>
 8005f9e:	2340      	movs	r3, #64	; 0x40
 8005fa0:	eba0 000a 	sub.w	r0, r0, sl
 8005fa4:	fa03 f000 	lsl.w	r0, r3, r0
 8005fa8:	9b04      	ldr	r3, [sp, #16]
 8005faa:	4303      	orrs	r3, r0
 8005fac:	3401      	adds	r4, #1
 8005fae:	9304      	str	r3, [sp, #16]
 8005fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb4:	482c      	ldr	r0, [pc, #176]	; (8006068 <_vfiprintf_r+0x250>)
 8005fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fba:	2206      	movs	r2, #6
 8005fbc:	f7fa f930 	bl	8000220 <memchr>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d03f      	beq.n	8006044 <_vfiprintf_r+0x22c>
 8005fc4:	4b29      	ldr	r3, [pc, #164]	; (800606c <_vfiprintf_r+0x254>)
 8005fc6:	bb1b      	cbnz	r3, 8006010 <_vfiprintf_r+0x1f8>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	3307      	adds	r3, #7
 8005fcc:	f023 0307 	bic.w	r3, r3, #7
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	9303      	str	r3, [sp, #12]
 8005fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd6:	443b      	add	r3, r7
 8005fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fda:	e767      	b.n	8005eac <_vfiprintf_r+0x94>
 8005fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	e7a5      	b.n	8005f32 <_vfiprintf_r+0x11a>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	3401      	adds	r4, #1
 8005fea:	9305      	str	r3, [sp, #20]
 8005fec:	4619      	mov	r1, r3
 8005fee:	f04f 0c0a 	mov.w	ip, #10
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ff8:	3a30      	subs	r2, #48	; 0x30
 8005ffa:	2a09      	cmp	r2, #9
 8005ffc:	d903      	bls.n	8006006 <_vfiprintf_r+0x1ee>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0c5      	beq.n	8005f8e <_vfiprintf_r+0x176>
 8006002:	9105      	str	r1, [sp, #20]
 8006004:	e7c3      	b.n	8005f8e <_vfiprintf_r+0x176>
 8006006:	fb0c 2101 	mla	r1, ip, r1, r2
 800600a:	4604      	mov	r4, r0
 800600c:	2301      	movs	r3, #1
 800600e:	e7f0      	b.n	8005ff2 <_vfiprintf_r+0x1da>
 8006010:	ab03      	add	r3, sp, #12
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	462a      	mov	r2, r5
 8006016:	4b16      	ldr	r3, [pc, #88]	; (8006070 <_vfiprintf_r+0x258>)
 8006018:	a904      	add	r1, sp, #16
 800601a:	4630      	mov	r0, r6
 800601c:	f3af 8000 	nop.w
 8006020:	4607      	mov	r7, r0
 8006022:	1c78      	adds	r0, r7, #1
 8006024:	d1d6      	bne.n	8005fd4 <_vfiprintf_r+0x1bc>
 8006026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006028:	07d9      	lsls	r1, r3, #31
 800602a:	d405      	bmi.n	8006038 <_vfiprintf_r+0x220>
 800602c:	89ab      	ldrh	r3, [r5, #12]
 800602e:	059a      	lsls	r2, r3, #22
 8006030:	d402      	bmi.n	8006038 <_vfiprintf_r+0x220>
 8006032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006034:	f7ff fd7f 	bl	8005b36 <__retarget_lock_release_recursive>
 8006038:	89ab      	ldrh	r3, [r5, #12]
 800603a:	065b      	lsls	r3, r3, #25
 800603c:	f53f af12 	bmi.w	8005e64 <_vfiprintf_r+0x4c>
 8006040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006042:	e711      	b.n	8005e68 <_vfiprintf_r+0x50>
 8006044:	ab03      	add	r3, sp, #12
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	462a      	mov	r2, r5
 800604a:	4b09      	ldr	r3, [pc, #36]	; (8006070 <_vfiprintf_r+0x258>)
 800604c:	a904      	add	r1, sp, #16
 800604e:	4630      	mov	r0, r6
 8006050:	f000 f880 	bl	8006154 <_printf_i>
 8006054:	e7e4      	b.n	8006020 <_vfiprintf_r+0x208>
 8006056:	bf00      	nop
 8006058:	080065fc 	.word	0x080065fc
 800605c:	0800661c 	.word	0x0800661c
 8006060:	080065dc 	.word	0x080065dc
 8006064:	0800663c 	.word	0x0800663c
 8006068:	08006646 	.word	0x08006646
 800606c:	00000000 	.word	0x00000000
 8006070:	08005df3 	.word	0x08005df3
 8006074:	08006642 	.word	0x08006642

08006078 <_printf_common>:
 8006078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800607c:	4616      	mov	r6, r2
 800607e:	4699      	mov	r9, r3
 8006080:	688a      	ldr	r2, [r1, #8]
 8006082:	690b      	ldr	r3, [r1, #16]
 8006084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006088:	4293      	cmp	r3, r2
 800608a:	bfb8      	it	lt
 800608c:	4613      	movlt	r3, r2
 800608e:	6033      	str	r3, [r6, #0]
 8006090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006094:	4607      	mov	r7, r0
 8006096:	460c      	mov	r4, r1
 8006098:	b10a      	cbz	r2, 800609e <_printf_common+0x26>
 800609a:	3301      	adds	r3, #1
 800609c:	6033      	str	r3, [r6, #0]
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	0699      	lsls	r1, r3, #26
 80060a2:	bf42      	ittt	mi
 80060a4:	6833      	ldrmi	r3, [r6, #0]
 80060a6:	3302      	addmi	r3, #2
 80060a8:	6033      	strmi	r3, [r6, #0]
 80060aa:	6825      	ldr	r5, [r4, #0]
 80060ac:	f015 0506 	ands.w	r5, r5, #6
 80060b0:	d106      	bne.n	80060c0 <_printf_common+0x48>
 80060b2:	f104 0a19 	add.w	sl, r4, #25
 80060b6:	68e3      	ldr	r3, [r4, #12]
 80060b8:	6832      	ldr	r2, [r6, #0]
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	42ab      	cmp	r3, r5
 80060be:	dc26      	bgt.n	800610e <_printf_common+0x96>
 80060c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060c4:	1e13      	subs	r3, r2, #0
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	bf18      	it	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	0692      	lsls	r2, r2, #26
 80060ce:	d42b      	bmi.n	8006128 <_printf_common+0xb0>
 80060d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060d4:	4649      	mov	r1, r9
 80060d6:	4638      	mov	r0, r7
 80060d8:	47c0      	blx	r8
 80060da:	3001      	adds	r0, #1
 80060dc:	d01e      	beq.n	800611c <_printf_common+0xa4>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	68e5      	ldr	r5, [r4, #12]
 80060e2:	6832      	ldr	r2, [r6, #0]
 80060e4:	f003 0306 	and.w	r3, r3, #6
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	bf08      	it	eq
 80060ec:	1aad      	subeq	r5, r5, r2
 80060ee:	68a3      	ldr	r3, [r4, #8]
 80060f0:	6922      	ldr	r2, [r4, #16]
 80060f2:	bf0c      	ite	eq
 80060f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060f8:	2500      	movne	r5, #0
 80060fa:	4293      	cmp	r3, r2
 80060fc:	bfc4      	itt	gt
 80060fe:	1a9b      	subgt	r3, r3, r2
 8006100:	18ed      	addgt	r5, r5, r3
 8006102:	2600      	movs	r6, #0
 8006104:	341a      	adds	r4, #26
 8006106:	42b5      	cmp	r5, r6
 8006108:	d11a      	bne.n	8006140 <_printf_common+0xc8>
 800610a:	2000      	movs	r0, #0
 800610c:	e008      	b.n	8006120 <_printf_common+0xa8>
 800610e:	2301      	movs	r3, #1
 8006110:	4652      	mov	r2, sl
 8006112:	4649      	mov	r1, r9
 8006114:	4638      	mov	r0, r7
 8006116:	47c0      	blx	r8
 8006118:	3001      	adds	r0, #1
 800611a:	d103      	bne.n	8006124 <_printf_common+0xac>
 800611c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006124:	3501      	adds	r5, #1
 8006126:	e7c6      	b.n	80060b6 <_printf_common+0x3e>
 8006128:	18e1      	adds	r1, r4, r3
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	2030      	movs	r0, #48	; 0x30
 800612e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006132:	4422      	add	r2, r4
 8006134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800613c:	3302      	adds	r3, #2
 800613e:	e7c7      	b.n	80060d0 <_printf_common+0x58>
 8006140:	2301      	movs	r3, #1
 8006142:	4622      	mov	r2, r4
 8006144:	4649      	mov	r1, r9
 8006146:	4638      	mov	r0, r7
 8006148:	47c0      	blx	r8
 800614a:	3001      	adds	r0, #1
 800614c:	d0e6      	beq.n	800611c <_printf_common+0xa4>
 800614e:	3601      	adds	r6, #1
 8006150:	e7d9      	b.n	8006106 <_printf_common+0x8e>
	...

08006154 <_printf_i>:
 8006154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	7e0f      	ldrb	r7, [r1, #24]
 800615a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800615c:	2f78      	cmp	r7, #120	; 0x78
 800615e:	4691      	mov	r9, r2
 8006160:	4680      	mov	r8, r0
 8006162:	460c      	mov	r4, r1
 8006164:	469a      	mov	sl, r3
 8006166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800616a:	d807      	bhi.n	800617c <_printf_i+0x28>
 800616c:	2f62      	cmp	r7, #98	; 0x62
 800616e:	d80a      	bhi.n	8006186 <_printf_i+0x32>
 8006170:	2f00      	cmp	r7, #0
 8006172:	f000 80d8 	beq.w	8006326 <_printf_i+0x1d2>
 8006176:	2f58      	cmp	r7, #88	; 0x58
 8006178:	f000 80a3 	beq.w	80062c2 <_printf_i+0x16e>
 800617c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006184:	e03a      	b.n	80061fc <_printf_i+0xa8>
 8006186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800618a:	2b15      	cmp	r3, #21
 800618c:	d8f6      	bhi.n	800617c <_printf_i+0x28>
 800618e:	a101      	add	r1, pc, #4	; (adr r1, 8006194 <_printf_i+0x40>)
 8006190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006194:	080061ed 	.word	0x080061ed
 8006198:	08006201 	.word	0x08006201
 800619c:	0800617d 	.word	0x0800617d
 80061a0:	0800617d 	.word	0x0800617d
 80061a4:	0800617d 	.word	0x0800617d
 80061a8:	0800617d 	.word	0x0800617d
 80061ac:	08006201 	.word	0x08006201
 80061b0:	0800617d 	.word	0x0800617d
 80061b4:	0800617d 	.word	0x0800617d
 80061b8:	0800617d 	.word	0x0800617d
 80061bc:	0800617d 	.word	0x0800617d
 80061c0:	0800630d 	.word	0x0800630d
 80061c4:	08006231 	.word	0x08006231
 80061c8:	080062ef 	.word	0x080062ef
 80061cc:	0800617d 	.word	0x0800617d
 80061d0:	0800617d 	.word	0x0800617d
 80061d4:	0800632f 	.word	0x0800632f
 80061d8:	0800617d 	.word	0x0800617d
 80061dc:	08006231 	.word	0x08006231
 80061e0:	0800617d 	.word	0x0800617d
 80061e4:	0800617d 	.word	0x0800617d
 80061e8:	080062f7 	.word	0x080062f7
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	1d1a      	adds	r2, r3, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	602a      	str	r2, [r5, #0]
 80061f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0a3      	b.n	8006348 <_printf_i+0x1f4>
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	6829      	ldr	r1, [r5, #0]
 8006204:	0606      	lsls	r6, r0, #24
 8006206:	f101 0304 	add.w	r3, r1, #4
 800620a:	d50a      	bpl.n	8006222 <_printf_i+0xce>
 800620c:	680e      	ldr	r6, [r1, #0]
 800620e:	602b      	str	r3, [r5, #0]
 8006210:	2e00      	cmp	r6, #0
 8006212:	da03      	bge.n	800621c <_printf_i+0xc8>
 8006214:	232d      	movs	r3, #45	; 0x2d
 8006216:	4276      	negs	r6, r6
 8006218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800621c:	485e      	ldr	r0, [pc, #376]	; (8006398 <_printf_i+0x244>)
 800621e:	230a      	movs	r3, #10
 8006220:	e019      	b.n	8006256 <_printf_i+0x102>
 8006222:	680e      	ldr	r6, [r1, #0]
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	f010 0f40 	tst.w	r0, #64	; 0x40
 800622a:	bf18      	it	ne
 800622c:	b236      	sxthne	r6, r6
 800622e:	e7ef      	b.n	8006210 <_printf_i+0xbc>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	6820      	ldr	r0, [r4, #0]
 8006234:	1d19      	adds	r1, r3, #4
 8006236:	6029      	str	r1, [r5, #0]
 8006238:	0601      	lsls	r1, r0, #24
 800623a:	d501      	bpl.n	8006240 <_printf_i+0xec>
 800623c:	681e      	ldr	r6, [r3, #0]
 800623e:	e002      	b.n	8006246 <_printf_i+0xf2>
 8006240:	0646      	lsls	r6, r0, #25
 8006242:	d5fb      	bpl.n	800623c <_printf_i+0xe8>
 8006244:	881e      	ldrh	r6, [r3, #0]
 8006246:	4854      	ldr	r0, [pc, #336]	; (8006398 <_printf_i+0x244>)
 8006248:	2f6f      	cmp	r7, #111	; 0x6f
 800624a:	bf0c      	ite	eq
 800624c:	2308      	moveq	r3, #8
 800624e:	230a      	movne	r3, #10
 8006250:	2100      	movs	r1, #0
 8006252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006256:	6865      	ldr	r5, [r4, #4]
 8006258:	60a5      	str	r5, [r4, #8]
 800625a:	2d00      	cmp	r5, #0
 800625c:	bfa2      	ittt	ge
 800625e:	6821      	ldrge	r1, [r4, #0]
 8006260:	f021 0104 	bicge.w	r1, r1, #4
 8006264:	6021      	strge	r1, [r4, #0]
 8006266:	b90e      	cbnz	r6, 800626c <_printf_i+0x118>
 8006268:	2d00      	cmp	r5, #0
 800626a:	d04d      	beq.n	8006308 <_printf_i+0x1b4>
 800626c:	4615      	mov	r5, r2
 800626e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006272:	fb03 6711 	mls	r7, r3, r1, r6
 8006276:	5dc7      	ldrb	r7, [r0, r7]
 8006278:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800627c:	4637      	mov	r7, r6
 800627e:	42bb      	cmp	r3, r7
 8006280:	460e      	mov	r6, r1
 8006282:	d9f4      	bls.n	800626e <_printf_i+0x11a>
 8006284:	2b08      	cmp	r3, #8
 8006286:	d10b      	bne.n	80062a0 <_printf_i+0x14c>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	07de      	lsls	r6, r3, #31
 800628c:	d508      	bpl.n	80062a0 <_printf_i+0x14c>
 800628e:	6923      	ldr	r3, [r4, #16]
 8006290:	6861      	ldr	r1, [r4, #4]
 8006292:	4299      	cmp	r1, r3
 8006294:	bfde      	ittt	le
 8006296:	2330      	movle	r3, #48	; 0x30
 8006298:	f805 3c01 	strble.w	r3, [r5, #-1]
 800629c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062a0:	1b52      	subs	r2, r2, r5
 80062a2:	6122      	str	r2, [r4, #16]
 80062a4:	f8cd a000 	str.w	sl, [sp]
 80062a8:	464b      	mov	r3, r9
 80062aa:	aa03      	add	r2, sp, #12
 80062ac:	4621      	mov	r1, r4
 80062ae:	4640      	mov	r0, r8
 80062b0:	f7ff fee2 	bl	8006078 <_printf_common>
 80062b4:	3001      	adds	r0, #1
 80062b6:	d14c      	bne.n	8006352 <_printf_i+0x1fe>
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062bc:	b004      	add	sp, #16
 80062be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c2:	4835      	ldr	r0, [pc, #212]	; (8006398 <_printf_i+0x244>)
 80062c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062c8:	6829      	ldr	r1, [r5, #0]
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80062d0:	6029      	str	r1, [r5, #0]
 80062d2:	061d      	lsls	r5, r3, #24
 80062d4:	d514      	bpl.n	8006300 <_printf_i+0x1ac>
 80062d6:	07df      	lsls	r7, r3, #31
 80062d8:	bf44      	itt	mi
 80062da:	f043 0320 	orrmi.w	r3, r3, #32
 80062de:	6023      	strmi	r3, [r4, #0]
 80062e0:	b91e      	cbnz	r6, 80062ea <_printf_i+0x196>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	f023 0320 	bic.w	r3, r3, #32
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	2310      	movs	r3, #16
 80062ec:	e7b0      	b.n	8006250 <_printf_i+0xfc>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	f043 0320 	orr.w	r3, r3, #32
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	2378      	movs	r3, #120	; 0x78
 80062f8:	4828      	ldr	r0, [pc, #160]	; (800639c <_printf_i+0x248>)
 80062fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062fe:	e7e3      	b.n	80062c8 <_printf_i+0x174>
 8006300:	0659      	lsls	r1, r3, #25
 8006302:	bf48      	it	mi
 8006304:	b2b6      	uxthmi	r6, r6
 8006306:	e7e6      	b.n	80062d6 <_printf_i+0x182>
 8006308:	4615      	mov	r5, r2
 800630a:	e7bb      	b.n	8006284 <_printf_i+0x130>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	6826      	ldr	r6, [r4, #0]
 8006310:	6961      	ldr	r1, [r4, #20]
 8006312:	1d18      	adds	r0, r3, #4
 8006314:	6028      	str	r0, [r5, #0]
 8006316:	0635      	lsls	r5, r6, #24
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	d501      	bpl.n	8006320 <_printf_i+0x1cc>
 800631c:	6019      	str	r1, [r3, #0]
 800631e:	e002      	b.n	8006326 <_printf_i+0x1d2>
 8006320:	0670      	lsls	r0, r6, #25
 8006322:	d5fb      	bpl.n	800631c <_printf_i+0x1c8>
 8006324:	8019      	strh	r1, [r3, #0]
 8006326:	2300      	movs	r3, #0
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	4615      	mov	r5, r2
 800632c:	e7ba      	b.n	80062a4 <_printf_i+0x150>
 800632e:	682b      	ldr	r3, [r5, #0]
 8006330:	1d1a      	adds	r2, r3, #4
 8006332:	602a      	str	r2, [r5, #0]
 8006334:	681d      	ldr	r5, [r3, #0]
 8006336:	6862      	ldr	r2, [r4, #4]
 8006338:	2100      	movs	r1, #0
 800633a:	4628      	mov	r0, r5
 800633c:	f7f9 ff70 	bl	8000220 <memchr>
 8006340:	b108      	cbz	r0, 8006346 <_printf_i+0x1f2>
 8006342:	1b40      	subs	r0, r0, r5
 8006344:	6060      	str	r0, [r4, #4]
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	2300      	movs	r3, #0
 800634c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006350:	e7a8      	b.n	80062a4 <_printf_i+0x150>
 8006352:	6923      	ldr	r3, [r4, #16]
 8006354:	462a      	mov	r2, r5
 8006356:	4649      	mov	r1, r9
 8006358:	4640      	mov	r0, r8
 800635a:	47d0      	blx	sl
 800635c:	3001      	adds	r0, #1
 800635e:	d0ab      	beq.n	80062b8 <_printf_i+0x164>
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	079b      	lsls	r3, r3, #30
 8006364:	d413      	bmi.n	800638e <_printf_i+0x23a>
 8006366:	68e0      	ldr	r0, [r4, #12]
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	4298      	cmp	r0, r3
 800636c:	bfb8      	it	lt
 800636e:	4618      	movlt	r0, r3
 8006370:	e7a4      	b.n	80062bc <_printf_i+0x168>
 8006372:	2301      	movs	r3, #1
 8006374:	4632      	mov	r2, r6
 8006376:	4649      	mov	r1, r9
 8006378:	4640      	mov	r0, r8
 800637a:	47d0      	blx	sl
 800637c:	3001      	adds	r0, #1
 800637e:	d09b      	beq.n	80062b8 <_printf_i+0x164>
 8006380:	3501      	adds	r5, #1
 8006382:	68e3      	ldr	r3, [r4, #12]
 8006384:	9903      	ldr	r1, [sp, #12]
 8006386:	1a5b      	subs	r3, r3, r1
 8006388:	42ab      	cmp	r3, r5
 800638a:	dcf2      	bgt.n	8006372 <_printf_i+0x21e>
 800638c:	e7eb      	b.n	8006366 <_printf_i+0x212>
 800638e:	2500      	movs	r5, #0
 8006390:	f104 0619 	add.w	r6, r4, #25
 8006394:	e7f5      	b.n	8006382 <_printf_i+0x22e>
 8006396:	bf00      	nop
 8006398:	0800664d 	.word	0x0800664d
 800639c:	0800665e 	.word	0x0800665e

080063a0 <_sbrk_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d06      	ldr	r5, [pc, #24]	; (80063bc <_sbrk_r+0x1c>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	f7fa fc74 	bl	8000c98 <_sbrk>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_sbrk_r+0x1a>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_sbrk_r+0x1a>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	20000250 	.word	0x20000250

080063c0 <__sread>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	460c      	mov	r4, r1
 80063c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c8:	f000 f8a0 	bl	800650c <_read_r>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	bfab      	itete	ge
 80063d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063d2:	89a3      	ldrhlt	r3, [r4, #12]
 80063d4:	181b      	addge	r3, r3, r0
 80063d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063da:	bfac      	ite	ge
 80063dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80063de:	81a3      	strhlt	r3, [r4, #12]
 80063e0:	bd10      	pop	{r4, pc}

080063e2 <__swrite>:
 80063e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e6:	461f      	mov	r7, r3
 80063e8:	898b      	ldrh	r3, [r1, #12]
 80063ea:	05db      	lsls	r3, r3, #23
 80063ec:	4605      	mov	r5, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	4616      	mov	r6, r2
 80063f2:	d505      	bpl.n	8006400 <__swrite+0x1e>
 80063f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f8:	2302      	movs	r3, #2
 80063fa:	2200      	movs	r2, #0
 80063fc:	f000 f868 	bl	80064d0 <_lseek_r>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	4632      	mov	r2, r6
 800640e:	463b      	mov	r3, r7
 8006410:	4628      	mov	r0, r5
 8006412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006416:	f000 b817 	b.w	8006448 <_write_r>

0800641a <__sseek>:
 800641a:	b510      	push	{r4, lr}
 800641c:	460c      	mov	r4, r1
 800641e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006422:	f000 f855 	bl	80064d0 <_lseek_r>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	bf15      	itete	ne
 800642c:	6560      	strne	r0, [r4, #84]	; 0x54
 800642e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006436:	81a3      	strheq	r3, [r4, #12]
 8006438:	bf18      	it	ne
 800643a:	81a3      	strhne	r3, [r4, #12]
 800643c:	bd10      	pop	{r4, pc}

0800643e <__sclose>:
 800643e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006442:	f000 b813 	b.w	800646c <_close_r>
	...

08006448 <_write_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4d07      	ldr	r5, [pc, #28]	; (8006468 <_write_r+0x20>)
 800644c:	4604      	mov	r4, r0
 800644e:	4608      	mov	r0, r1
 8006450:	4611      	mov	r1, r2
 8006452:	2200      	movs	r2, #0
 8006454:	602a      	str	r2, [r5, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	f7fa fbcd 	bl	8000bf6 <_write>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	d102      	bne.n	8006466 <_write_r+0x1e>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	b103      	cbz	r3, 8006466 <_write_r+0x1e>
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	bd38      	pop	{r3, r4, r5, pc}
 8006468:	20000250 	.word	0x20000250

0800646c <_close_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4d06      	ldr	r5, [pc, #24]	; (8006488 <_close_r+0x1c>)
 8006470:	2300      	movs	r3, #0
 8006472:	4604      	mov	r4, r0
 8006474:	4608      	mov	r0, r1
 8006476:	602b      	str	r3, [r5, #0]
 8006478:	f7fa fbd9 	bl	8000c2e <_close>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_close_r+0x1a>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	b103      	cbz	r3, 8006486 <_close_r+0x1a>
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	20000250 	.word	0x20000250

0800648c <_fstat_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d07      	ldr	r5, [pc, #28]	; (80064ac <_fstat_r+0x20>)
 8006490:	2300      	movs	r3, #0
 8006492:	4604      	mov	r4, r0
 8006494:	4608      	mov	r0, r1
 8006496:	4611      	mov	r1, r2
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	f7fa fbd4 	bl	8000c46 <_fstat>
 800649e:	1c43      	adds	r3, r0, #1
 80064a0:	d102      	bne.n	80064a8 <_fstat_r+0x1c>
 80064a2:	682b      	ldr	r3, [r5, #0]
 80064a4:	b103      	cbz	r3, 80064a8 <_fstat_r+0x1c>
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	bd38      	pop	{r3, r4, r5, pc}
 80064aa:	bf00      	nop
 80064ac:	20000250 	.word	0x20000250

080064b0 <_isatty_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d06      	ldr	r5, [pc, #24]	; (80064cc <_isatty_r+0x1c>)
 80064b4:	2300      	movs	r3, #0
 80064b6:	4604      	mov	r4, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	f7fa fbd3 	bl	8000c66 <_isatty>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d102      	bne.n	80064ca <_isatty_r+0x1a>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	b103      	cbz	r3, 80064ca <_isatty_r+0x1a>
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
 80064cc:	20000250 	.word	0x20000250

080064d0 <_lseek_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d07      	ldr	r5, [pc, #28]	; (80064f0 <_lseek_r+0x20>)
 80064d4:	4604      	mov	r4, r0
 80064d6:	4608      	mov	r0, r1
 80064d8:	4611      	mov	r1, r2
 80064da:	2200      	movs	r2, #0
 80064dc:	602a      	str	r2, [r5, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	f7fa fbcc 	bl	8000c7c <_lseek>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_lseek_r+0x1e>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_lseek_r+0x1e>
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	20000250 	.word	0x20000250

080064f4 <__malloc_lock>:
 80064f4:	4801      	ldr	r0, [pc, #4]	; (80064fc <__malloc_lock+0x8>)
 80064f6:	f7ff bb1d 	b.w	8005b34 <__retarget_lock_acquire_recursive>
 80064fa:	bf00      	nop
 80064fc:	20000244 	.word	0x20000244

08006500 <__malloc_unlock>:
 8006500:	4801      	ldr	r0, [pc, #4]	; (8006508 <__malloc_unlock+0x8>)
 8006502:	f7ff bb18 	b.w	8005b36 <__retarget_lock_release_recursive>
 8006506:	bf00      	nop
 8006508:	20000244 	.word	0x20000244

0800650c <_read_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	; (800652c <_read_r+0x20>)
 8006510:	4604      	mov	r4, r0
 8006512:	4608      	mov	r0, r1
 8006514:	4611      	mov	r1, r2
 8006516:	2200      	movs	r2, #0
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	f7fa fb4e 	bl	8000bbc <_read>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_read_r+0x1e>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_read_r+0x1e>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20000250 	.word	0x20000250

08006530 <_init>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr

0800653c <_fini>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr
